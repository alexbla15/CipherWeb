@using System;

@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ICipherInfo _db

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender dir="ltr"
                 style="@SchedulerStyle()" TItem="Event" AppointmentSelect="@SelectEvent"
                 Data=@events StartProperty="EventDate" EndProperty="ApprovingDate" AppointmentMouseEnter=@OnAppointmentMouseEnter AppointmentMouseLeave=@OnAppointmentMouseLeave
    TextProperty="Process" SelectedIndex="2" AppointmentRender=@OnEventRender TodayText="היום">
    <CipherDayView StartTime="@startTime" EndTime="@endTime" TimeFormat="h tt"/>
    <CipherWeekView StartTime="@startTime" EndTime="@endTime" />
    <CipherMonthView MoreText="תהליכים נוספים" MaxAppointmentsInSlot="@EventsInSlot"  />
    <CipherYearPlannerView />

</RadzenScheduler>

@code {
    [Parameter]
    public string Height { get; set; } = "400px";

    [Parameter]
    public string MinHeight { get; set; } = "400px";

    [Parameter]
    public string TextAlign { get; set; } = "right";

    [Parameter]
    public TimeSpan startTime { get; set; } = new TimeSpan(0, 0, 0);

    [Parameter]
    public TimeSpan endTime { get; set; } = new TimeSpan(23, 59, 59);

    [Parameter]
    public int StartHour { get; set; } = 8;

    [Parameter]
    public int EndHour { get; set; } = 16;

    [Parameter]
    public int EventsInSlot { get; set; } = 2;


    List<Event> events = new List<Event>();

    Dictionary<string, string> ProcessColoring = new Dictionary<string, string>()
    {
            ["יצירה"] = Colors.Primary,
            ["דגימה"] = Colors.Danger,
            ["העברה"] = Colors.Success,
            ["עדכון"] = Colors.Secondary
    };

    RadzenScheduler<Event> scheduler;

    protected override async Task OnInitializedAsync()
    {
        events = await _db.GetEvents();
    }

    private string SchedulerStyle()
    {
        return $@"
            height: {Height};
            min-height: {MinHeight};
            ";
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if ((args.View.Text == "חודש") && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = $"background: {Colors.PrimaryLighter};";
        }

        // change-view of days outside this month
        if ((args.View.Text == "חודש") && (args.Start.Date.Month < DateTime.Today.Month || args.Start.Date.Month > DateTime.Today.Month))
        {
            args.Attributes["style"] = $"color: lightgray;";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "שבוע" || args.View.Text == "יום") && args.Start.Hour > StartHour && args.Start.Hour < EndHour)
        {
            args.Attributes["style"] = $"background: {Colors.PrimaryLighter};";
        }
    }

    void OnEventRender(SchedulerAppointmentRenderEventArgs<Event> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        args.Attributes["style"] = $"background: {Colors.Primary};";

        foreach (string proc in ProcessColoring.Keys)
        {
            if (args.Data.Process == proc)
            {
                args.Attributes["style"] = $@"
                    background: {ProcessColoring[proc]}; 
                    color: black;
                    text-align: {TextAlign}";
            }
        }
    }

    async Task SelectEvent(SchedulerAppointmentSelectEventArgs<Event> args)
    {
        await DialogService.OpenAsync<CipherProcessCard>(args.Data.Process);
    }


    void OnAppointmentMouseEnter(SchedulerAppointmentMouseEventArgs<Event> args)
    {
        TooltipService.Open(args.Element, ts =>
    @<RadzenStack Orientation="Orientation.Vertical" Gap="0" Class="rz-p-6" Style="min-width: 250px; max-width: 500px;" dir="rtl">
        <RadzenText TextStyle="TextStyle.H6" Class="rz-mb-4" Style="color: var(--rz-tooltip-color);">
            @args.Data.Process
        </RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="30px">
            <RadzenText TextStyle="TextStyle.Body1" Style="color: var(--rz-tooltip-color); width: 44px;">
                <strong>סוג</strong>
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color);">
                @args.Data.Type
            </RadzenText>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="30px">
            <RadzenText TextStyle="TextStyle.Body1" Style="color: var(--rz-tooltip-color); width: 44px;">
                <strong>עודכן ב</strong>
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color);">
                @args.Data.UpdatingDate
            </RadzenText>
        </RadzenStack>
    </RadzenStack>, new TooltipOptions { Position = TooltipPosition.Right, Duration = null });
    }

    void OnAppointmentMouseLeave(SchedulerAppointmentMouseEventArgs<Event> args)
    {
        TooltipService.Close();
    }

}
