@using Radzen
@using CipherWeb.Data

@inject TooltipService tooltipService
@inject NavigationManager NavigationManager

@inherits RadzenButton

@code {
    [Parameter]
    public ButtonStyle ColorStyle { get; set; } = Constants.Button.Color;

    [Parameter]
    public Shade ColorShade { get; set; } = Constants.Button.Shade;

    [Parameter]
    public string HelpText { get; set; } = "";

    [Parameter]
    public TooltipService TipService { get; set; }

    [Parameter]
    public bool Wrap { get; set; } = false;

    [Parameter]
    public string StyleClass { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public string MaxWidth { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string MinHeight { get; set; }

    [Parameter]
    public string ButtonTextAlign { get; set; }

    [Parameter]
    public string Padding { get; set; }


    protected override async Task OnInitializedAsync()
    {
        StyleClass = (Wrap) ? "rz-text-wrap" : "rz-text-nowrap";
    }

    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null)
    {
        if (HelpText != "")
        {
            tooltipService.Open(elementReference, ds =>
            @<div dir="rtl">
                @HelpText
            </div>
    , options);
        }
    }


    void HideTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null)
    {
        if (HelpText != "")
        {
            tooltipService.Close();
        }
    }

    private string CustomStyle()
    {
        return $@"
                width: {Width}; 
                max-width: {MaxWidth}; 
                text-align: {ButtonTextAlign};
                padding: {Padding};
                height: {Height};
                min-height: {MinHeight};
                ";
    }

}

<RadzenButton Text="@Text" Icon="@Icon" ButtonStyle="@ColorStyle" Shade="@ColorShade" Click="@Click" Style="@CustomStyle()"
              Size="@Size" Variant="@Variant" Disabled="@Disabled" class="@StyleClass"
              MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){ 
                    Style = $"background: {Colors.Warning}; color: var(--rz-text-color)", Duration = null }))"
              MouseLeave="@(args => HideTooltipWithHtml(args))"/>