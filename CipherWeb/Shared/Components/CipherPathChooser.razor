@using System.Collections.Generic
@using Radzen
@using System.Reflection

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right">
    @UserAttributeChooser()
    @if (SelectedChips != null && SelectedChips.Any())
    {
        @ArrowIcon()
        <div class="@Constants.Styles.Chips.Container" style="@($"min-width:{Constants.StandardWidth}")">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
                         Wrap="FlexWrap.Wrap">
                @for (int i = 0; i < SelectedChips.Count; i++)
                {
                    @Chip(SelectedChips[i], i)
                    @ChipSeperator(i)
                }
                @CloseAll()
            </RadzenStack>
        </div>
    }
</RadzenStack>

@code {
    [Parameter]
    public bool Disabled { get; set; } = new();

    [Parameter]
    public List<CipherField> AvailableFields { get; set; } = new();

    [Parameter]
    public List<CipherField> SelectedChips { get; set; } = new();

    [Parameter]
    public Type? InitialType { get; set; }

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    /// <summary>
    /// item 1 => string => the current path
    /// item 2 => CipherField => full details on this field
    /// item 2 => bool => is the type a IEnumerable?
    /// </summary>
    [Parameter]
    public EventCallback<Tuple<string, CipherField, bool>> PathChanged { get; set; }

    [Parameter]
    public string Path { get; set; } = string.Empty;

    private CipherAutoComplete TextAdd = new();

    private CipherField? ChosenAttribute = new();

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Path))
        {
            ResetFields();
        }
        else
        {
            string translatedPath = CipherField.TranslatePath(Path);

            // Split the original and translated paths into parts
            string[] pathParts = Path.Trim('[', ']').Split("].[");
            string[] translatedParts = translatedPath.Trim('[', ']').Split("].[");

            Type? rootType = InitialType ?? CipherField.GetInterfaceType(pathParts[0]);

            // Ensure both arrays are the same length to avoid index out of range issues
            int minLength = Math.Min(pathParts.Length, translatedParts.Length);
            for (int i = 0; i < minLength; i++)
            {
                string currentPath = string.Join("].[", pathParts.ToList().GetRange(0, i + 1));
                currentPath = $"[{currentPath}]";

                SelectedChips.Add(new CipherField()
                        {
                            Path = pathParts[i],
                            Translation = translatedParts[i],
                            FieldType = CipherField.GetPathType(rootType, currentPath)
                        });
            }
            SetFields(SelectedChips.Last().FieldType);
        }
        ResetChosenAttribute();
    }

    private void SetPath() => Path = GetPath();

    private void ResetChosenAttribute() =>
    ChosenAttribute = new() { Translation = "בחירת פרמטר" };

    private void AddChip(CipherField field)
    {
        Type fieldType = field.ItemType();

        SelectedChips.Add(field);

        ResetChosenAttribute();
        SetFields(fieldType);

        ChangeFound();
    }

    private void RemoveChip(int index)
    {
        SelectedChips.RemoveRange(index, SelectedChips.Count - index);

        if (SelectedChips.Any())
        {
            SetFields(SelectedChips[index - 1].FieldType);
        }
        else
        {
            ResetFields();
        }

        ResetChosenAttribute();
        ChangeFound();
    }

    private void ChangeFound()
    {
        Tuple<string, CipherField, bool> curr_path = SelectedChips.Any() ?
    Tuple.Create(GetPath(), SelectedChips.Last(), SelectedChips.Any(x => x.IsList())) : Tuple.Create(string.Empty, new CipherField(), false);

        PathChanged.InvokeAsync(curr_path);
        ValueChanged.InvokeAsync();
    }

    private void RemoveAll() => RemoveChip(0);

    private void ResetFields()
    {
        if (InitialType is null)
        {
            AvailableFields = Constants.FilterableTypes.Select(y => CipherField.Create(y)).ToList();
        }
        else
        {
            SelectedChips.Add(CipherField.Create(InitialType));
            SetFields(InitialType);
        }
    }

    private void SetFields(Type fieldType)
    {
        if (fieldType is null) return;

        if (fieldType.GenericTypeArguments.Any())
        {
            fieldType = fieldType.GenericTypeArguments[0];
        }

        List<PropertyInfo> fields = fieldType.GetProperties().Where(x => x.GetCustomAttribute<HebrewTranslationAttribute>() != null).ToList();

        AvailableFields = fields.Select(x => new CipherField()
                {
                    Path = x.Name,
                    FieldType = x.PropertyType,
                    Translation = x.GetCustomAttribute<HebrewTranslationAttribute>()?.Translation
                }).ToList();

        SetPath();
    }

    public string GetPath() =>
    string.Join(".", SelectedChips.Select(x => $"[{x.Path}]"));

    public string GetTranslationPath() =>
        string.Join(".", SelectedChips.Select(x => $"[{x.Translation}]"));

    private RenderFragment? UserAttributeChooser()
        =>
    @<RadzenDropDown TValue="CipherField" Data="@AvailableFields" TextProperty="Translation"
                    Change="@(args => AddChip((CipherField)args))" Value="@ChosenAttribute"
                    Style="@($"min-width:{Constants.StandardWidth}")" Disabled="@Disabled"
                    Placeholder="בחירת פרמטר" class="@Constants.Styles.PathChooser"/>;

    private RenderFragment? ArrowIcon()
        => @<RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left" IconColor="@Colors.PrimaryDark" />;

    private RenderFragment? Chip(CipherField chip, int index)
        =>
    @<div class="@(Disabled? Constants.Styles.Chips.ChipDisabled : Constants.Styles.Chips.Chip)">
        <span>@chip.Translation</span>
        @CloseItem(chip, index)
    </div>
    ;

    private RenderFragment? CloseItem(CipherField chip, int index)
    {
        if (Disabled) return null;
        return @<span class="@Constants.Styles.Chips.CloseItem
        " @onclick="() => RemoveChip(index)">
            <RadzenIcon Icon="@Icons.Documents.Delete.close" />
        </span>
    ;
    }

    private RenderFragment? CloseAll()
    {
        if (Disabled) return null;
        return
    @<span class="@Constants.Styles.Chips.CloseAll" @onclick="RemoveAll">
        <RadzenIcon Icon="@Icons.Documents.Delete.close" />
        </span>
    ;
    }

    private RenderFragment? ChipSeperator(int i)
    => (SelectedChips.Count - 1 != i) ?  @<RadzenText Text="/" /> : null;
}