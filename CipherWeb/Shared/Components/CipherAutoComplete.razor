@using System.Text.RegularExpressions;

@code {
    /// <summary>
    /// Component width.
    /// </summary>
    [Parameter]
    public string Width { get; set; } = Constants.StandartWidth;

    /// <summary>
    /// Component's label.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Placeholder for autocomplete.
    /// </summary>
    [Parameter]
    public string? Placeholder { get; set; }

    /// <summary>
    /// Component's style.
    /// </summary>
    [Parameter]
    public string? Style { get; set; }

    /// <summary>
    /// Component's side icon.
    /// </summary>
    [Parameter]
    public string? Icon { get; set; }

    /// <summary>
    /// Property of @Data to show as text-value within AutoComplete.
    /// </summary>
    [Parameter]
    public string? TextProperty { get; set; }

    /// <summary>
    /// Allowed regex pattern for value. Defaulted to only letters / numbers / space / period
    /// </summary>
    [Parameter]
    public string AllowedRegex { get; set; } = "^[a-zA-Z0-9א-ת. \n?]+$";

    private string? _value = string.Empty;

    /// <summary>
    /// Component's value.
    /// </summary>
    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    /// <summary>
    /// Is the component disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Is the error message a popup / regular underline text.
    /// </summary>
    [Parameter]
    public bool Popup { get; set; }

    /// <summary>
    /// Is the value required for the form.
    /// </summary>
    [Parameter]
    public bool Required { get; set; } = true;

    /// <summary>
    /// Allow/disable error-messages.
    /// </summary>
    [Parameter]
    public bool ShowErrors { get; set; } = true;

    /// <summary>
    /// Allow/disable multiline autocomplete
    /// </summary>
    [Parameter]
    public bool Multiline { get; set; } = false;

    /// <summary>
    /// Is valid
    /// </summary>
    [Parameter]
    public bool IsValid { get; set; } = true;

    /// <summary>
    /// AutoComplete options.
    /// </summary>
    [Parameter]
    public IEnumerable<object>? Data { get; set; }

    /// <summary>
    /// Minimal amount of chars.
    /// </summary>
    [Parameter]
    public int MinLength { get; set; } = 0;

    /// <summary>
    /// Maximal amount of chars.
    /// </summary>
    [Parameter]
    public int MaxLength { get; set; } = int.MaxValue;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<object> Change { get; set; }

    /// <summary>
    /// Key pressed event.
    /// </summary>
    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    /// <summary>
    /// Words that are not allowed to use within the content of the component.
    /// </summary>
    [Parameter]
    public string[] UnallowedWords { get; set; } = Constants.UnallowedWords;

    private string LengthValidatorText() => $"{MinLength}-{MaxLength} תווים";

    class Model
    {
        public string value = string.Empty;
    }

    Model model = new() { value = string.Empty };
    RadzenRequiredValidator RequiredValidator = new();
    RadzenLengthValidator LengthValidator = new();
    RadzenRegexValidator ImproperCharsValidator = new();
    RadzenCustomValidator SqlInjectionValidator = new();
    RadzenCustomValidator ValueExistsValidator = new();

    public string ImproperCharsValidatorText()
    {
        if (!string.IsNullOrEmpty(model.value))
        {
            Regex regex = new Regex(AllowedRegex, RegexOptions.IgnoreCase);
            var invalidChars = model.value.Where(c => !regex.IsMatch(c.ToString())).ToList();

            if (invalidChars.Contains(' '))
            {
                return "לא ניתן להשתמש ברווח";
            }
            else if (invalidChars.Contains('.'))
            {
                return "לא ניתן להשתמש בנקודה";
            }
            else if (invalidChars.Any())
            {
                return "לא ניתן להשתמש בתו " + invalidChars[0];
            }
        }

        return string.Empty;
    }

    public Regex UnallowedWordsRegex()
    {
        string pattern = string.Join("|", UnallowedWords);
        return new Regex(pattern, RegexOptions.IgnoreCase);
    }

    /// <summary>
    /// Check if any unwanted ward was used within the set-value.
    /// </summary>
    /// <param name="set_value"></param>
    /// <returns></returns>
    public bool UnallowedWordsValidate(string set_value) => !UnallowedWordsRegex().IsMatch(set_value);

    /// <summary>
    /// Get the error message for using unallowed words.
    /// </summary>
    /// <returns></returns>
    public string UnallowedWordsValidatorText()
    {
        Regex regex = UnallowedWordsRegex();

        if (!string.IsNullOrEmpty(model.value))
        {
            if (regex.IsMatch(model.value))
            {
                Match match = regex.Match(model.value);
                return "אסור להשתמש במילה " + match.Value;
            }
        }

        return string.Empty;
    }

    public bool Check()
    {
        IsValid = LengthValidator.IsValid && ImproperCharsValidator.IsValid && SqlInjectionValidator.IsValid;
        IsValid = (Required) ? IsValid && RequiredValidator.IsValid : IsValid;

        return IsValid;
    }

    private void OnValueChanged(object value)
    {
        if (value is string stringValue)
        {
            model.value = stringValue;
            Value = stringValue;
        }
    }

    protected override void OnInitialized()
    {
        Placeholder = Placeholder ?? Label;
        model.value = Value; // Initialize model's value with the parameter value
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (parameters.TryGetValue<string>(nameof(Value), out var newValue))
        {
            model.value = newValue; // Synchronize model's value with the new parameter value
        }
    }
}

<RadzenTemplateForm TItem="Model" Data=@model Style="display:flex">
    <RadzenStack Orientation="Orientation.Vertical" Gap="0" JustifyContent="JustifyContent.Center" Style="width:100%">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="5px">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <RadzenIcon Icon="@Icon" IconColor="@Colors.PrimaryDark" Style="font-size: xx-large;" />
            }
            @if (string.IsNullOrEmpty(Label))
            {
                <RadzenAutoComplete @bind-Value=@model.value Name="setvalue" Placeholder="@Placeholder" Style="@($"{Style}; width: {Width};")" Disabled="@Disabled" onkeydown="@OnKeyDown"
                                    Data="@Data" TextProperty="@TextProperty" Change="@(EventCallback.Factory.Create(this, OnValueChanged))" 
                                    Multiline="@Multiline"/>
            }
            else
            {
                <RadzenFormField Variant=Variant.Flat Text="@Label" Style="@($"width:{Width}; min-width: {Width}")">
                    <RadzenAutoComplete @bind-Value=@model.value Name="setvalue" Placeholder="@Placeholder" Style="@Style" Disabled="@Disabled" onkeydown="@OnKeyDown"
                                        Data="@Data" TextProperty="@TextProperty" Change="@(EventCallback.Factory.Create(this, OnValueChanged))"
                                        Multiline="@Multiline" />
                </RadzenFormField>
            }
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical">
            @if (Required && ShowErrors)
            {
                <RadzenRequiredValidator @ref="RequiredValidator" Component="setvalue" Text="שדה חובה" Popup=@Popup />
            }
            <RadzenLengthValidator @ref=LengthValidator Component="setvalue" Min="@MinLength" Max="@MaxLength" Text="@LengthValidatorText()"
                                   Visible="@(RequiredValidator.IsValid && ShowErrors)" />
            <RadzenRegexValidator @ref=ImproperCharsValidator Component="setvalue" Pattern="@AllowedRegex" Text="@ImproperCharsValidatorText()" Visible=@(ShowErrors) />
            <RadzenCustomValidator @ref=SqlInjectionValidator Component="setvalue" Text="@UnallowedWordsValidatorText()" Validator="(() => UnallowedWordsValidate(model.value))" Visible=@(ShowErrors) />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>