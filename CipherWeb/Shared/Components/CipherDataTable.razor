@using System.Text
@using System.Reflection
@using System.Dynamic;

@inherits RadzenDataGrid<DisplayedObject>

@code {
    /// <summary>
    /// Data of datagrid.
    /// </summary>
    [Parameter]
    public List<DisplayedObject>? DataSource { get; set; }

    /// <summary>
    /// Selected filteration mode. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode GridFilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Columns that will be presented in the datatable
    /// </summary>
    [Parameter]
    public List<string>? SelectedColumns { get; set; }

    /// <summary>
    /// Is filteration allowed.
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; } = false;

    /// <summary>
    /// Is grouping allowed.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; } = false;

    /// <summary>
    /// Is sorting allowed.
    /// </summary>
    [Parameter]
    public bool AllowSort { get; set; } = false;

    /// <summary>
    /// Is column picking allowed.
    /// </summary>
    [Parameter]
    public bool AllowColumnPick { get; set; } = false;

    private RadzenDataGrid<DisplayedObject> CustomDataGrid = new();

    private IList<DisplayedObject>? selectedRow;

    public string? GetFooter(int index)
    {
        if (index != 0) return null;

        int pageSize = CustomDataGrid.PageSize;
        int currentPage = CustomDataGrid.CurrentPage;
        int totalRows = CustomDataGrid.View.Count();

        int startRow = (currentPage * pageSize) + 1;
        int endRow = Math.Min(startRow + pageSize - 1, totalRows);

        return $"שורות {startRow}-{endRow} מתוך {totalRows}";
    }

    public async void Navigate(string path) => 
        await JSRuntime.InvokeAsync<object>("open", path, "_blank");

    private bool IsClickable(string? prop)
    {
        if (string.IsNullOrEmpty(prop)) return false;

        List<string> PackageKeys = new() { nameof(IPackage.Vessel), nameof(IPackage.System), nameof(IPackage.Category), nameof(IPackage.Parent) };
        List<string> SysKeys = new() { nameof(IStorageSystem.Parent), nameof(IStorageSystem.Unit) };
        List<string> EventKeys = new() { nameof(IEvent.ProcessId) };

        List<string> ClickableWords = new();
        ClickableWords.AddRange(PackageKeys.Select(x => IPackage.Translate(x)).ToList());
        ClickableWords.AddRange(SysKeys.Select(x => IStorageSystem.Translate(x)).ToList());

        return ClickableWords.Contains(prop);
    }

    private static Dictionary<Type, CipherNavLink> pathMap = SetPathMap();

    private static Dictionary<Type, CipherNavLink> SetPathMap()
    {
        Dictionary<Type, CipherNavLink> pathMap = new();
        pathMap.Add(typeof(ICategory), CipherNavLinks.CategorySearch);
        pathMap.Add(typeof(IPackage), CipherNavLinks.PackageSearch);
        pathMap.Add(typeof(IProcess), CipherNavLinks.ProcessSearch);
        pathMap.Add(typeof(IStorageSystem), CipherNavLinks.SystemSearch);
        pathMap.Add(typeof(IUnit), CipherNavLinks.UnitSearch);
        pathMap.Add(typeof(IVessel), CipherNavLinks.VesselSearch);
        pathMap.Add(typeof(Report), CipherNavLinks.ViewReport);
        return pathMap;
    }

    private bool ReferencedCellClicked = false;

    private void OnCellDoubleClick(DisplayedObject data, string prop)
    {
        object obj = data.OriginalObject;

        // Get the property information of the selected property
        PropertyInfo? objProp = obj.GetType().GetProperty(prop);

        // the property must be a IResource for this method to work
        IResource? res = objProp?.GetValue(obj) as IResource;
        string? id = res?.Id;

        if (string.IsNullOrEmpty(id)) return;

        foreach (Type resType in pathMap.Keys)
        {
            if (resType.IsAssignableFrom(objProp?.PropertyType)) 
                Navigate($"{pathMap[resType].Href}?Id={id}");
        }

        ReferencedCellClicked = true;
    }

    private void OnRowDoubleClick(DataGridRowMouseEventArgs<DisplayedObject> row)
    {
        if (!ReferencedCellClicked)
        {
            object originalObj = row.Data.OriginalObject;
            IResource? obj = originalObj as IResource;
            string? id = obj?.Id;

            // One exception is a report
            if (id is null)
            {
                Report? rep = originalObj as Report;
                id = rep?.Id.ToString();
            }

            foreach (Type resType in pathMap.Keys)
            {
                if (resType.IsAssignableFrom(originalObj.GetType()))
                    Navigate($"{pathMap[resType].Href}?Id={id}");
            }
        }
        ReferencedCellClicked = false;
    }

    private string Translate(string key) => Translator.TranslateText(key);
}

@if (DataSource != null && DataSource.Any())
{
    <RadzenDataGrid @ref="CustomDataGrid" @bind-Value=@selectedRow
                    Visible="@Visible" 
                    RowDoubleClick="@(args => OnRowDoubleClick(args))"
                    TItem="DisplayedObject"
                    Data="@DataSource"
                    LoadData="LoadData"
                    FilterMode="@GridFilterMode"
                    AllowFiltering="@AllowFilter"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowColumnResize="true"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    AllowPaging="true"
                    PageSize="@Constants.RowsPerPage"
                    AllowSorting="@AllowSort"
                    SelectionMode="DataGridSelectionMode.Single"
                    AllowColumnPicking="@AllowColumnPick"
                    AllGroupsExpanded="@AllGroupsExpanded"
                    AllowGrouping="@AllowGroup"
                    HideGroupedColumn="@HideGroupedColumn"
                    Density="@Density.Compact"
                    class="@Constants.Styles.DataTable"
                    AndOperatorText="@Translate("AndOperator")"
                    OrOperatorText="@Translate("OrOperator")"
                    ClearFilterText="@Translate("ClearFilter")"
                    IsNullText="@Translate("IsNull")"
                    IsNotNullText="@Translate("IsNotNull")"
                    StartsWithText="@Translate("StartsWith")"
                    EndsWithText="@Translate("EndsWith")"
                    IsEmptyText="@Translate("IsEmpty")"
                    IsNotEmptyText="@Translate("IsNotEmpty")"
                    ContainsText="@Translate("Contains")"
                    DoesNotContainText="@Translate("DoesNotContain")"
                    EqualsText="@Translate("Equals")"
                    NotEqualsText="@Translate("NotEquals")"
                    LessThanOrEqualsText="@Translate("LessThanOrEquals")"
                    LessThanText="@Translate("LessThan")"
                    GreaterThanOrEqualsText="@Translate("GreaterThanOrEquals")"
                    GreaterThanText="@Translate("GreaterThan")"
                    AllColumnsText="@Translate("AllColumns")"
                    FilterText="@Translate("Filter")"
                    ApplyFilterText="@Translate("ApplyFilter")"
                    ColumnsShowingText="@Translate("ColumnsShowing")"
                    GroupPanelText="@Translate("GroupPanel")">
        <EmptyTemplate>
            <RadzenText Text="לא נמצאו נתונים" class="@Constants.Styles.DataGridEmpty"/>
        </EmptyTemplate>
        <Columns>
            @if (DataSource.First().Properties != null)
            {
                @if (DataSource.First().Properties is var properties)
                {
                    @if (properties != null)
                    {
                        @foreach (var prop in properties)
                        {
                            @if (prop != null)
                            {
                                @if (SelectedColumns != null && prop?.Name != null && SelectedColumns.Contains(prop.Name))
                                {
                                    <RadzenDataGridColumn TItem="DisplayedObject" Property="@nameof(DisplayedObject.Properties)" Title="@prop.Translation" OrderIndex="@prop.Order">
                                        <Template Context="data" >
                                            @if (IsClickable(prop.Translation))
                                            {
                                                <span @ondblclick="() => OnCellDoubleClick(data, prop.Name)" class="cipher_datacell">
                                                    @data.Properties?.Where(x => x.Name == prop.Name).First().Value
                                                </span>
                                            }
                                            else
                                            {
                                                @data.Properties?.Where(x => x.Name == prop.Name).First().Value
                                            }
                                        </Template>
                                    <FooterTemplate>
                                        @GetFooter(properties.IndexOf(prop))
                                    </FooterTemplate>
                                    </RadzenDataGridColumn>
                                }
                            }
                        }
                    }
                }
            }
        </Columns>
    </RadzenDataGrid>
}