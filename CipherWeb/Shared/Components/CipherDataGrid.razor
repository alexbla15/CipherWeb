@using System.Text
@using System.Reflection

@typeparam Cipher_TItem

@inject ICipherInfo _db
@inherits RadzenDataGrid<Cipher_TItem>

@code {
    /// <summary>
    /// Translator from (english, hebrew) of column names.
    /// </summary>
    [Parameter]
    public List<Tuple<string, string>> ColumnNames { get; set; }

    /// <summary>
    /// Customized columns to be used within datagrid.
    /// </summary>
    [Parameter]
    public RenderFragment CustomColumns { get; set; }

    /// <summary>
    /// Data of datagrid.
    /// </summary>
    [Parameter]
    public IEnumerable<Cipher_TItem> DataSource { get; set; }

    /// <summary>
    /// Function to fetch the data for the datagrid.
    /// </summary>
    [Parameter]
    public Func<Task<IEnumerable<Cipher_TItem>>> FetchDataFunc { get; set; } = null;

    /// <summary>
    /// Selected filteration mode. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode GridFilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Is filteration allowed. 
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; } = false;

    /// <summary>
    /// Is grouping allowed.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; } = false;

    /// <summary>
    /// Is sorting allowed.
    /// </summary>
    [Parameter]
    public bool AllowSort { get; set; } = true;

    /// <summary>
    /// Is column picking allowed.
    /// </summary>
    [Parameter]
    public bool AllowColumnPick { get; set; } = false;

    /// <summary>
    /// Are customized columns used.
    /// </summary>
    [Parameter]
    public bool WithCustomColumns { get; set; } = false;

    /// <summary>
    /// Are additional columns used.
    /// </summary>
    [Parameter]
    public bool WithAddedColumns { get; set; } = false;

    /// <summary>
    /// Is total footer of decimal values (such as mass) allowed.
    /// </summary>
    [Parameter]
    public bool WithTotalFooter { get; set; } = true;

    ///  <summary>
    /// Decide if to show datagrid only if it's full
    /// </summary>
    [Parameter]
    public bool OnlyFull { get; set; } = true;

    /// <summary>
    /// Maximal amount of rows per page of datagrid.
    /// </summary>
    [Parameter]
    public int RowsPerPage { get; set; } = Constants.RowsPerPage;

    /// <summary>
    /// Width of each column
    /// </summary>
    [Parameter]
    public string SetColumnWidth { get; set; } = "200px";

    /// <summary>
    /// Ordering dictionary of the columns within the data grid (name, place).
    /// </summary>
    [Parameter]
    public Dictionary<string, int> ColumnsOrder { get; set; }

    [Parameter]
    public Action<DataGridRenderEventArgs<Cipher_TItem>> RenderFunc { get; set; }

    private RadzenDataGrid<Cipher_TItem> CustomDataGrid;
    private Dictionary<string, object> dynamicRow = new Dictionary<string, object>();
    private DateTime dynamicDate;

    private IList<Cipher_TItem> selectedRow;

    protected override async Task OnInitializedAsync()
    {
        if (FetchDataFunc != null)
        {
            DataSource = (await FetchDataFunc()).ToList();
        }
        ColumnNames = ColumnNames ?? HebrewDictionary.Headers;
    }

    /// <summary>
    /// Gets the order of a specific column-nameaccording to ColumnsOrder dictionary.
    /// </summary>
    /// <param name="columnName"></param>
    /// <returns></returns>
    int? GetOrder(string columnName)
    {
        return ColumnsOrder?.TryGetValue(columnName, out var order) == true ? order : null;
    }
}

@if (DataSource is null && OnlyFull)
{
    <p><em>טוען...</em></p>
}
<RadzenDataGrid @ref="CustomDataGrid"
                @bind-Value=@selectedRow
                Visible="@Visible"
                TItem="Cipher_TItem"
                Data="@DataSource"
                Render="@RenderFunc"
                FilterMode="@GridFilterMode"
                AllowFiltering="@AllowFilter"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowColumnResize="true"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true"
                PageSize="@RowsPerPage"
                AllowSorting="@AllowSort"
                SelectionMode="DataGridSelectionMode.Single"
                AllowColumnPicking="@AllowColumnPick"
                AllGroupsExpanded="@AllGroupsExpanded"
                AllowGrouping="@AllowGroup"
                HideGroupedColumn="@HideGroupedColumn"
                Density="@Density.Compact"
                Style="text-align: right"
                AndOperatorText="וגם"
                OrOperatorText="או"
                ClearFilterText="ביטול"
                IsNullText="חסר"
                IsNotNullText="לא חסר"
                StartsWithText="מתחיל ב"
                EndsWithText="מסתיים ב"
                IsEmptyText="ריק"
                IsNotEmptyText="לא ריק"
                ContainsText="מכיל"
                DoesNotContainText="לא מכיל"
                EqualsText="זהה ל"
                NotEqualsText="שונה מ"
                LessThanOrEqualsText="קטן / שווה ל"
                LessThanText="קטן מ"
                GreaterThanOrEqualsText="גדול / שווה ל"
                GreaterThanText="גדול מ"
                AllColumnsText="הכל"
                FilterText="סינון"
                ApplyFilterText="סינון"
                ColumnsShowingText="עמודות מוצגות"
                GroupPanelText="גרור עמודה לכאן כדי לקבץ את הנתונים בהתאם">

    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px;
            text-align: center; margin: 2rem;">לא נמצאו נתונים</p>
    </EmptyTemplate>
    <Columns>
        @* IT PAGE USES CUSTOMIZED COLUMNS, RATHER THAN THOSE CREATED BY DEFAULT *@
        @if (!WithCustomColumns)
        {
            @foreach (Tuple<string, string> col in ColumnNames)
            {
                @if (col.Item2 == "תאריך")
                {
                    <RadzenDataGridColumn TItem="Cipher_TItem" Property="@col.Item1" Title="@col.Item2" Width="@SetColumnWidth"
                                          SortOrder="SortOrder.Descending" style="text-align:center" OrderIndex="@GetOrder(col.Item1)" />
                }
                // first column
                else if (ColumnNames.IndexOf(col) == 0 && !(typeof(Cipher_TItem).GetProperty(col.Item1) is null) && WithTotalFooter)
                {
                    <RadzenDataGridColumn TItem="Cipher_TItem" Property="@col.Item1" Title="@col.Item2" Width="@SetColumnWidth" OrderIndex="@GetOrder(col.Item1)">
                        <FooterTemplate>
                            סה"כ שורות: <b>@CustomDataGrid.View.Count() </b>
                        </FooterTemplate>
                    </RadzenDataGridColumn>
                }
                else if (!(typeof(Cipher_TItem).GetProperty(col.Item1) is null))
                {
                    @if (typeof(decimal).IsAssignableFrom(typeof(Cipher_TItem).GetProperty(col.Item1).PropertyType))
                {
                        @if (WithTotalFooter)
                        {
                            <RadzenDataGridColumn TItem="Cipher_TItem" Property="@col.Item1" Title="@col.Item2" Width="@SetColumnWidth" OrderIndex="@GetOrder(col.Item1)">
                                <Template Context="item">
                                    @string.Format("{0:0.00;0.00-}", item.GetType().GetProperty(col.Item1).GetValue(item, null))
                                </Template>
                                <EditTemplate Context="item">
                                    <RadzenDropDown @bind-Value="@dynamicRow[col.Item1]" Data="@DataSource" TextProperty="CompanyName" ValueProperty="@col.Item1"
                                    Style="width:100%; text-align: right" />
                                </EditTemplate>
                                <FooterTemplate>
                                    @if (DataSource != null)
                                    {
                                        @string.Format("{0:0.00;0.00-}", DataSource.Sum(s => (decimal?)s.GetType().GetProperty(col.Item1)?.GetValue(s)))
                                    }
                            </FooterTemplate>
                            </RadzenDataGridColumn>
                        }
                        else
                        {
                            <RadzenDataGridColumn TItem="Cipher_TItem" Property="@col.Item1" Title="@col.Item2" Width="@SetColumnWidth" OrderIndex="@GetOrder(col.Item1)">
                                <Template Context="item">
                                    @string.Format("{0:0.00;0.00-}", item.GetType().GetProperty(col.Item1).GetValue(item, null))
                                </Template>
                                <EditTemplate Context="item">
                                    <RadzenDropDown @bind-Value="@dynamicRow[col.Item1]" Data="@DataSource" TextProperty="CompanyName" ValueProperty="@col.Item1"
                                                    Style="width:100%; text-align: right" />
                                </EditTemplate>
                            </RadzenDataGridColumn>
                        }
                    }
                    else
                    {
                        <RadzenDataGridColumn TItem="Cipher_TItem" Property="@col.Item1" Title="@col.Item2" Width="200px" OrderIndex="@GetOrder(col.Item1)" />
                    }
                }
            }
            @if (WithAddedColumns)
            {
                @CustomColumns
            }
        }
        else
        {
            @CustomColumns
        }
    </Columns>
</RadzenDataGrid>