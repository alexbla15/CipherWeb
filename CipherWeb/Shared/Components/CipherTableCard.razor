@inherits CipherComponentCard

<CipherComponentCard MaxWidth="@MaxWidth" Width="@Width" Title="@Title" WithCard="@WithCard" WithButtons="@WithButtons" Height="@Height">
    <HeaderContent>
        @HeaderContent
    </HeaderContent>
    <Buttons>
        @AdditionalButtons
        @if (ExcelExport)
        {
            <CipherExcelButton FileName="@FileTitle" OnClickFunc="CsvDataFetch" CipherType="@CipherType"/>
        }
        @if (PDFExport)
        {
            <CipherPDFButton />
        }
        @if (!string.IsNullOrEmpty(ExpandPath))
        {
            <CipherNavButton Icon="@Icons.Arrows.Squared.open_in_new" Variant="Variant.Outlined" HelpText="הרחבה" Path="@ExpandPath" />
        }
        @if (Sharable)
        {
            <CipherButton Icon="@Icons.Communication.Mail.mail" HelpText="שיתוף" Variant="Variant.Outlined" />
        }
        @if (IsReport)
        {
            <CipherButton @bind-Value=@IsFavourite Variant="@(IsFavourite ? Variant.Filled : Variant.Outlined)" 
            ColorStyle="@(IsFavourite ? ButtonStyle.Primary : ButtonStyle.Danger)" ColorShade=Shade.Default
                          Icon="@Icons.Awards.star" HelpText="@(IsFavourite ? "הסרה ממועדפים" : "הוספה למועדפים" )" Click="@Toggle" />
        }
    </Buttons>
    <ChildContent>
        @ComponentContent
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Content within the card.
    /// </summary>
    [Parameter]
    public RenderFragment? ComponentContent { get; set; }

    /// <summary>
    /// Data needed for Excel-export.
    /// </summary>
    [Parameter]
    public IEnumerable<object>? DataSource { get; set; }

    /// <summary>
    /// File name for excel export.
    /// </summary>
    [Parameter]
    public string? FileTitle { get; set; }

    /// <summary>
    /// Path for the expanded version of a table.
    /// </summary>
    [Parameter]
    public string? ExpandPath { get; set; } = null;

    /// <summary>
    /// Allow exporting the data to EXCEL.
    /// </summary>
    [Parameter]
    public bool ExcelExport { get; set; } = true;

    /// <summary>
    /// Allow exporting the data to PDF.
    /// </summary>
    [Parameter]
    public bool PDFExport { get; set; } = true;

    /// <summary>
    /// Allow report to be sharable.
    /// </summary>
    [Parameter]
    public bool Sharable { get; set; } = false;

    /// <summary>
    /// If true, this is a report created with CustomReport.
    /// </summary>
    [Parameter]
    public bool IsReport { get; set; } = false;

    /// <summary>
    /// Is the report saved into favourites of user?
    /// </summary>
    [Parameter]
    public bool IsFavourite { get; set; } = false;

    /// <summary>
    /// More buttons for table card
    /// </summary>
    [Parameter]
    public RenderFragment? AdditionalButtons { get; set; }

    /// <summary>
    /// Needed datagrid.
    /// </summary>
    [Parameter]
    public RadzenDataGrid<Process> grid { get; set; } = new();

    [Parameter]
    public Func<IEnumerable<IDictionary<string, object>>> CsvDataFetch { get; set; }

    [Parameter]
    public Type CipherType { get; set; } = typeof(Resource);

    public void Toggle() => IsFavourite = !IsFavourite;
}