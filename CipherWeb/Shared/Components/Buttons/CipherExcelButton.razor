@inherits CipherButton

@using System.Text
@using System.Collections

@inject ExcelService excelService
@inject IJSRuntime JSRuntime

<CipherButton HelpText="@HelpText" Icon="@Icon" ColorStyle="ButtonStyle.Success" ColorShade="Shade.Dark"
              Click="@(args => ExportToCSV())" Variant="Variant.Outlined" />

@code
{
    /// <summary>
    /// Name of output file.
    /// </summary>
    [Parameter]
    public string FileName { get; set; }

    /// <summary>
    /// Data that will be exported to Excel.
    /// </summary>
    [Parameter]
    public IEnumerable<object> Data { get; set; }

    protected override void OnInitialized()
    {
        HelpText ??= "ייצוא ל-EXCEL";
        Icon ??= Icons.Cipher.Excel;
    }

    private async Task ExportToCSV()
    {
        if (Data == null || !Data.Any())
        {
            return; // Exit if there's no data
        }

        var csvData = GenerateCSV(Data);
        var fileName = $"{FileName}.csv"; // Change the file extension to .csv
        var mimeType = "text/csv"; // Specify UTF-8 charset

        var csvBytes = Encoding.UTF8.GetBytes(csvData);

        // Convert CSV data to Base64
        var base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(csvData));

        // Create data URL for download
        var url = $"data:{mimeType};base64,{base64String}";

        // Trigger download
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", url, fileName);
    }

    private string GenerateCSV(IEnumerable<object> data)
    {
        using (MemoryStream stream = new MemoryStream())
        {
            using (StreamWriter writer = new StreamWriter(stream, Encoding.UTF8))
            {
                // Write header row
                Type modelType = data.First().GetType();
                var properties = modelType.GetProperties();
                // writer.WriteLine(string.Join(",", properties.Select(p => p.Name)));

                List<string> heb_properties = new List<string>();
                foreach (var prop in properties)
                {
                    // prop.Name
                    foreach (Tuple<string, string> head in HebrewDictionary.Headers)
                    {
                        if (head.Item1 == prop.Name)
                        {
                            heb_properties.Add(head.Item2);
                        }
                    }
                }
                writer.WriteLine(string.Join(",", heb_properties));

                // Write data rows
                foreach (var item in data)
                {
                    var values = properties.Select(p => Convert.ToString(p.GetValue(item)).Replace(",", ";"));
                    writer.WriteLine(string.Join(",", values));
                }
            }

            return Encoding.UTF8.GetString(stream.ToArray());
        }
    }
}