@inherits CipherButton

@using System.Text
@using System.Collections

@using OfficeOpenXml
@using System.IO

@inject IJSRuntime JSRuntime

<CipherButton HelpText="@HelpText" Icon="@Icon" ColorStyle="ButtonStyle.Success" ColorShade="Shade.Dark"
              Click="@ClickFunc" Variant="Variant.Outlined" />

@code
{
    /// <summary>
    /// Name of output file.
    /// </summary>
    [Parameter]
    public string? FileName { get; set; }

    /// <summary>
    /// Data that will be exported to Excel.
    /// </summary>
    [Parameter]
    public IEnumerable<object>? Data { get; set; }

    /// <summary>
    /// Data that will be exported to Excel.
    /// </summary>
    [Parameter]
    public IEnumerable<IDictionary<string, object>>? DataSource { get; set; }

    [Parameter]
    public Func<IEnumerable<IDictionary<string, object>>>? OnClickFunc { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(HelpText)) HelpText = "ייצוא ל-EXCEL";
        Icon ??= Icons.Cipher.Excel;
    }

    private string GetFilePath() => $"{FileName}.csv";


    public async Task ClickFunc()
    {
        if (OnClickFunc != null)
        {
            DataSource = OnClickFunc.Invoke();
            await ExportToCsv();
            return;
        }
        if (DataSource != null && DataSource.Any()) await ExportToCsv();
    }

    public async Task ExportToCsv()
    {
        // Exit if there's no data
        if (DataSource == null || !DataSource.Any()) return;

        // Generate CSV data from the provided data
        var csvData = GenerateCSV(DataSource);

        // Trigger download using JavaScript interop
        await JSRuntime.InvokeVoidAsync("DownloadFile", $"{FileName}.csv", csvData);
    }


    private string GenerateCSV(IEnumerable<IDictionary<string, object>> data)
    {
        var csvContent = new List<string>();

        // Prepare CSV headers and translate them to Hebrew
        var headers = data.First().Keys.ToList();

        if (headers != null && headers.Any())
        {
            csvContent.Add(string.Join(",", headers)); // Add headers

            // Add each row of data
            foreach (var row in data)
            {
                var rowValues = headers.Select(header =>
                    row.ContainsKey(header)
                        ? $"\"{row[header]?.ToString()}\"" // Handle nulls safely
                        : string.Empty
                );

                csvContent.Add(string.Join(",", rowValues));
            }
        }

        // Add UTF-8 BOM to the beginning of the CSV content
        var utf8Bom = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());
        return utf8Bom + string.Join(Environment.NewLine, csvContent);
    }
}