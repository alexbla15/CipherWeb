@inject TooltipService tooltipService
@inject NavigationManager NavigationManager

@inherits RadzenButton

@code {
    /// <summary>
    /// Background of color. Must be a ButtonStyle-enum.
    /// </summary>
    [Parameter]
    public ButtonStyle ColorStyle { get; set; } = Constants.Button.Color;

    /// <summary>
    /// Background color shade. Must be a Shade-enum.
    /// </summary>
    [Parameter]
    public Shade ColorShade { get; set; } = Constants.Button.Shade;

    /// <summary>
    /// Help text position. Must be a TooltipPosition-enum. Defaults to top.
    /// </summary>
    [Parameter]
    public TooltipPosition HelpTextPosition { get; set; } = TooltipPosition.Top;

    /// <summary>
    /// Text that will be shown within a popup to explain shortly the button's purpose.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = string.Empty;

    /// <summary>
    /// Button's width. Units: px / %.
    /// </summary>
    [Parameter]
    public string Width { get; set; } = string.Empty;

    /// <summary>
    /// Button's height. Units: px / %.
    /// </summary>
    [Parameter]
    public string Height { get; set; } = string.Empty;

    private string StyleClass = string.Empty;
    
    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions? options = null)
    {
        if (!string.IsNullOrWhiteSpace(HelpText))
        {
            tooltipService.Open(elementReference, ds =>
        @<div dir="rtl"> @HelpText </div>, options);
        }
    }

    void HideTooltipWithHtml(ElementReference elementReference, TooltipOptions? options = null)
    {
        if (!string.IsNullOrWhiteSpace(HelpText)) tooltipService.Close();
    }

    /// <summary>
    /// Get the button's class needed for its CSS transition effect.
    /// </summary>
    /// <returns>Button's class</returns>
    private string GetButtonClass()
    {
        string btn_cls = "CipherButton ";
        if (Disabled)
        {
            btn_cls += " Disabled";
        }
        else
        {
            btn_cls += ColorStyle.GetDisplayDescription();

            if (ColorShade == Shade.Darker && Variant != Variant.Outlined)
            {
                btn_cls += "Darker";
            }
            else if ((ColorShade == Shade.Dark && Variant != Variant.Outlined) || (ColorShade == Shade.Darker && Variant == Variant.Outlined))
            {
                btn_cls += "Dark";
            }
            else if ((ColorShade == Shade.Default && Variant != Variant.Outlined) || (ColorShade == Shade.Dark && Variant == Variant.Outlined))
            {
                btn_cls += "Default";
            }
            else if ((ColorShade == Shade.Light && Variant != Variant.Outlined) || (ColorShade == Shade.Default && Variant == Variant.Outlined))
            {
                btn_cls += "Light";
            }
            else if ((ColorShade == Shade.Lighter && Variant != Variant.Outlined) || (ColorShade == Shade.Light && Variant == Variant.Outlined))
            {
                btn_cls += "Lighter";
            }
        }
        return btn_cls;
    }
}

<RadzenButton Text="@Text" BusyText="@BusyText" Visible="@Visible"
              Icon="@Icon" IconColor="@IconColor"
              ButtonStyle="@ColorStyle" Shade="@ColorShade" Click="@Click" 
              Style="@($"width: {Width}; text-align: right; height: {Height}; {Style}")"
              Size="@Size" Variant="@Variant" Disabled="@Disabled" class="@GetButtonClass()"
              MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                Style = $@"
                    background: var(--rz-{ColorStyle.GetDisplayDescription().ToLower()});
                    color: var(--rz-on-{ColorStyle.GetDisplayDescription().ToLower()})",
                Duration = null,
                Position = HelpTextPosition}))"
              MouseLeave="@(args => HideTooltipWithHtml(args))" />