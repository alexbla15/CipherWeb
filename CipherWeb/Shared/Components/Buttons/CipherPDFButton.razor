@inherits CipherButton

@using System.Text
@using System.Collections

@using OfficeOpenXml
@using System.IO
@using System.Reflection

@using QuestPDF.Fluent;
@using QuestPDF.Helpers;
@using QuestPDF.Infrastructure;

@inject IJSRuntime JS

<CipherButton HelpText="@HelpText" Icon="@Icon" ColorStyle="@ButtonStyle.Danger" ColorShade="@Shade.Dark"
              Click="@ClickFunc" Variant="@Variant.Outlined" Disabled="@Disabled"/>

@code
{
    /// <summary>
    /// Name of output file.
    /// </summary>
    [Parameter]
    public string? FileName { get; set; } = "export_data";

    /// <summary>
    /// Data that will be exported.
    /// </summary>
    [Parameter]
    public IEnumerable<IDictionary<string, object?>>? DataSource { get; set; }

    [Parameter]
    public Func<IEnumerable<IDictionary<string, object?>>>? OnClickFunc { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(HelpText)) HelpText = "ייצוא ל-PDF";
        Icon ??= Icons.Documents.picture_as_pdf;
    }

    private string GetFilePath() => $"{FileName}.csv";

    public void ClickFunc()
    {
        if (OnClickFunc != null)
        {
            DataSource = OnClickFunc.Invoke();
            TableToPDF.GeneratePdf(DataSource.ToList(), FileName);
        }
    }

    public class TableToPDF : IDocument
    {
        private IEnumerable<IDictionary<string, object?>>? _data { get; set; }

        public string FileName { get; set; } = "test.pdf";
        public string Worker { get; set; } = Constants.SetUser.Name;
        public string? Classification { get; set; } = "מוגבל";

        public DocumentMetadata GetMetadata() => DocumentMetadata.Default;

        public QuestPDF.Infrastructure.TextStyle HeaderTextStyle = QuestPDF.Infrastructure.TextStyle.Default.Size(12).DirectionFromRightToLeft();

        public void Compose(IDocumentContainer container)
        {
            container
                .Page(page =>
                {
                    page.Size(PageSizes.A4.Landscape());
                    page.Margin(1, QuestPDF.Infrastructure.Unit.Centimetre);
                    page.PageColor(QuestPDF.Helpers.Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(12));

                    page.Header().Element(ComposeHeader);
                    page.Content().Element(ComposeContent);
                    page.Footer().Element(ComposeFooter);
                });
        }

        public void ComposeHeader(IContainer container)
        {
            container.Padding(10).Row(row =>
            {
                row.RelativeColumn().AlignCenter().Text($"הודפס על ידי: {Worker}", HeaderTextStyle);

                row.RelativeColumn().AlignCenter().Text(Classification?.ToString(),
                QuestPDF.Infrastructure.TextStyle.Default.FontColor(QuestPDF.Helpers.Colors.Red.Accent1).Bold().Size(12).DirectionFromRightToLeft());

                row.RelativeColumn().AlignCenter().Text($"{DateTime.Now:dd/MM/yyyy hh:mm}", HeaderTextStyle);

            });
        }

        public List<string> Headers() => _data?.FirstOrDefault()?.Keys.ToList() ?? new();

        void ComposeContent(IContainer container)
        {
            List<string>? headers = _data?.FirstOrDefault()?.Keys.ToList();

            if (headers is null) return;

            container.PaddingVertical(10).Table(table =>
                {
                    table.ColumnsDefinition(columns =>
                    {
                        foreach (var _ in Headers())
                    {
                       columns.RelativeColumn(); // Create a column for each property
                    }
                }
            );

            // Add a header row with the property names
            table.Header(header =>
            {
                    foreach (var property in Headers())
                {
                    header.Cell().Element(HeaderCellStyle).Text(property);

                    static IContainer HeaderCellStyle(IContainer container) => container.DefaultTextStyle(x => x.Bold().FontSize(8)).Border(1).Padding(5);
                }
            });

            // Add rows for the data
            if (_data != null)
            {
                foreach (var item in _data)
                {
                    foreach (var column in Headers())
                    {
                        // Get the value from the dictionary by the key
                        var value = item.ContainsKey(column) ? item[column]?.ToString() ?? string.Empty : string.Empty;
                        table.Cell().Element(CellStyle).Text(value);
                    }
                    static IContainer CellStyle(IContainer container) => container.DefaultTextStyle(x => x.FontSize(8)).Border(1).Padding(5);
                }
            }
        });
        }

        void ComposeFooter(IContainer container)
        {
            container.Padding(10).Row(row =>
    {
        // Load image as byte array
        var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Images", "CIPHER_Logo_4.png");
        if (File.Exists(imagePath))
        {
            var imageBytes = File.ReadAllBytes(imagePath);

            // Create a container for the image
            row.RelativeItem().AlignCenter().Width(100).Height(100).Element(imageContainer =>
                {
                    imageContainer.Image(imageBytes).FitWidth();
                });
                }
                }
            );
        }

        public static void GeneratePdf(List<IDictionary<string, object?>>? Data, string? FileName)
        {
            var document = new TableToPDF() { _data = Data, FileName = $"{FileName}.pdf" };
            document.GeneratePdf(document.FileName);
        }
    }
}