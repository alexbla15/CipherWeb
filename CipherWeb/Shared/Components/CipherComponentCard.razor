@inherits CipherFormCard

<CipherFormCard MaxWidth="@MaxWidth" Width="@Width" Variant="@Variant" WithCard="@WithCard" Height="@Height" MaxHeigth="@MaxHeigth"
                Visible="@Visible" Float="@Float" MarginRight="@MarginRight" MarginTop="@MarginTop" MarginBottom="@MarginBottom" BackgroundColor="@BackgroundColor">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        @if (!string.IsNullOrEmpty(Title))
        {
            <RadzenText class="@HeaderStyleClass" Text="@Title"/>
        }
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Style="width:100%">
            <div style="@($"display: flex; justify-content: {ContentJustify};")">
                @HeaderContent
            </div>
            @if (WithButtons)
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="@ButtonsGap">
                    @Buttons
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenStack>
    @if (ChildContent != null)
    {
        <div style="@($@"
            padding: {ContentPadding}; display:{ContentDisplay}; align-items: {AlignCardItems};
            justify-content: {ContentJustify}; flex-wrap: {ContentFlexWrap};
            column-gap: {ContentColumnGap}; row-Gap: {ContentRowGap}")">
            @ChildContent
        </div>
    }
</CipherFormCard>

@code {
    /// <summary>
    /// Card title.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// Space outside of content within card.
    /// </summary>
    [Parameter]
    public string? ContentPadding { get; set; } = "5px 0";

    /// <summary>
    /// Align the content within a card.
    /// </summary>
    [Parameter]
    public string? ContentJustify { get; set; } = "right";
    /// <summary>
    /// Specify display type of the content within the card.
    /// </summary>
    [Parameter]
    public string? ContentDisplay { get; set; }

    /// <summary>
    /// Controls wrapping of content. Must set ContentDisplay accordingly for it to work.
    /// </summary>
    [Parameter]
    public string? ContentFlexWrap { get; set; }

    /// <summary>
    /// Controls gap between elements of content when there is a flexible display. Must set ContentDisplay accordingly for it to work.
    /// </summary>
    [Parameter]
    public string? ContentColumnGap { get; set; } = "100px";

    /// <summary>
    /// Controls gap between rows of content when there is a flexible display. Must set ContentDisplay accordingly for it to work.
    /// </summary>
    [Parameter]
    public string? ContentRowGap { get; set; } = "10px";

    /// <summary>
    /// Controls gap between buttons of the top left side of the component.
    /// </summary>
    [Parameter]
    public string? ButtonsGap { get; set; }

    /// <summary>
    /// Align items within the card.
    /// </summary>
    [Parameter]
    public string? AlignCardItems { get; set; }

    /// <summary>
    /// Css styling of header.
    /// </summary>
    [Parameter]
    public string? HeaderStyleClass { get; set; } = Constants.Styles.CardTitle;

    /// <summary>
    /// Card's side buttons.
    /// </summary>
    [Parameter]
    public RenderFragment? Buttons { get; set; }

    /// <summary>
    /// Card's header content. Usually a CipherAutoComplete.
    /// </summary>
    [Parameter]
    public RenderFragment? HeaderContent { get; set; }

    /// <summary>
    /// Control side-buttons visibility.
    /// </summary>
    [Parameter]
    public bool WithButtons { get; set; } = true;
}