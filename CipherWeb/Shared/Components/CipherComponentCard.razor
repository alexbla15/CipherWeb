@inherits CipherFormCard

<CipherFormCard MaxWidth="@MaxWidth" Width="@Width" Variant="@Variant" WithCard="@WithCard" Height="@Height" MaxHeigth="@MaxHeigth"
                Visible="@Visible" Float="@Float" MarginRight="@MarginRight" MarginTop="@MarginTop" MarginBottom="@MarginBottom" BackgroundColor="@BackgroundColor">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        @if (!string.IsNullOrEmpty(Title))
        {
            <RadzenText class="@HeaderStyleClass" Text="@Title"/>
        }
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Style="width:100%">
            <div class="@Constants.Styles.ComponentCardHeader">
                @HeaderContent
            </div>
            @if (WithButtons)
            {
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" 
                Gap="@ButtonsGap">
                    @Buttons
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenStack>
    @if (ChildContent != null)
    {
        <div class="@ContentStyleClass">
            @ChildContent
        </div>
    }
</CipherFormCard>

@code {
    /// <summary>
    /// Card title.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// Controls gap between buttons of the top left side of the component.
    /// </summary>
    [Parameter]
    public string? ButtonsGap { get; set; }

    /// <summary>
    /// Css styling of header.
    /// </summary>
    [Parameter]
    public string? HeaderStyleClass { get; set; } = Constants.Styles.CardTitle;

    /// <summary>
    /// Css styling of content.
    /// </summary>
    [Parameter]
    public string? ContentStyleClass { get; set; } = Constants.Styles.ComponentCardContent;

    /// <summary>
    /// Card's side buttons.
    /// </summary>
    [Parameter]
    public RenderFragment? Buttons { get; set; }

    /// <summary>
    /// Card's header content. Usually a CipherAutoComplete.
    /// </summary>
    [Parameter]
    public RenderFragment? HeaderContent { get; set; }

    /// <summary>
    /// Control side-buttons visibility.
    /// </summary>
    [Parameter]
    public bool WithButtons { get; set; } = true;
}