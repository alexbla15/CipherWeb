@using System.Collections.Generic
@using Radzen

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    @UserTextBox()
    @if (SelectedTexts != null && SelectedTexts.Any())
    {
        @ArrowIcon()
        <div class="@Constants.Styles.Chips.Container">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                @foreach (var text in SelectedTexts)
                {
                    @Chip(text)
                }

                @CloseAll()
            </RadzenStack>
        </div>
    }
</RadzenStack>

@code {
    [Parameter]
    public HashSet<string> SelectedTexts { get; set; } = new();

    [Parameter]
    public string PlaceHolder { get; set; } = "כתבו ולחצו אנטר להוספה";

    [Parameter]
    public string Icon { get; set; } = string.Empty;

    [Parameter]
    public string AllowedRegex { get; set; } = string.Empty;

    /// <summary>
    /// Text that will be added to the chip, prior to user-selected text
    /// </summary>
    [Parameter]
    public string Prefix { get; set; } = "XXX";

    /// <summary>
    /// Chiptext color
    /// </summary>
    [Parameter]
    public string Color { get; set; } = Colors.Danger;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    [Parameter]
    public bool WithPrefix { get; set; } = true;

    private CipherAutoComplete TextAdd = new();

    private string newText = string.Empty;

    private void AddText()
    {
        if (!string.IsNullOrWhiteSpace(newText))
        {
            if (TextAdd.Check())
            {
                SelectedTexts.Add(newText);
                newText = string.Empty;
                ValueChanged.InvokeAsync();
            }
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddText();
    }

    private void RemoveText(string text)
    {
        SelectedTexts.Remove(text);
        ValueChanged.InvokeAsync();
    }

    private void RemoveAll()
    {
        SelectedTexts.Clear();
        ValueChanged.InvokeAsync();
    }

    private RenderFragment? UserTextBox()
    =>
    @<CipherAutoComplete Label="@PlaceHolder" Icon="@Icon" MaxLength="3" @bind-Value="@newText"
    AllowedRegex="@AllowedRegex" Required="false" @ref=TextAdd
        @onkeydown="HandleKeyDown" />;

    private RenderFragment? ArrowIcon()
    => @<RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left" IconColor="@Colors.PrimaryDark" />;

    private RenderFragment? Chip(string text)
    =>
    @<div class="@Constants.Styles.Chips.Chip">
        @ChipText(text)
        @CloseItem(text)
    </div>;

    private RenderFragment? ChipText(string text)
        =>
    @<div>
        <span style="@(WithPrefix ? $"color: {Colors.Danger}" : "")">@text</span>
        @if (WithPrefix)
        {
            <span>@Prefix</span>
        }
    </div>;

    private RenderFragment? CloseItem(string text)
        =>
    @<span class="@Constants.Styles.Chips.CloseItem" @onclick="() => RemoveText(text)">
        <RadzenIcon Icon="@Icons.Documents.Delete.close" />
    </span>;

    private RenderFragment? CloseAll()
    =>
    @<span class="@Constants.Styles.Chips.CloseAll" @onclick="RemoveAll">
        <RadzenIcon Icon="@Icons.Documents.Delete.close" />
    </span>;
}