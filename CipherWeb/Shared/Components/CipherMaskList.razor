@using System.Collections.Generic
@using Radzen

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <CipherAutoComplete Label="@PlaceHolder" Icon="@Icon" MaxLength="3" @bind-Value="@newText"
                        AllowedRegex="@AllowedRegex" Required="false" @ref=TextAdd
    @onkeydown="HandleKeyDown" />
    @if (SelectedTexts != null && SelectedTexts.Any())
    {
        <RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left" IconColor="@Colors.PrimaryDark" />
        <div class="@Constants.Styles.Chips.Container">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                @foreach (var text in SelectedTexts)
                {
                    <div class="@Constants.Styles.Chips.Chip">
                        <span>XXX</span>
                        <span style="@($"color: {Colors.Danger}")">@text</span>
                        <span class="@Constants.Styles.Chips.CloseItem" @onclick="() => RemoveText(text)">
                            <RadzenIcon Icon="@Icons.Documents.Delete.close" />
                        </span>
                    </div>
                }

                <span class="@Constants.Styles.Chips.CloseAll" @onclick="RemoveAll">
                    <RadzenIcon Icon="@Icons.Documents.Delete.close" />
                </span>
            </RadzenStack>
        </div>

    }
</RadzenStack>

@code {
    [Parameter]
    public HashSet<string> SelectedTexts { get; set; } = new();

    [Parameter]
    public string PlaceHolder { get; set; } = "כתבו ולחצו אנטר להוספה";

    [Parameter]
    public string Icon { get; set; } = string.Empty;

    [Parameter]
    public string AllowedRegex { get; set; } = string.Empty;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private CipherAutoComplete TextAdd = new();
    private string newText = string.Empty;

    private void AddText()
    {
        if (!string.IsNullOrWhiteSpace(newText))
        {
            if (TextAdd.Check())
            {
                SelectedTexts.Add(newText);
                newText = string.Empty;
                ValueChanged.InvokeAsync();
            }
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddText();
    }

    private void RemoveText(string text)
    {
        SelectedTexts.Remove(text);
        ValueChanged.InvokeAsync();
    }

    private void RemoveAll()
    {
        SelectedTexts.Clear();
        ValueChanged.InvokeAsync();
    }
}