@using System.Collections.Generic
@using Radzen

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <CipherAutoComplete Label="@PlaceHolder" Icon="@Icon" MaxLength="3" @bind-Value="@newText"
                        AllowedRegex="@AllowedRegex" Disabled="@Disabled" Required="false" @ref=TextAdd
                        @onkeydown="HandleKeyDown" />

    <div class="cipher-chip-container">
        @if (SelectedTexts != null)
        {
            @foreach (var text in SelectedTexts)
            {
                <div class="cipher-chip">
                    @text
                    <span class="cipher-chip-close" @onclick="() => RemoveText(text)">
                        <RadzenIcon Icon="@Icons.Documents.Delete.close" />
                    </span>
                </div>
            }
        }
    </div>
</RadzenStack>

@code {
    [Parameter]
    public HashSet<string> SelectedTexts { get; set; } = new();

    [Parameter]
    public string PlaceHolder { get; set; } = "כתבו ולחצו אנטר להוספה";

    [Parameter]
    public string Icon { get; set; } = string.Empty;

    [Parameter]
    public string AllowedRegex { get; set; } = string.Empty;

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private CipherAutoComplete TextAdd = new();
    private string newText = string.Empty;

    private void AddText()
    {
        if (!string.IsNullOrWhiteSpace(newText))
        {
            if (TextAdd.Check())
            {
                SelectedTexts.Add(newText);
                newText = string.Empty;
                ValueChanged.InvokeAsync();
            }
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddText();
    }

    private void RemoveText(string text)
    {
        if (!Disabled)
        {
            SelectedTexts.Remove(text);
            ValueChanged.InvokeAsync();
        }
    }
}