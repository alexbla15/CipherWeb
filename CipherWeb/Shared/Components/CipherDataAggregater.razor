@inherits CipherComponentCard

@code {
    /// <summary>
    /// Fields available for aggregation
    /// </summary>
    [Parameter]
    public List<Tuple<string, string>> AggregationFields { get; set; }

    /// <summary>
    /// Mathematical / Logical functions for aggregation.
    /// </summary>
    [Parameter]
    public List<Tuple<string, string>> AvailableFunctions { get; set; } = new List<Tuple<string, string>>()
    {
        new ("",""),
        new ("סכום","SUM"),
        new("מקסימום","MAX"),
        new("מינימום","MIN"),
        new("ממוצע", "AVG"),
        new("חציון","MED"),
        new("כמות","COUNT"),
        new("סטיית תקן","AVG") 
    };

    /// <summary>
    /// Text to be shown when type cannot accept the selected aggregation function.
    /// </summary>
    [Parameter]
    public string TypeIncompatible { get; set; } = "פונקציה לא אפשרית לפרמטר זה";

    /// <summary>
    /// Add an aggregation function to the table - text.
    /// </summary>
    [Parameter]
    public string AddAggregateText { get; set; } = "הוספת פונקציה";

    /// <summary>
    /// Delete all aggregation functions - text.
    /// </summary>
    [Parameter]
    public string DeleteAllAggregatesText { get; set; } = "מחיקת כל הפונקציות";


    public class Aggregate
    {
        public int Id { get; set; }
        public string Parameter { get; set; }
        public string Function { get; set; }
    }

    private RadzenDataGrid<Aggregate> CustomDataGrid;
    private List<Aggregate> chosenFuncs = new List<Aggregate>();
    private Aggregate old_agg = new Aggregate();

    private int AggregationAmount = 0;
    private bool typeIncompatibleAlertVisible = false;

    /// <summary>
    /// Add an aggregation row.
    /// </summary>
    private void AddRow()
    {
        int next_id = AggregationAmount + 1;
        Aggregate new_agg = new Aggregate() { Id = next_id };

        AggregationAmount += 1;
        CustomDataGrid.InsertRow(new_agg);
    }

    /// <summary>
    /// Edit a selected aggregation
    /// </summary>
    /// <param name="agg"></param>
    /// <returns></returns>
    private async Task EditRow(Aggregate agg)
    {
        // prevent editing of two rows in parallel
        if (CustomDataGrid.Count == AggregationAmount)
        {
            old_agg.Id = agg.Id;
            old_agg.Parameter = agg.Parameter;
            old_agg.Function = agg.Function;

            chosenFuncs.Remove(agg);
            await CustomDataGrid.EditRow(agg);
        }
    }

    /// <summary>
    /// Revert to original aggregation row.
    /// </summary>
    /// <param name="agg"></param>
    /// <returns></returns>
    private async Task CancelEdit(Aggregate agg)
    {
        agg.Id = old_agg.Id;
        agg.Parameter = old_agg.Parameter;
        agg.Function = old_agg.Function;

        await SaveRow(agg);
    }

    /// <summary>
    /// Delete selected aggregation.
    /// </summary>
    /// <param name="agg"></param>
    /// <returns></returns>
    private async Task DeleteRow(Aggregate agg)
    {
        chosenFuncs.Remove(agg);

        foreach (Aggregate p in chosenFuncs)
        {
            p.Id = chosenFuncs.IndexOf(p) + 1;
        }

        CustomDataGrid.Data = chosenFuncs;

        AggregationAmount -= 1;
        await CustomDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Save changes to the aggregation selected.
    /// </summary>
    /// <param name="agg"></param>
    /// <returns></returns>
    private async Task SaveRow(Aggregate agg)
    {
        chosenFuncs.Add(agg);

        await CustomDataGrid.UpdateRow(agg);
        await CustomDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Delete the selected aggregation.
    /// </summary>
    private void DeleteAggregation()
    {
        AggregationAmount = 0;
        chosenFuncs = new List<Aggregate>();
        CustomDataGrid.Data = chosenFuncs;
    }

    /// <summary>
    /// Close the shown alert.
    /// </summary>
    private void CloseAlert()
    {
        typeIncompatibleAlertVisible = false;
    }

    /// <summary>
    /// Get list of all chosen aggregates.
    /// </summary>
    /// <returns></returns>
    public List<Aggregate> GetData()
    {
        return CustomDataGrid?.Data?.ToList() ?? new List<Aggregate>();
    }
}

<CipherComponentCard Title="@Title">
    <Buttons>
        <CipherAddBtn HelpText="@AddAggregateText" Click="@AddRow" ColorStyle="ButtonStyle.Success" ColorShade="Shade.Dark" Variant="Variant.Outlined"></CipherAddBtn>
        <CipherDeleteButton HelpText="@DeleteAllAggregatesText" Click="@DeleteAggregation" ColorStyle="ButtonStyle.Danger" ColorShade="Shade.Default" Variant="Variant.Outlined"></CipherDeleteButton>
    </Buttons>

    <ChildContent>
        <RadzenDataGrid @ref="CustomDataGrid" Data="@chosenFuncs" TItem="Aggregate" AllowColumnResize="true" Visible="AggregationAmount>0">
            <Columns>
                <RadzenDataGridColumn TItem="Aggregate" Property="Id" Title="#" Width="25px" TextAlign="TextAlign.Center">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Aggregate" Property="Parameter" Title="פרמטר" Width="75px" TextAlign="TextAlign.Center">
                    <EditTemplate Context="agg">
                        <RadzenDropDown Data="@AggregationFields.Select(x=>x.Item2).ToList()" @bind-Value="@agg.Parameter" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Aggregate" Property="Function" Title="פונקציה" Width="75px" TextAlign="TextAlign.Center">
                    <EditTemplate Context="agg">
                        <RadzenDropDown Data="@AvailableFunctions.Select(x=>x.Item1).ToList()" @bind-Value="@agg.Function" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Width="25px" TItem="Aggregate" Context="agg" Title="פעולות" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="agg">
                        <CipherEditButton Click="@(args => EditRow(agg))" @onclick:stopPropagation="true" />
                        <CipherDeleteButton Click="@(args => DeleteRow(agg))" @onclick:stopPropagation="true" />
                    </Template>
                    <EditTemplate Context="agg">
                        <CipherSuccessButton Click="@((args) => SaveRow(agg))" />
                        <CipherCloseButton Click="@((args) => CancelEdit(agg))" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenAlert Visible="@typeIncompatibleAlertVisible" Text="@TypeIncompatible" AlertStyle="AlertStyle.Danger"
                     Style="width:98%; padding:5px; margin: 1rem 5px" Close="@CloseAlert" />
    </ChildContent>
</CipherComponentCard>