@inherits CipherComponentCard

@code {
    /// <summary>
    /// Chosen type dictates which fields can be visible
    /// </summary>
    [Parameter]
    public Type ChosenType { get; set; }

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "כאן ניתן להוסיף פונקציות חדשות. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Text to be shown when type cannot accept the selected aggregation function.
    /// </summary>
    [Parameter]
    public string TypeIncompatible { get; set; } = "פונקציה לא אפשרית לפרמטר זה";

    /// <summary>
    /// Add an aggregation function to the table - text.
    /// </summary>
    [Parameter]
    public string AddAggregateText { get; set; } = "הוספת פונקציה";

    /// <summary>
    /// Delete all aggregation functions - text.
    /// </summary>
    [Parameter]
    public string DeleteAllAggregatesText { get; set; } = "מחיקת כל הפונקציות";

    /// <summary>
    /// All available aggregation fields - methods are applicable only upon them
    /// </summary>
    [Parameter]
    public List<string> AggregationFields { get; set; } = new();

    [Parameter]
    public List<IAggregateItem> ChosenAggregates { get; set; } = new();

    [Parameter]
    public EventCallback<List<IAggregateItem>> ChosenAggregatesChanged { get; set; }

    private RadzenDataGrid<IAggregateItem> CustomDataGrid = new();
    private CipherMethodDropDown AggMethod = new();

    private bool typeIncompatibleAlertVisible = false;

    private string GetLabel(string property) => IAggregateItem.Translate(property);

    /// <summary>
    /// Add an aggregation row.
    /// </summary>
    private async Task AddRow()
    {
        ChosenAggregates.Add(Config.AggregateItem());
        StateHasChanged();
        await CustomDataGrid.RefreshDataAsync();
        await ParamsChanged(); // Trigger change event
    }

    /// <summary>
    /// Delete selected aggregation.
    /// </summary>
    private async Task DeleteRow(IAggregateItem agg)
    {
        ChosenAggregates.Remove(agg);
        StateHasChanged();
        await CustomDataGrid.RefreshDataAsync();
        await ParamsChanged(); // Trigger change event
    }

    /// <summary>
    /// Save changes to the aggregation selected.
    /// </summary>
    private async Task SaveRow(IAggregateItem agg)
    {
        ChosenAggregates.Add(agg);

        await CustomDataGrid.UpdateRow(agg);
        await CustomDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Delete the selected aggregation.
    /// </summary>
    private async Task DeleteAggregation()
    {
        ChosenAggregates = new();
        await ParamsChanged(); // Trigger change event
    }

    /// <summary>
    /// Close the shown alert.
    /// </summary>
    private void CloseAlert() => typeIncompatibleAlertVisible = false;

    /// <summary>
    /// Get list of all chosen aggregates.
    /// </summary>
    /// <returns></returns>
    public List<IAggregateItem> GetData() => CustomDataGrid?.Data?.ToList() ?? new();

    public bool IsDate(IAggregateItem agg)
    {
        if (string.IsNullOrEmpty(agg.Attribute)) return false;
        return CipherField.IsDateTime(CipherField.GetPathType(ChosenType, agg.Attribute));

    }

    public bool IsNumeric(IAggregateItem agg)
    {
        if (string.IsNullOrEmpty(agg.Attribute)) return false;
        return CipherField.IsNumber(CipherField.GetPathType(ChosenType, agg.Attribute));
    }


    async Task ParamsChanged()
        => await ChosenAggregatesChanged.InvokeAsync(ChosenAggregates); // Trigger change event

    private RenderFragment AttributeFiller(IAggregateItem agg)
    =>
    @<CipherPathChooser InitialType="@ChosenType" PathChanged="@(async args => {
                                agg.Attribute = args.Item1;
                                agg.Method = null;
                                await ParamsChanged();})" />
    ;

    private RenderFragment AsFiller(IAggregateItem agg)
        =>@<RadzenTextBox @bind-Value="@agg.As" Style="width:100%" Change="@(async args => {await ParamsChanged();})" />;

    private RenderFragment MethodFiller(IAggregateItem agg)
        =>@<CipherMethodDropDown ChosenMethod="@agg.Method" @ref=AggMethod
                          Visible="@(!string.IsNullOrEmpty(agg.Attribute) || AggregationFields.Any(x=>x == agg.Attribute))"
                          IsDate="@IsDate(agg)" IsNumeric="@IsNumeric(agg)"
                          Change="@(async args =>
                            {
                            agg.Method=args;
                            await ParamsChanged();
                            })" />;
}

<CipherComponentCard Title="@Title">
    <Buttons>
        <CipherAddBtn HelpText="@AddAggregateText" Click="@AddRow" ColorStyle="ButtonStyle.Success" ColorShade="Shade.Dark" Variant="Variant.Outlined" />
        <CipherDeleteAllButton HelpText="@DeleteAllAggregatesText" Click="@DeleteAggregation" ColorStyle="ButtonStyle.Danger" ColorShade="Shade.Default" Variant="Variant.Outlined" />
    </Buttons>

    <ChildContent>
        @if (!ChosenAggregates.Any())
        {
            <RadzenText Text="@HelpText" />
        }
        <RadzenDataGrid @ref="CustomDataGrid" Data="@ChosenAggregates" TItem="IAggregateItem" AllowColumnResize="true" Visible="@(ChosenAggregates.Count>0)">
            <Columns>
                <RadzenDataGridColumn Width="5%" TItem="IAggregateItem" Title="" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="agg">
                        <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteRow(agg))" @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="700px" MinWidth="700px" TItem="IAggregateItem" Property="@nameof(IAggregateItem.Attribute)"
                                      Title="@(GetLabel(nameof(IAggregateItem.Attribute)))" TextAlign="TextAlign.Center">
                    <Template Context="agg">
                        @AttributeFiller(agg)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="IAggregateItem" Property="@nameof(IAggregateItem.As)"
                                      Title="@(GetLabel(nameof(IAggregateItem.As)))" TextAlign="TextAlign.Center">
                    <Template Context="agg">
                        @AsFiller(agg)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="IAggregateItem" Property="@nameof(IAggregateItem.Method)"
                                      Title="@(GetLabel(nameof(IAggregateItem.Method)))" TextAlign="TextAlign.Center">
                    <Template Context="agg">
                        @MethodFiller(agg)
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <RadzenAlert Visible="@typeIncompatibleAlertVisible" Text="@TypeIncompatible" AlertStyle="AlertStyle.Danger"
                     Style="width:98%; padding:5px; margin: 1rem 5px" Close="@CloseAlert" />
    </ChildContent>
</CipherComponentCard>