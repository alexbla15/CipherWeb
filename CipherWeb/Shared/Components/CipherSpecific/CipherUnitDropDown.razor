 @inherits CipherFormRow

<CipherFormRow Icon="@Icon">
    <RadzenDropDownDataGrid Placeholder="@Label" SearchTextPlaceholder="חיפוש..." TValue="IUnit" Disabled="@Disabled" AllowClear="true"
                            Data=@OptionalUnits TextProperty="@(nameof(IUnit.Name))" @bind-Value="ChosenUnit"
                            AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Style="@($"width: {Width}")"
                            Change="@Change" AllowSorting=false>
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(IUnit.Name))" Title="@(new Unit().Translate(nameof(IUnit.Name)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IUnit.Description))" Title="@(new Unit().Translate(nameof(IUnit.Description)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IUnit.Parent))" Title="@(new Unit().Translate(nameof(IUnit.Parent)))">
                <Template>
                    @((context as Unit).Parent?.Name)
                </Template>
            </RadzenDropDownDataGridColumn>
        </Columns>
        <ValueTemplate>
            <b>@Label:</b> @((context as Unit).Name)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</CipherFormRow>

@code {
    /// <summary>
    /// Is the drop down disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// All units optional in the drop down.
    /// </summary>
    [Parameter]
    public List<IUnit> OptionalUnits { get; set; } = new();

    /// <summary>
    /// Error response for data fetching
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Chosen unit
    /// </summary>
    [Parameter]
    public IUnit? ChosenUnit { get; set; }

    /// <summary>
    /// Changed-value event
    /// </summary>
    [Parameter]
    public EventCallback<object> Change { get; set; }

    protected override void OnInitialized()
    {
        Label ??= "יחידה";
        Icon ??= Icons.Cipher.Unit;
        Width ??= "300px";

        (OptionalUnits, Error) = CachedData.AllUnits;
    }
} 