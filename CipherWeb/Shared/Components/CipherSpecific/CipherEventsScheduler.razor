@inherits CipherComponentCard

@inject ICipherInfo _db
@inject DialogService DialogService

<CipherComponentCard Title="גאנט תהליכים" MaxWidth="@MaxWidth" Width="@Width" MarginBottom="@MarginBottom">
    <HeaderContent>
        <CipherLocation WithIcon="false" Label="בחירת מיקום / תחום / מבנה" Change="SearchFunc" />
    </HeaderContent>
    <Buttons>
        <CipherButton Icon="@Icons.UiComponents.Table.TableView" HelpText="@TableViewText"
                      Variant="Variant.Outlined" ColorShade="Shade.Darker" Click="@TableView" />
        <CipherButton Icon="@Icons.Time.CalendarToday" HelpText="@CalendarViewText" Variant="Variant.Outlined"
                      Click="@CalendarView" />
        <CipherExcelButton FileName="@FileName" Data="@procs" />
        <CipherPDFButton />
    </Buttons>
    <ChildContent>
        @if (SetView == View.Table)
        {
            <CipherEventsTable Title="" AllowFilter="false" AllowGroup="false" WithCard="false" WithButtons="false"
                               WithHeaderContent="false" Events="@events" />
        }
        else
        {
            <CipherScheduler Height="@EventsHeight" SelectedSystem="@SelectedSystem" Processes="@procs" />
        }
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Error result of events fetching.
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Display role of Cipher. Must be a Role-enum.
    /// </summary>
    [Parameter]
    public Role SetRole { get; set; } = Role.Manager;

    /// <summary>
    /// initial view of the scheduler (upon entry). Must be a View-enum.
    /// </summary>
    [Parameter]
    public View SetView { get; set; } = View.Calendar;

    /// <summary>
    /// Scheduler events height
    /// </summary>
    [Parameter]
    public string EventsHeight { get; set; } = "600px";

    /// <summary>
    /// View as table - text.
    /// </summary>
    [Parameter]
    public string TableViewText { get; set; } = "הצגה כטבלה";

    /// <summary>
    /// View as table - text.
    /// </summary>
    [Parameter]
    public string CalendarViewText { get; set; } = "הצגה כלוח שנה";

    /// <summary>
    /// File name for exporting as EXCEL.
    /// </summary>
    [Parameter]
    public string FileName { get; set; } = "events";

    /// <summary>
    /// System name for data fetching events
    /// </summary>
    [Parameter]
    public string SelectedSystem { get; set; } = "S1";

    private List<Event>? events = new List<Event>();
    private List<Process>? procs = new List<Process>();

    public enum View
    {
        Calendar,
        Table
    }

    public enum Role
    {
        Manager,
        Engineer,
        Admin,
        Authorizer
    }

    protected override async Task OnInitializedAsync()
    {
        if (SetRole == Role.Manager)
        {
            SetView = View.Calendar;
        }
        else
        {
            SetView = View.Table;
        }

        (events, error) = Event.EventsOfSystem(SelectedSystem);
        procs = TestedData.Processes;
    }

    private void TableView()
    {
        SetView = View.Table;
    }

    private void CalendarView()
    {
        SetView = View.Calendar;
    }

    /// <summary>
    /// Function taking place upon clicking Enter.s
    /// </summary>
    private async Task SearchFunc()
    {
        (events, error) = Event.EventsOfSystem(SelectedSystem);
    }

    async Task ShowError()
    {
        await DialogService.OpenAsync("שגיאת מערכת",

    ds =>
    @<CipherErrorCard ErrorType="@error.Message" ErroredAction="@SelectedSystem" Visible=@(error != ErrorResponse.Success) MarginTop="10px" MarginBottom="10px" />
  
,
        new DialogOptions() { Width = "800px", Height = "250px", Resizable = true, Draggable = true });
    }
}