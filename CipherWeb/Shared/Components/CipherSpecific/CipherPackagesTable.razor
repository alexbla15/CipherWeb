@inherits CipherTableCard

@inject DialogService DialogService

<CipherTableCard Title="@Title" MaxWidth="@MaxWidth" Width="@Width" DataSource="@packages" WithCard="@WithCard" WithButtons="@WithButtons"
                 Sharable="@Sharable" IsReport="@IsReport"
                 FileTitle="@FileTitle" ExcelExport=@ExcelExport PDFExport=@PDFExport ExpandPath="@ExpandPath" Height="@Height" MarginBottom="@MarginBottom">
    <AdditionalButtons>
        <CipherNavButton Icon="@Icons.Symbols.Plus.AddCircleOutline" Path="@CipherNavLinks.AddPackage.Href" HelpText="הוספת תעודה" Variant="Variant.Outlined" />
    </AdditionalButtons>
    <HeaderContent>
        @if (WithHeaderContent)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">
                <CipherLocation WithIcon=false Label="בחירת מיקום / תחום / מבנה" Change="SearchFunc" />
            </RadzenStack>
        }
    </HeaderContent>
    <ComponentContent>
        <CipherDataGrid Cipher_TItem="Package" DataSource="@packages" RowsPerPage="@RowsPerPage"
                        GridFilterMode="@GridFilterMode" AllowFilter="@AllowFilter" AllowGroup="@AllowGroup"
                        WithTotalFooter="@AllowTotalFooter" WithCustomColumns="true">
            <CustomColumns>
                <RadzenDataGridColumn TItem="Package" Property="@(nameof(CachedData.PackageExample.Id))" Title="@(Package.Translate(nameof(CachedData.PackageExample.Id)))">
                    <FooterTemplate>
                        סה"כ תעודות: <b>@packages.Count() </b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@(nameof(CachedData.PackageExample.Category))" Title="@(Package.Translate(nameof(CachedData.PackageExample.Category)))">
                    <Template>
                        @context.Category.Name
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@nameof(CachedData.PackageExample.Vessel)" Title="@(Package.Translate(nameof(CachedData.PackageExample.Vessel)))">
                    <Template>
                        @context.Vessel?.Id
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@nameof(CachedData.PackageExample.System)" Title="@(Package.Translate(nameof(CachedData.PackageExample.System)))">
                    <Template>
                        @context.System.Id
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@nameof(CachedData.PackageExample.BrutMass)" Title="@(Package.Translate(nameof(CachedData.PackageExample.BrutMass)))">
                    <FooterTemplate>
                        @if (packages != null)
                        {
                            <b>@string.Format("{0:0.00;0.00-}", packages.Sum(s => (decimal?)s.GetType().GetProperty(nameof(CachedData.PackageExample.BrutMass))?.GetValue(s)))</b>
                        }
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@nameof(CachedData.PackageExample.NetMass)" Title="@(Package.Translate(nameof(CachedData.PackageExample.NetMass)))">

                    <FooterTemplate>
                        @if (packages != null)
                        {
                            <b>@string.Format("{0:0.00;0.00-}", packages.Sum(s => (decimal?)s.GetType().GetProperty(nameof(CachedData.PackageExample.NetMass))?.GetValue(s)))</b>
                        }
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@nameof(CachedData.PackageExample.Parent)" Title="@(Package.Translate(nameof(CachedData.PackageExample.Parent)))">
                    <Template>
                        @context.Parent?.Id
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@nameof(CachedData.PackageExample.Children)" Title="@(Package.Translate(nameof(CachedData.PackageExample.Children)))">
                    <Template>
                        @if (context.Children != null)
                        {
                            @string.Join(", ", context.Children.Select(x => x.Id));
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="@(nameof(CachedData.PackageExample.CreatedAt))" Title="@(Package.Translate(nameof(CachedData.PackageExample.CreatedAt)))" />
                <RadzenDataGridColumn TItem="Package" Property="@(nameof(CachedData.PackageExample.Description))" Title="@(Package.Translate(nameof(CachedData.PackageExample.Description)))" />
            </CustomColumns>
        </CipherDataGrid>
    </ComponentContent>
</CipherTableCard>

@code {
    /// <summary>
    /// Error result of events fetching.
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Filter mode of data grid. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode GridFilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Is datagrid filterable
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; }

    /// <summary>
    /// Is datagrid groupable.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; }

    /// <summary>
    /// Is total footer of decimal values (such as sum of mass) allowed.
    /// </summary>
    [Parameter]
    public bool AllowTotalFooter { get; set; } = true;

    /// <summary>
    /// Is a CipherAutoComplete header is needed.
    /// </summary>
    [Parameter]
    public bool WithHeaderContent { get; set; } = true;

    /// <summary>
    /// Max amount of rows per page of datagrid.
    /// </summary>
    [Parameter]
    public int RowsPerPage { get; set; } = 12;

    /// <summary>
    /// System name for data fetching events
    /// </summary>
    [Parameter]
    public string SelectedSystem { get; set; } = "S1";

    /// <summary>
    /// All packages available
    /// </summary>
    [Parameter]
    public List<Package> packages { get; set; } = new List<Package>();

    protected override void OnInitialized()
    {
        Title ??= "דוח תעודות";
        FileTitle ??= "packages";

        SearchFunc();
    }

    /// <summary>
    /// Function taking place upon clicking Enter.s
    /// </summary>
    private void SearchFunc()
    {
        (packages, error) = StorageSystem.Packages(SelectedSystem);
    }

    async Task ShowError()
    {
        await DialogService.OpenAsync("שגיאת מערכת",
        ds =>
    @<CipherErrorCard ErrorType="@error.Message" ErroredAction="@SelectedSystem" Visible=@(error != ErrorResponse.Success) MarginTop="10px" MarginBottom="10px" />
        , new DialogOptions() { Width = "800px", Height = "250px", Resizable = true, Draggable = true });
    }
}