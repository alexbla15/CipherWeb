@using System.Reflection

@typeparam Cipher_TItem

@inject ICipherInfo _db

@inherits CipherComponentCard

@code {
    /// <summary>
    /// Data source for both the datagrid, and the datafilter
    /// </summary>
    [Parameter]
    public IEnumerable<Cipher_TItem> GeneralDataSource { get; set; } = new List<Cipher_TItem>();

    /// <summary>
    /// List of all the available filter fields. Every field is a tuple of (enlish name, hebrew name)
    /// </summary>
    [Parameter]
    public List<Tuple<string, string>> FilterFields { get; set; } = CommonFuncs.GetTranslatedFields(typeof(Cipher_TItem));

    /// <summary>
    /// Customized datagrid
    /// </summary>
    [Parameter]
    public RenderFragment CustomDataGrid { get; set; }

    /// <summary>
    /// Set if the component utilizes a customized datagrid, rather than using the suggested default.
    /// </summary>
    [Parameter]
    public bool WithCustomDataGrid { get; set; } = false;

    /// <summary>
    /// Gap between datafilter and datagrid.
    /// </summary>
    [Parameter]
    public string GridFilterGap { get; set; } = "20px";

    private CipherDataFilter<Cipher_TItem> dataFilter = new CipherDataFilter<Cipher_TItem>();
    private CipherDataGrid<Cipher_TItem> rowsGrid = new CipherDataGrid<Cipher_TItem>();
    private IQueryable<Cipher_TItem> filteredRows;

    public void ViewChanged(IQueryable<Cipher_TItem> view)
    {
        filteredRows = view;
    }
}

<CipherComponentCard Title="@Title">
    <Buttons>
        @Buttons
    </Buttons>
    <ChildContent>
        <CipherDataFilter @ref=dataFilter Data="@GeneralDataSource" FilterFields="@FilterFields" ViewChanged="@(EventCallback.Factory.Create<IQueryable<Cipher_TItem>>(this, ViewChanged))">
            <FilterProperties>
                @foreach (Tuple<string, string> field in FilterFields)
                {
                    <RadzenDataFilterProperty TItem="Cipher_TItem" Property="@field.Item1" Title="@field.Item2" />
                }
            </FilterProperties>
        </CipherDataFilter>

        <div style="@($"padding-top:{GridFilterGap}")">
            @if (WithCustomDataGrid)
            {
                @CustomDataGrid
            }
            else
            {
                <CipherDataGrid @ref=rowsGrid DataSource="@(filteredRows ?? GeneralDataSource)"></CipherDataGrid>
            }
        </div>
    </ChildContent>
</CipherComponentCard>
