@using System.IO

@inherits CipherTableCard

<CipherTableCard Title="@Title" DataSource="@ChosenProcessesDTOs" Variant="@Variant" WithCard="@WithCard" WithButtons="@WithButtons" Sharable="@Sharable" IsReport="@IsReport">
    <AdditionalButtons>
        <CipherAddProcessDefinitionBtn />
    </AdditionalButtons>
    <HeaderContent>
        @if (WithHeaderContent)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">
                <CipherLocation />
            </RadzenStack>
        }
    </HeaderContent>
    <ComponentContent>
        <CipherDataGrid Cipher_TItem="ProcessDTO" DataSource="@ChosenProcessesDTOs" ColumnNames="@(new Process().Headers())"
                        GridFilterMode="@FilterMode" AllowFilter="@AllowFilter" AllowGroup="@AllowGroup"/>
    </ComponentContent>
</CipherTableCard>

@code {
    /// <summary>
    /// Filter mode of the datagrid. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode FilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Is the datagrid filterable.
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; } = false;

    /// <summary>
    /// Is the datagrid groupable.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; } = false;

    /// <summary>
    /// Is a CipherAutoComplete header is needed.
    /// </summary>
    [Parameter]
    public bool WithHeaderContent { get; set; } = true;

    /// <summary>
    /// All events for scheduler
    /// </summary>
    [Parameter]
    public IEnumerable<Process> ChosenProcesses { get; set; } = new List<Process>();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private List<ProcessDTO> ChosenProcessesDTOs = new();

    protected override void OnInitialized()
    {
        Title ??= "דוח תהליכים";

        if (ChosenProcesses is null) (ChosenProcesses, Error) = CachedData.AllProcesses;
        ChosenProcessesDTOs = ChosenProcesses.Select(x => x.ToDTO()).ToList();
    }
}