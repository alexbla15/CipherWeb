@inherits CipherFormRow

<CipherFormRow Icon="@Icon">
    <RadzenDropDownDataGrid Placeholder="@Label" SearchTextPlaceholder="חיפוש..." TValue="ICategory" Disabled="@Disabled" AllowClear="true"
                            Data=@AvailableCategories TextProperty="@(nameof(ICategory.Name))" @bind-Value="ChosenCategory"
                            AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Style="@($"width: {Constants.StandartWidth}")"
                            Change="@Change" AllowSorting=false>
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(ICategory.Id))" Title="@(GetLabel(nameof(ICategory.Id)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(ICategory.Name))" Title="@(GetLabel(nameof(ICategory.Name)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(ICategory.MaterialType))" Title="@(GetLabel(nameof(ICategory.MaterialType)))">
                <Template>
                    @((context as ICategory)?.MaterialType?.Name)
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="@(nameof(ICategory.IdMask))" Title="@(GetLabel(nameof(ICategory.IdMask)))">
                <Template>
                    @if (context is ICategory cat && cat.IdMask != null)
                    {
                        @(string.Join(", ", cat.IdMask))
                    }
                </Template>
            </RadzenDropDownDataGridColumn>
        </Columns>
        <ValueTemplate>
            <b>@ICategory.Translate(nameof(ICategory.Name)):</b> @((context as ICategory)?.Name)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</CipherFormRow>

@code {
    /// <summary>
    /// Is the drop down disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// All categories optional in the drop down.
    /// </summary>
    [Parameter]
    public List<ICategory> AvailableCategories { get; set; } = new();

    /// <summary>
    /// Error response for data fetching
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Chosen category
    /// </summary>
    [Parameter]
    public ICategory? ChosenCategory { get; set; }

    /// <summary>
    /// Changed-value event
    /// </summary>
    [Parameter]
    public EventCallback<object> Change { get; set; }

    private string GetLabel(string property) => ICategory.Translate(property);

    protected override async Task OnInitializedAsync()
    {
        Label ??= "בחירת קטגוריה";
        Icon ??= Icons.Symbols.category;

        (AvailableCategories, error) = await CachedData.AllCategories;
    }
}