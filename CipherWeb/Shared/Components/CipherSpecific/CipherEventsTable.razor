@inherits CipherTableCard

<CipherTableCard Title="@Title" MaxWidth="@MaxWidth" Width="@Width" DataFetch="SetData" CipherType="typeof(Event)" WithCard="@WithCard" WithButtons="@WithButtons"
                 Sharable="@Sharable" IsReport="@IsReport"
                 FileTitle="@FileTitle" ExcelExport=@ExcelExport PDFExport=@PDFExport ExpandPath="@ExpandPath" Height="@Height" MarginBottom="@MarginBottom">
    <HeaderContent>
        @if (WithHeaderContent)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">
                <CipherLocation WithIcon=false Label="בחירת מערכת" Change="SearchFunc" @ref=ChosenSystem/>
            </RadzenStack>
        }
    </HeaderContent>
    <ComponentContent>
        <CipherDataGrid @ref=DataGrid Cipher_TItem="EventDTO" DataSource="@_ChosenObjectsDTOs" ColumnNames="@(new Event().Headers())"
                        GridFilterMode="@FilterMode" AllowFilter="@AllowFilter" AllowGroup="@AllowGroup"/>
    </ComponentContent>
</CipherTableCard>

@code {
    private IEnumerable<Event> _ChosenObjects = new List<Event>();
    private List<EventDTO> _ChosenObjectsDTOs = new();

    /// <summary>
    /// Filter mode of the datagrid. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode FilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Is the datagrid filterable.
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; } = false;

    /// <summary>
    /// Is the datagrid groupable.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; } = false;

    /// <summary>
    /// Is a CipherAutoComplete header is needed.
    /// </summary>
    [Parameter]
    public bool WithHeaderContent { get; set; } = true;

    /// <summary>
    /// All events for scheduler
    /// </summary>
    [Parameter]
    public IEnumerable<Event> ChosenObjects
    {
        get => _ChosenObjects;
        set { _ChosenObjects = value; _ChosenObjectsDTOs = value.Select(x => x.ToDTO()).ToList(); }
    }

    /// <summary>
    /// Error response of fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private List<EventDTO> ChosenEventsDTOs = new();

    private CipherLocation ChosenSystem = new();

    private CipherDataGrid<EventDTO> DataGrid = new();

    public IEnumerable<IDictionary<string, object>> SetData() => DataGrid.GetPagedData();

    protected override void OnInitialized()
    {
        Title ??= "דוח תנועות";

        if (ChosenObjects is null) SearchFunc();
        SetFileName();
    }

    /// <summary>
    /// Function taking place upon clicking Enter.
    /// </summary>
    private void SearchFunc()
    {
        if (ChosenSystem.ChosenSystem is null)
        {
            ChosenObjects = new List<Event>();
        }
        else
        {
            (ChosenObjects, Error) = ChosenSystem.ChosenSystem.Events();
        }
        SetFileName();
    }

    public void SetFileName() => FileTitle = ChosenSystem.ChosenSystem is null ? "events" : $"events_{ChosenSystem.ChosenSystem?.Id}";
}