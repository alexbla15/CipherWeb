@inherits CipherTableCard

<CipherTableCard Title="@Title" MaxWidth="@MaxWidth" Width="@Width" DataSource="@Events" WithCard="@WithCard" WithButtons="@WithButtons"
                 Sharable="@Sharable" IsReport="@IsReport"
                 FileTitle="@FileTitle" ExcelExport=@ExcelExport PDFExport=@PDFExport ExpandPath="@ExpandPath" Height="@Height" MarginBottom="@MarginBottom">
    <AdditionalButtons>
        <CipherNavButton Icon="@Icons.Symbols.Plus.AddCircleOutline" Path="@CipherNavLinks.AddPackage.Href" HelpText="הוספת תעודה" Variant="Variant.Outlined" />
    </AdditionalButtons>
    <HeaderContent>
        @if (WithHeaderContent)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">
                <CipherLocation WithIcon=false Label="בחירת מערכת" Change="SearchFunc" @ref=ChosenSystem/>
            </RadzenStack>
        }
    </HeaderContent>
    <ComponentContent>
        <CipherDataGrid Cipher_TItem="Event" DataSource="@Events" WithCustomColumns="true"
                        GridFilterMode="@FilterMode" AllowFilter="@AllowFilter" AllowGroup="@AllowGroup">
            <CustomColumns>
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.Id))" Title="@(Event.Translate(nameof(Event.Id)))">
                    <FooterTemplate>
                        <b>@($"כמות: {Events.Count()}")</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.EventType))" Title="@(Event.Translate(nameof(Event.EventType)))" />
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.ProcessId))" Title="@(Event.Translate(nameof(Event.ProcessId)))" />
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.Timestamp))" Title="@(Event.Translate(nameof(Event.Timestamp)))" />
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.Packages))" Title="@(Event.Translate(nameof(Event.Packages)))">
                    <Template>
                        @(string.Join(", ", context.Packages.Select(x => x.Id)))
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.Comments))" Title="@(Event.Translate(nameof(Event.Comments)))" />
                <RadzenDataGridColumn TItem="Event" Property="@(nameof(Event.Status))" Title="@(Event.Translate(nameof(Event.Status)))">
                    <Template>
                        @((context.Status == 0) ? "מאומתת" : "לא מאומתת")
                    </Template>
                </RadzenDataGridColumn>
            </CustomColumns>
        </CipherDataGrid>
    </ComponentContent>
</CipherTableCard>

@code {
    /// <summary>
    /// Filter mode of the datagrid. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode FilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Is the datagrid filterable.
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; } = false;

    /// <summary>
    /// Is the datagrid groupable.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; } = false;

    /// <summary>
    /// Is a CipherAutoComplete header is needed.
    /// </summary>
    [Parameter]
    public bool WithHeaderContent { get; set; } = true;

    /// <summary>
    /// All events for scheduler
    /// </summary>
    [Parameter]
    public IEnumerable<Event> Events { get; set; } = new List<Event>();

    /// <summary>
    /// Error response of fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    private CipherLocation ChosenSystem = new();

    protected override void OnInitialized()
    {
        Title ??= "דוח תנועות";

        if (Events is null)
        {
            SearchFunc();
        }
    }

    /// <summary>
    /// Function taking place upon clicking Enter.
    /// </summary>
    private void SearchFunc()
    {
        if (ChosenSystem.ChosenSystem is null)
        {
            Events = new List<Event>();
        }
        else
        {
            (Events, error) = ChosenSystem.ChosenSystem.Events();
        }
    }
}