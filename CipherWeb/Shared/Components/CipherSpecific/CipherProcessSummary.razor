@inject ICipherInfo _db

<CipherFormCard MaxWidth="@MaxWidth" Width="@Width">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <CipherText Text="@SummaryTitle" TextAlign="TextAlign.Right" TextStyle="TextStyle.H5" />
        <CipherButton Icon="@Icons.UiComponents.Layout.CalendarViewDay" HelpText="@DayViewText" Size="@ButtonsSize" Variant="@DayVariant"
                      ColorShade="Shade.Darker" Click="@DayView" />
        <CipherButton Icon="@Icons.UiComponents.Table.CalendarViewMonth" HelpText="@MonthViewText" Size="@ButtonsSize" Variant="@MonthVariant"
                      ColorShade="Shade.Darker" Click="@MonthView" />
        <CipherButton Icon="@Icons.Cipher.Year" HelpText="@YearViewText" Size="@ButtonsSize" Variant="@YearVariant"
                      ColorShade="Shade.Darker" Click="@YearView" />
    </RadzenStack>

    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
            @foreach (string key in CountProcesses().Keys)
            {
                <CipherFormCard Height="80px" Width="150px" Variant="Variant.Text">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <CipherButton Size="ButtonSize.Large" Width="50px" Icon="@Icons.Cipher.Material" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Primary"></CipherButton>
                        <RadzenStack Gap="0">
                            <CipherText TextAlign="TextAlign.Right" TextColor="@Colors.PrimaryDark" Text="@CountProcesses()[key].ToString()" />
                            <CipherText Wrap="true" TextStyle="TextStyle.Overline" StyleClass="TextStyle.Overline" Text="@key" TextAlign="TextAlign.Right" />
                        </RadzenStack>
                    </RadzenStack>
                </CipherFormCard>
            }
        </RadzenStack>
    </RadzenRow>
</CipherFormCard>

@code {
    /// <summary>
    /// Size of buttons next to data-view.
    /// </summary>
    [Parameter]
    public ButtonSize ButtonsSize { get; set; } = ButtonSize.Medium;

    [Parameter]
    public string Width { get; set; } = "500px";

    [Parameter]
    public string MaxWidth { get; set; } = "1200px";

    /// <summary>
    /// Show day view.
    /// </summary>
    [Parameter]
    public string DayViewText { get; set; } = "תצוגה יומית";

    /// <summary>
    /// Show month view.
    /// </summary>
    [Parameter]
    public string MonthViewText { get; set; } = "תצוגה חודשית";

    /// <summary>
    /// Show year view.
    /// </summary>
    [Parameter]
    public string YearViewText { get; set; } = "תצוגה שנתית";

    /// <summary>
    /// initial view of the scheduler (upon entry)
    /// </summary>
    [Parameter]
    public string View { get; set; } = "month";

    private string? SummaryTitle;

    private Variant DayVariant;
    private Variant MonthVariant;
    private Variant YearVariant;

    List<Event> events = new();

    protected override async Task OnInitializedAsync()
    {
        events = await _db.GetEvents();
        MonthView();
    }

    private Dictionary<string, int> CountProcesses()
    {
        Dictionary<string, int> ProcessCounter = new Dictionary<string, int>();

        foreach (Event ev in events)
        {
            if (AddProcess(ev))
            {
                if (ProcessCounter.ContainsKey(ev.ProcessId.ToString()))
                {
                    ProcessCounter[ev.ProcessId.ToString()] += 1;
                }
                else
                {
                    ProcessCounter[ev.ProcessId.ToString()] = 1;
                }
            }
        }
        return ProcessCounter;
    }

    private bool AddProcess(Event ev)
    {
        return View switch
        {
            "day" => ev.Timestamp.Date == DateTime.Today,
            "month" => ev.Timestamp.Month == DateTime.Today.Month && ev.Timestamp.Year == DateTime.Today.Year,
            "year" => ev.Timestamp.Year == DateTime.Today.Year,
            _ => false
        };
    }

    private void DayView()
    {
        View = "day";
        SummaryTitle = "סיכום תהליכים יומי";

        DayVariant = Variant.Filled;
        MonthVariant = Variant.Outlined;
        YearVariant = Variant.Outlined;
    }

    private void MonthView()
    {
        View = "month";
        SummaryTitle = "סיכום תהליכים חודשי";

        DayVariant = Variant.Outlined;
        MonthVariant = Variant.Filled;
        YearVariant = Variant.Outlined;
    }

    private void YearView()
    {
        View = "year";
        SummaryTitle = "סיכום תהליכים שנתי";

        DayVariant = Variant.Outlined;
        MonthVariant = Variant.Outlined;
        YearVariant = Variant.Filled;
    }
}