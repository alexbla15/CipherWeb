@inherits CipherFormRow

@inject ICipherInfo _db

<CipherFormRow Icon="@Icons.Cipher.Vessel">
    <RadzenDropDownDataGrid Data=@AllVessels TextProperty="@(nameof(IVessel.Id))" AllowClear="true"
                            Placeholder="@Label" SearchTextPlaceholder="חיפוש..." @bind-Value="@ChosenVessel" Change="@Change" AllowSorting=false
                            AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Style="@($"width: {Constants.StandardWidth}")" Disabled="@Disabled">
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(IVessel.Id))" Title="@(IVessel.Translate(nameof(IVessel.Id)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IVessel.Name))" Title="@(IVessel.Translate(nameof(IVessel.Name)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IVessel.Type))" Title="@(IVessel.Translate(nameof(IVessel.Type)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IVessel.System))" Title="@(IVessel.Translate(nameof(IVessel.System)))">
                <Template>
                    @((context as IVessel)?.System?.Name)
                </Template>
                </RadzenDropDownDataGridColumn>
        </Columns>
        <ValueTemplate>
            <b>שם הכלי:</b> @((context as IVessel)?.Name)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</CipherFormRow>

@code {
    /// <summary>
    /// Is the drop down disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// All vessels available
    /// </summary>
    [Parameter]
    public IVessel? ChosenVessel { get; set; }

    /// <summary>
    /// All vessels available
    /// </summary>
    [Parameter]
    public List<IVessel> AllVessels { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Change-value event
    /// </summary>
    [Parameter]
    public EventCallback<object> Change { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Label ??= IVessel.Translate(nameof(IVessel.Name));
        Icon ??= Icons.Cipher.Vessel;

        if (AllVessels.Count == 0) (AllVessels, Error) = await CachedData.AllVessels;
    }
}