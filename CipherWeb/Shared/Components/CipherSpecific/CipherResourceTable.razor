@inherits CipherTableCard

@typeparam Cipher_TItem

<CipherTableCard Title="@Title" MaxWidth="@MaxWidth" Width="@Width" WithCard="@WithCard" WithButtons="@WithButtons"
                 Sharable="@Sharable" Variant="@Variant" IsReport="@IsReport" GetDataSource="@(() => DisplayedObject.ToListDicts(ChosenObjects))"
                 FileTitle="@FileTitle" ExcelExport=@ExcelExport PDFExport=@PDFExport ExpandPath="@ExpandPath" Height="@Height" MarginBottom="@MarginBottom">
    <HeaderContent>
        @if (WithHeaderContent)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">
                <CipherLocation WithIcon=false Label="בחירת מערכת" Change="SearchFunc" @ref=ChosenSystem/>
            </RadzenStack>
        }
    </HeaderContent>
    <ComponentContent>
        @if (ChosenSystem.ChosenSystem != null && !ChosenObjects.Any())
        {
            <CipherLoadingCard/>
        }
        else
        {
            <CipherDataTable @ref=DataGrid DataSource="@DisplayedObject.ListObjects(ChosenObjects)" SelectedColumns="@SelectedColumns"
                         GridFilterMode="@GridFilterMode" AllowFilter="@AllowFilter" AllowGroup="@AllowGroup" />
        }
    </ComponentContent>
</CipherTableCard>

@code {
    private CipherLocation ChosenSystem = new();

    /// <summary>
    /// Filter mode of data grid. Must be a FilterMode-enum.
    /// </summary>
    [Parameter]
    public FilterMode GridFilterMode { get; set; } = FilterMode.SimpleWithMenu;

    /// <summary>
    /// Is the datagrid filterable.
    /// </summary>
    [Parameter]
    public bool AllowFilter { get; set; } = false;

    /// <summary>
    /// Is the datagrid groupable.
    /// </summary>
    [Parameter]
    public bool AllowGroup { get; set; } = false;

    /// <summary>
    /// Is a CipherAutoComplete header is needed.
    /// </summary>
    [Parameter]
    public bool WithHeaderContent { get; set; } = true;

    /// <summary>
    /// File name - title prefix (e.g. events_[id].csv).
    /// </summary>
    [Parameter]
    public string PrefixFileTitle { get; set; } = "exported_data";

    /// <summary>
    /// Columns that will be presented in the datatable
    /// </summary>
    [Parameter]
    public List<string>? SelectedColumns { get; set; }

    /// <summary>
    /// All events for scheduler
    /// </summary>
    [Parameter]
    public IEnumerable<Cipher_TItem> ChosenObjects { get; set; } = new List<Cipher_TItem>();

    /// <summary>
    /// Error response of fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    [Parameter]
    public CipherDataTable DataGrid { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (ChosenSystem.ChosenSystem != null) await SearchFunc();
        SetFileName();
    }

    /// <summary>
    /// Function taking place upon clicking Enter.
    /// </summary>
    private async Task SearchFunc()
    {
        if (ChosenSystem.ChosenSystem is null) ChosenObjects = new List<Cipher_TItem>();
        else (ChosenObjects, Error) = await GetSearchedValues();
        var res = DisplayedObject.ListObjects(ChosenObjects);
        SetFileName();
    }

    private async Task<Tuple<List<Cipher_TItem>, ErrorResponse>> GetConfigValues<T>(
        Task<Tuple<List<T>, ErrorResponse>> configFunc)
    {
        var result = await configFunc;
        return (Tuple<List<Cipher_TItem>, ErrorResponse>?)(object?)result ?? Tuple.Create(new List<Cipher_TItem>(), ErrorResponse.BadRequest);
    }

    private async Task<Tuple<List<Cipher_TItem>, ErrorResponse>> GetSearchedValues()
    {
        var badFetch = Tuple.Create(new List<Cipher_TItem>(), ErrorResponse.BadRequest);

        if (ChosenSystem.ChosenSystem == null)
        {
            return typeof(Cipher_TItem) switch
            {
                var type when type == typeof(IEvent) => await GetConfigValues(Config.Event(false).All()),
                var type when type == typeof(IProcess) => await GetConfigValues(Config.Process(false).All()),
                var type when type == typeof(IPackage) => await GetConfigValues(Config.Package(false).All()),
                var type when type == typeof(IVessel) => await GetConfigValues(Config.Vessel(false).All()),
                var type when type == typeof(IUnit) => await GetConfigValues(Config.Unit(false).All()),
                _ => badFetch
            };
        }

        // Fallback to fetching values directly if no system is selected
        return typeof(Cipher_TItem) switch
        {
            var type when type == typeof(IEvent) => await GetItemsAsync(() => ChosenSystem.ChosenSystem.Events()),
            var type when type == typeof(IProcess) => await GetItemsAsync(() => ChosenSystem.ChosenSystem.Processes()),
            var type when type == typeof(IPackage) => await GetItemsAsync(() => ChosenSystem.ChosenSystem.Packages()),
            var type when type == typeof(IVessel) => await GetItemsAsync(() => ChosenSystem.ChosenSystem.Vessels()),
            _ => badFetch
        };
    }

    private async Task<Tuple<List<Cipher_TItem>, ErrorResponse>> GetItemsAsync<T>(Func<Task<Tuple<List<T>, ErrorResponse>?>> fetchFunc)
    {
        var badFetch = Tuple.Create(new List<Cipher_TItem>(), ErrorResponse.BadRequest);
        var result = await fetchFunc();

        return result is null ? badFetch : (Tuple<List<Cipher_TItem>, ErrorResponse>?)(object?)result;
    }
    
    public void SetFileName() => FileTitle = ChosenSystem.ChosenSystem is null ? PrefixFileTitle : $"{PrefixFileTitle}_{ChosenSystem.ChosenSystem?.Id}";
}