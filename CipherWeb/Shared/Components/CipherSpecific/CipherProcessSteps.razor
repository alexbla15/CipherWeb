@inherits CipherComponentCard

@code {
    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "כאן ניתן להוסיף שלבים לתהליך זו. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת שלב";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת שלבים";

    /// <summary>
    /// All chosen category-properties
    /// </summary>
    [Parameter]
    public List<IProcessStepDefinition> ChosenSteps { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private RadzenDataGrid<IProcessStepDefinition> StepsDataGrid = new();
    private CipherBooleanConditions StepCondition = new();

    private IGroupedBooleanCondition SelectedCondition = Config.GroupedBooleanCondition();

    private string? SelectedStep;

    protected override void OnInitialized()
    {
        if (ChosenSteps == null) ChosenSteps = new();
    }

    private string GetLabel(string property) => IProcessStepDefinition.Translate(property);

    /// <summary>
    /// Add a step to the memory.
    /// </summary>
    async Task AddStep()
    {
        // Add the new restriction to the existing list
        ChosenSteps.Add(Config.ProcessStepDefinition());
        StateHasChanged();
        await StepsDataGrid.RefreshDataAsync();
        await ValueChanged.InvokeAsync();
    }

    /// <summary>
    /// Deletes a step from memory & view.
    /// </summary>
    /// <param name="step">Step to delete</param>
    async Task DeleteStep(IProcessStepDefinition step)
    {
        ChosenSteps.Remove(step);
        await StepsDataGrid.RefreshDataAsync();
        StateHasChanged();
        await ValueChanged.InvokeAsync();
    }

    /// <summary>
    /// Clears all steps from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAllSteps()
    {
        ChosenSteps.Clear();
        await StepsDataGrid.RefreshDataAsync();
        await ValueChanged.InvokeAsync();
    }

    public void OnSave()
    {
        if (SelectedStep != null)
        {
            var ChosenStep = ChosenSteps.Where(x => x.Name == SelectedStep).First();
            ChosenStep.Condition = SelectedCondition;
        }
    }

    public void RefreshSelectedStep()
    {
        StepCondition.Save();
        var ChosenStep = ChosenSteps.Where(x => x.Name == SelectedStep).First();
        SelectedCondition = ChosenStep?.Condition ?? Config.GroupedBooleanCondition();
        //await StepCondition.FillDataFilter();
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible" WithCard="false">
    <CipherComponentCard Title="הגדרת שלבים" Visible="@Visible" WithButtons="@(!Disabled)">
        <Buttons>
            <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddStep())" HelpText="@AddText" />
            <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" Variant="Variant.Outlined" Click="@(args => DeleteAllSteps())" HelpText="@DeleteAllText" />
        </Buttons>
        <ChildContent>
            @if (ChosenSteps == null || !ChosenSteps.Any())
            {
                <RadzenText Text="@HelpText"/>
            }
            <RadzenDataGrid @ref="StepsDataGrid" Data="@ChosenSteps" ValueChanged="@ValueChanged"
                            TItem="IProcessStepDefinition" AllowColumnResize="true" Visible="@(ChosenSteps != null && ChosenSteps.Any())">
                <Columns>
                    @if (!Disabled)
                    {
                        <RadzenDataGridColumn Width="10%" TItem="IProcessStepDefinition" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                            <Template Context="step">
                            <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteStep(step))" @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    }
                    <RadzenDataGridColumn Width="10%" TItem="IProcessStepDefinition" Title="@(GetLabel(nameof(IProcessStepDefinition.Id)))" TextAlign="@TdTextAlign">
                        <Template Context="step">
                            <CipherButton Text="@(ChosenSteps?.IndexOf(step).ToString())" Disabled="true" ColorStyle="@ButtonStyle.Primary"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="IProcessStepDefinition" Title="@(GetLabel(nameof(IProcessStepDefinition.Name)))" TextAlign="@TdTextAlign">
                        <Template Context="step">
                            <RadzenTextBox @bind-Value="@step.Name" Style="width: 100%" Change="@ValueChanged" Disabled="@Disabled"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="IProcessStepDefinition" Title="@(GetLabel(nameof(IProcessStepDefinition.Description)))" TextAlign="@TdTextAlign">
                        <Template Context="step">
                            <RadzenTextArea @bind-Value="@step.Description" Style="width: 100%" Change="@ValueChanged" Disabled="@Disabled" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </ChildContent>
    </CipherComponentCard>

    @if (ChosenSteps != null && ChosenSteps.Any())
    {
        <CipherComponentCard Title="אפיון שלבים">
            <HeaderContent>
                <RadzenDropDown Placeholder="בחירת שלב" TextProperty="Name" ValueProperty="Name" Data="@ChosenSteps" TValue="string" 
                @bind-Value="SelectedStep" Style="margin-bottom:10px" Change="@RefreshSelectedStep">
                    <ValueTemplate>
                        <b>שלב נבחר:</b> @context.Name
                    </ValueTemplate>
                </RadzenDropDown>
            </HeaderContent>
            <ChildContent>
                @if (SelectedStep != null)
                {
                    <CipherBooleanConditions ChosenConditionChanged="@ValueChanged" @ref="StepCondition" OnSave="@OnSave" ChosenCondition="@SelectedCondition" Disabled="@Disabled"/>
                }
            </ChildContent>
        </CipherComponentCard>
    }
</CipherComponentCard>