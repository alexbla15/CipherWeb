@inherits CipherComponentCard

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "כאן ניתן להוסיף שלבים לתהליך זו. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת שלב";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת שלבים";

    /// <summary>
    /// All chosen category-properties
    /// </summary>
    [Parameter]
    public List<ProcessStepDefinition> ChosenSteps { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    private RadzenDataGrid<ProcessStepDefinition> StepsDataGrid = new();
    private CipherBooleanConditions StepCondition = new();

    private GroupedBooleanCondition SelectedCondition = new();

    private string? SelectedStep;

    protected override void OnInitialized()
    {
        if (ChosenSteps == null) ChosenSteps = new();
    }

    /// <summary>
    /// Add a step to the memory.
    /// </summary>
    async Task AddStep()
    {
        // Add the new restriction to the existing list
        ChosenSteps.Add(new());
        StateHasChanged();
        await StepsDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Deletes a step from memory & view.
    /// </summary>
    /// <param name="step">Step to delete</param>
    async Task DeleteStep(ProcessStepDefinition step)
    {
        ChosenSteps.Remove(step);
        await StepsDataGrid.RefreshDataAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Clears all steps from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAllSteps()
    {
        ChosenSteps.Clear();
        await StepsDataGrid.RefreshDataAsync();
    }

    public void OnSave()
    {
        if (SelectedStep != null)
        {
            var ChosenStep = ChosenSteps.Where(x => x.Name == SelectedStep).First();
            ChosenStep.Condition = SelectedCondition;
        }
    }

    public async Task RefreshSelectedStep()
    {
        StepCondition.Save();
        var ChosenStep = ChosenSteps.Where(x => x.Name == SelectedStep).First();
        SelectedCondition = ChosenStep?.Condition ?? new();
        //await StepCondition.FillDataFilter();
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible" WithCard="false">
    <CipherComponentCard Title="הגדרת שלבים" Visible="@Visible">
        <Buttons>
            <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddStep())" HelpText="@AddText" />
            <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" Variant="Variant.Outlined" Click="@(args => DeleteAllSteps())" HelpText="@DeleteAllText" />
        </Buttons>
        <ChildContent>
            @if (ChosenSteps.Count() == 0)
            {
                <CipherText Text="@HelpText" />
            }
            <RadzenDataGrid @ref="StepsDataGrid" Data="@ChosenSteps" TItem="ProcessStepDefinition" AllowColumnResize="true" Visible="ChosenSteps.Count() != 0">
                <Columns>
                    <RadzenDataGridColumn Width="10%" TItem="ProcessStepDefinition" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                        <Template Context="step">
                            <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteStep(step))" @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProcessStepDefinition" Title="@(new ProcessStepDefinition().Translate(nameof(ProcessStepDefinition.Name)))" TextAlign="@TdTextAlign">
                        <Template Context="step">
                            <RadzenTextBox @bind-Value="@step.Name" Style="width: 100%" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProcessStepDefinition" Title="@(new ProcessStepDefinition().Translate(nameof(ProcessStepDefinition.Description)))" TextAlign="@TdTextAlign">
                        <Template Context="step">
                            <RadzenTextArea @bind-Value="@step.Description" Style="width: 100%" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </ChildContent>
    </CipherComponentCard>

    <CipherComponentCard Title="אפיון שלבים">
        <HeaderContent>
            <RadzenDropDown Placeholder="בחירת שלב" TextProperty="Name" ValueProperty="Name" Data="@ChosenSteps" TValue="string" 
            @bind-Value="SelectedStep" Style="margin-bottom:10px" Change="@RefreshSelectedStep">
                <ValueTemplate>
                    <b>שלב נבחר:</b> @context.Name
                </ValueTemplate>
            </RadzenDropDown>
        </HeaderContent>
        <ChildContent>
            @if (SelectedStep != null)
            {
                <CipherBooleanConditions Cipher_TItem="Event" @ref="StepCondition" OnSave="@OnSave" @bind-ChosenCondition="@SelectedCondition" />
            }
        </ChildContent>
    </CipherComponentCard>
</CipherComponentCard>