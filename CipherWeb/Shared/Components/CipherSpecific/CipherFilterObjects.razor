<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
    @if (WithFilter)
    {
        <CipherComponentCard Title="נא לבחור אובייקטים לתצוגה" Style="@Constants.Styles.ComponentResourceCardContent_Centered">
            <RadzenSelectBar @bind-Value="@_ChosenId" Multiple="false" TValue="int"
                             Change="@(async args => {ChosenCondition = Config.GroupedBooleanCondition() ; await ParamsChanged();})">
                <Items>
                    @foreach (string objType in objectTypes)
                    {
                        <RadzenSelectBarItem Text="@objType" Value="@objectTypes.IndexOf(objType)" />
                    }
                </Items>
            </RadzenSelectBar>
        </CipherComponentCard>
        <CipherBooleanConditions @ref="DataFilter" ChosenCondition="@ChosenCondition" OnSave="@SetCondition"
                                 InitialType="@GetReportType()" ChosenConditionChanged="@ParamsChanged" />
    }
    @if (RenderedTable != null)
    {
        @RenderedTable
    }
    else
    {
        <CipherLoadingCard />
    }
</RadzenStack>

@code {
    private Type _ChosenType = typeof(IPackage);
    private int _ChosenId = 0;

    private RenderFragment? RenderedTable { get; set; }

    [Parameter]
    public Type ChosenType { get => _ChosenType; set { _ChosenType = value; SetType(); } }

    [Parameter]
    public List<string> objectTypes { get; set; } = new() {
        Translator.GetTranslation("Packages"),
        Translator.GetTranslation("Vessels"),
        Translator.GetTranslation("StorageSystems"),
        Translator.GetTranslation("Events"),
        Translator.GetTranslation("Processes"),
        Translator.GetTranslation("Categories"),
        Translator.GetTranslation("Units"),
                };

    [Parameter]
    public bool WithFilter { get; set; } = true;

    /// <summary>
    /// Controls visibility of buttons within the datagridtable component
    /// </summary>
    [Parameter]
    public bool WithButtons { get; set; } = true;

    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    [Parameter]
    public IGroupedBooleanCondition ChosenCondition { get; set; } = Config.GroupedBooleanCondition();

    [Parameter]
    public EventCallback<Tuple<IGroupedBooleanCondition, Type>> ChosenConditionChanged { get; set; }

    private CipherBooleanConditions DataFilter = new();

    private List<IPackage>? Packages;
    private List<IVessel>? Vessels;
    private List<IStorageSystem>? Systems;
    private List<IEvent>? Events;
    private List<IProcess>? Processes;
    private List<ICategory>? Categories;
    private List<IUnit>? Units;

    protected override async Task OnInitializedAsync() => await UpdateRenderedTable();

    private async Task UpdateRenderedTable() => RenderedTable = await RenderCipherDataTable();

    public int GetTypeId(Type t)
    => t switch
    {
        _ when t == typeof(IPackage) => 0,
        _ when t == typeof(IVessel) => 1,
        _ when t == typeof(IStorageSystem) => 2,
        _ when t == typeof(IEvent) => 3,
        _ when t == typeof(IProcess) => 4,
        _ when t == typeof(ICategory) => 5,
        _ when t == typeof(IUnit) => 6,
        _ => 0
    };

    public void SetType() => _ChosenId = GetTypeId(ChosenType);

    public Type GetReportType() => _ChosenId switch
    {
        0 => typeof(IPackage),
        1 => typeof(IVessel),
        2 => typeof(IStorageSystem),
        3 => typeof(IEvent),
        4 => typeof(IProcess),
        5 => typeof(ICategory),
        6 => typeof(IUnit),
        _ => typeof(ICipherClass)
    };

    public async Task PreloadDataAsync()
    {
        Packages = await GetFilteredObjects<IPackage>();
        Vessels = await GetFilteredObjects<IVessel>();
        Systems = await GetFilteredObjects<IStorageSystem>();
        Events = await GetFilteredObjects<IEvent>();
        Processes = await GetFilteredObjects<IProcess>();
        Categories = await GetFilteredObjects<ICategory>();
        Units = await GetFilteredObjects<IUnit>();
    }

    public async Task<RenderFragment?> RenderCipherDataTable(int id)
    {
        await PreloadDataAsync();

        // Define the RenderFragment based on the id
        return id switch
        {
            0 => builder =>
            {
                builder.OpenComponent<CipherPackagesTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Packages);
                builder.AddAttribute(2, "WithButtons", WithButtons);
                builder.AddAttribute(3, "WithHeaderContent", false);
                builder.CloseComponent();
            }
            ,
            1 => builder =>
            {
                builder.OpenComponent<CipherVesselsTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Vessels);
                builder.AddAttribute(2, "WithHeaderContent", false);
                builder.CloseComponent();
            }
            ,
            2 => builder =>
            {
                builder.OpenComponent<CipherSystemsTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Systems);
                builder.CloseComponent();
            }
            ,
            3 => builder =>
            {
                builder.OpenComponent<CipherEventsTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Events);
                builder.AddAttribute(2, "WithHeaderContent", false);
                builder.CloseComponent();
            }
            ,
            4 => builder =>
            {
                builder.OpenComponent<CipherProcessesTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Processes);
                builder.AddAttribute(2, "WithHeaderContent", false);
                builder.CloseComponent();
            }
            ,
            5 => builder =>
            {
                builder.OpenComponent<CipherCategoriesTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Categories);
                builder.CloseComponent();
            }
            ,
            6 => builder =>
            {
                builder.OpenComponent<CipherUnitsTable>(0);
                builder.AddAttribute(1, "ChosenObjects", Units);
                builder.CloseComponent();
            }
            ,
            _ => builder =>
            {
                builder.AddContent(0, "לא נמצאה טבלה מתאימה.");
            }
        };
    }

    public async Task<RenderFragment?> RenderCipherDataTable(Type type)
    {
        int id = GetTypeId(type);
        return await RenderCipherDataTable(id);
    }

    public async Task<RenderFragment?> RenderCipherDataTable() => await RenderCipherDataTable(_ChosenId);

    public async Task<List<T>> GetFilteredObjects<T>() where T : IResource
    {
        List<T> objects = new();
        IObjectFactory obj = Config.ObjectFactory();
        obj.Filter = ChosenCondition;
        (objects, Error) = await Config.QueryRequests(false).QueryObjects<T>(obj);
        return objects;
    }

    /// <summary>
    /// Method to set the chosen condition accourding to DataFilter data
    /// </summary>
    public void SetCondition() => ChosenCondition = DataFilter.ChosenCondition;


    /// <summary>
    /// Events that occurs once something in the component changes.
    /// </summary>
    /// <returns></returns>
    async Task ParamsChanged()
    {
        await UpdateRenderedTable();

        Type oldChosenType = ChosenType;
        ChosenType = GetReportType();

        if (oldChosenType != ChosenType)
        {
            ChosenCondition = Config.GroupedBooleanCondition();
            await DataFilter.Clear();
        }
        await ChosenConditionChanged.InvokeAsync(Tuple.Create(ChosenCondition, ChosenType)); // Trigger change event
    }
}
