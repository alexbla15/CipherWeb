@inherits CipherComponentCard

@inject DialogService DialogService

<CipherComponentCard Title="גאנט תהליכים" MaxWidth="@MaxWidth" Width="@Width" MarginBottom="@MarginBottom">
    <HeaderContent>
        <CipherLocation @ref="cipherLocation" WithIcon="false" Label="בחירת מיקום / תחום / מבנה" Change="SearchFunc"/>
    </HeaderContent>
    <Buttons>
        <CipherButton Icon="@Icons.UiComponents.Table.table_view" HelpText="@TableViewText"
                      Variant="Variant.Outlined" ColorShade="Shade.Darker" Click="@TableView" />
        <CipherButton Icon="@Icons.Time.calendar_today" HelpText="@CalendarViewText" Variant="Variant.Outlined"
                      Click="@CalendarView" />
        <CipherAddProcessDefinitionBtn/>
        @ExportButtons()
    </Buttons>
    <ChildContent>
        @ProcessView()
    </ChildContent>
</CipherComponentCard>

@code {
    private bool RequestComplete = true;

    /// <summary>
    /// Error result of processes fetching.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Display role of Cipher. Must be a Role-enum.
    /// </summary>
    [Parameter]
    public Role SetRole { get; set; } = Role.Manager;

    /// <summary>
    /// initial view of the scheduler (upon entry). Must be a View-enum.
    /// </summary>
    [Parameter]
    public View SetView { get; set; } = View.Calendar;

    /// <summary>
    /// Scheduler process height
    /// </summary>
    [Parameter]
    public string ProcessHeight { get; set; } = "600px";

    /// <summary>
    /// View as table - text.
    /// </summary>
    [Parameter]
    public string TableViewText { get; set; } = "הצגה כטבלה";

    /// <summary>
    /// View as table - text.
    /// </summary>
    [Parameter]
    public string CalendarViewText { get; set; } = "הצגה כלוח שנה";

    /// <summary>
    /// File name for exporting as EXCEL.
    /// </summary>
    [Parameter]
    public string FileName { get; set; } = "processes";

    /// <summary>
    /// System name for data fetching events
    /// </summary>
    [Parameter]
    public string? SelectedSystem { get; set; }

    private CipherLocation cipherLocation = new();
    private List<IProcess>? ChosenProcesses = new();
    private CipherProcessesTable ProcTable = new();

    public enum View
    {
        Calendar,
        Table
    }

    public enum Role
    {
        Manager,
        Engineer,
        Admin,
        Authorizer
    }

    protected override async Task OnInitializedAsync()
    {
        SetView = (SetRole == Role.Manager) ? View.Calendar : View.Table;

        if (SelectedSystem != null)
        {
            var result = await Config.StorageSystem(false).Processes(SelectedSystem);
            (ChosenProcesses, Error) = Tuple.Create(result.Item1.Select(x => x as IProcess).ToList(), result.Item2);
        }
        else (ChosenProcesses, Error) = Tuple.Create(new List<IProcess>(), ErrorResponse.Success);

        SetFileName();
    }

    public void SetFileName() => FileName = $"processes_{SelectedSystem}";

    private void TableView() => SetView = View.Table;

    private void CalendarView() => SetView = View.Calendar;

    /// <summary>
    /// Function taking place upon clicking Enter.
    /// </summary>
    private async Task SearchFunc()
    {
        RequestComplete = false;

        SelectedSystem = (cipherLocation.ChosenSystem is null) ? null : cipherLocation.ChosenSystem.Name;
        if (SelectedSystem != null)
        {
            var result = await Config.StorageSystem(false).Processes(SelectedSystem);
            (ChosenProcesses, Error) = Tuple.Create(result.Item1.Select(x => x as IProcess).ToList(), result.Item2);
        }
        else
        {
            (ChosenProcesses, Error) = Tuple.Create(new List<IProcess>(), ErrorResponse.Success);
        }
        SetFileName();

        await Task.Delay(Constants.ForcedDelayTime);
        RequestComplete = true;
    }

    async Task ShowError()
    {
        await DialogService.OpenAsync("שגיאת מערכת",

        ds =>
    @<CipherErrorCard ErrorType="@Error.Message" ErroredAction="@SelectedSystem" Visible=@(Error != ErrorResponse.Success) MarginTop="10px" MarginBottom="10px" />

,
        new DialogOptions() { Width = "800px", Height = "250px", Resizable = true, Draggable = true });
    }

    private RenderFragment? ExportButtons()
    {
        @if (SetView == View.Table)
        {
            Func<IEnumerable<IDictionary<string, object?>>>? GetData = () => DisplayedObject.ToListDicts(ProcTable.ChosenObjects);

            return@<div>
        <CipherExcelButton FileName="@FileName" OnClickFunc="@GetData" Disabled="@(!ProcTable.ChosenObjects.Any())" />
        <CipherPDFButton FileName="@FileName" OnClickFunc="@GetData" Disabled="@(!ProcTable.ChosenObjects.Any())" />
            </div>;
        }
        // Exports buttons should be visible only when the table is shown
        return null;
    }

    private RenderFragment ProcessView()
    {
        if (!RequestComplete) return @<CipherLoadingCard />;
        if (SetView == View.Table) return
    @<CipherProcessesTable @ref=ProcTable Title="" AllowFilter="false" AllowGroup="false" WithCard="false" WithButtons="false"
        WithHeaderContent="false" ChosenObjects="@ChosenProcesses" /> ;
        else return @<CipherScheduler Height="@ProcessHeight" Processes="@ChosenProcesses" /> ;
    }
}