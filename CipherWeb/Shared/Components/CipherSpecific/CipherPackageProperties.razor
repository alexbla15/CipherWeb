@inherits CipherComponentCard

@code {
    /// <summary>
    /// Is component readonly?
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "כאן ניתן להוסיף תכונות לתעודה זו זו. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת תכונה";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת תכונות";

    /// <summary>
    /// All chosen category-properties
    /// </summary>
    [Parameter]
    public List<IPackageProperty> ChosenProperties { get; set; } = new();

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private RadzenDataGrid<IPackageProperty> CustomDataGrid = new();

    protected override void OnInitialized() => Title ??= "תכונות התעודה";

    /// <summary>
    /// Add a component to the memory.
    /// </summary>
    async Task AddComponent()
    {
        ChosenProperties.Add(Config.PackageProperty());
        StateHasChanged();
        await CustomDataGrid.RefreshDataAsync();
        await ChangeDetails.InvokeAsync();
    }

    /// <summary>
    /// Deletes a category-property from memory & view.
    /// </summary>
    /// <param name="prop">Property to delete</param>
    async Task DeleteRow(IPackageProperty prop)
    {
        ChosenProperties.Remove(prop);
        await CustomDataGrid.RefreshDataAsync();
        StateHasChanged();
        await ChangeDetails.InvokeAsync();
    }

    /// <summary>
    /// Clears all category-properties from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAll()
    {
        ChosenProperties.Clear();
        await CustomDataGrid.RefreshDataAsync();
        await ChangeDetails.InvokeAsync();
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible" WithButtons="@(!Disabled)">
    <Buttons>
        <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddComponent())" HelpText="@AddText" />
        <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" Variant="Variant.Outlined" Click="@(args => DeleteAll())" HelpText="@DeleteAllText" />
    </Buttons>
    <ChildContent>
        @if (!ChosenProperties.Any())
        {
            <RadzenText Text="@HelpText"/>
        }
        <RadzenDataGrid @ref="CustomDataGrid" Data="@ChosenProperties" TItem="IPackageProperty" 
            AllowColumnResize="true" Visible="ChosenProperties.Count() != 0" ValueChanged="@ChangeDetails">
            <Columns>
                @if (!Disabled)
                {
                    <RadzenDataGridColumn Width="10%" TItem="IPackageProperty" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                        <Template Context="prop">
                        <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteRow(prop))" @onclick:stopPropagation="true" />
                    </Template>
                    </RadzenDataGridColumn>
                }
                <RadzenDataGridColumn TItem="IPackageProperty" Title="@(IPackageProperty.Translate(nameof(IPackageProperty.Name)))" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        <RadzenTextBox @bind-Value="@prop.Name" Style="width:100%" Change="@ChangeDetails" Disabled="@Disabled"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="IPackageProperty" Title="@(IPackageProperty.Translate(nameof(IPackageProperty.Value)))" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        <RadzenTextArea @bind-Value="@prop.Value" Style="width:100%" Change="@ChangeDetails" Disabled="@Disabled" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </ChildContent>
</CipherComponentCard>