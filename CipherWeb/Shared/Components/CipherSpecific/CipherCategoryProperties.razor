@inherits CipherComponentCard

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "כאן ניתן להוסיף תכונות לקטגוריה זו. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת תכונה";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת תכונות";

    /// <summary>
    /// All chosen category-properties
    /// </summary>
    [Parameter]
    public List<CategoryProperty> ChosenProperties { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    private RadzenDataGrid<CategoryProperty> CustomDataGrid = new();

    protected override void OnInitialized() => Title ??= "תכונות הקטגוריה";

    /// <summary>
    /// Add a component to the memory.
    /// </summary>
    async Task AddComponent()
    {
        // Add the new restriction to the existing list
        ChosenProperties.Add(new CategoryProperty());
        StateHasChanged();
        await CustomDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Deletes a category-property from memory & view.
    /// </summary>
    /// <param name="prop">Property to delete</param>
    async Task DeleteRow(CategoryProperty prop)
    {
        ChosenProperties.Remove(prop);
        await CustomDataGrid.RefreshDataAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Clears all category-properties from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAll()
    {
        ChosenProperties.Clear();
        await CustomDataGrid.RefreshDataAsync();
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible">
    <Buttons>
        <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddComponent())" HelpText="@AddText" />
        <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" Variant="Variant.Outlined" Click="@(args => DeleteAll())" HelpText="@DeleteAllText" />
    </Buttons>
    <ChildContent>
        @if (ChosenProperties.Count() == 0)
        {
            <CipherText Text="@HelpText" />
        }
        <RadzenDataGrid @ref="CustomDataGrid" Data="@ChosenProperties" TItem="CategoryProperty" AllowColumnResize="true" Visible="ChosenProperties.Count() != 0">
            <Columns>
                <RadzenDataGridColumn Width="10%" TItem="CategoryProperty" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteRow(prop))" @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CategoryProperty" Title="@(new CategoryProperty().Translate(nameof(CategoryProperty.Name)))" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        <RadzenTextBox @bind-Value="prop.Name" Style="width:100%"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CategoryProperty" Title="@(new CategoryProperty().Translate(nameof(CategoryProperty.Description)))" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        <RadzenTextArea @bind-Value="prop.Description" Style="width:100%" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CategoryProperty" Title="@(new CategoryProperty().Translate(nameof(CategoryProperty.PropertyType)))" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        <RadzenDropDown @bind-Value="prop.PropertyType" TValue="PropertyType" Data="@(new List<PropertyType>() {PropertyType.Text, PropertyType.Boolean, PropertyType.Number})"
                                        Change="@(args=> prop.DefaultValue = (prop.PropertyType == PropertyType.Boolean) ?  "False" : ((prop.PropertyType ==PropertyType.Number ) ? "0" : null))"
                                        Style="width: 100%">
                            <ValueTemplate>
                                @if (prop.PropertyType == PropertyType.Text)
                                {
                                    @("טקסט")
                                }
                                else if (prop.PropertyType == PropertyType.Number)
                                {
                                    @("מספר")
                                }
                                else
                                {
                                    @("בוליאני")
                                }
                            </ValueTemplate>
                            <Template>
                                @if (context == PropertyType.Text)
                                {
                                    @("טקסט")
                                }
                                else if (context == PropertyType.Number)
                                {
                                    @("מספר")
                                }
                                else
                                {
                                    @("בוליאני")
                                }
                            </Template>
                            </RadzenDropDown>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CategoryProperty" Title="@(new CategoryProperty().Translate(nameof(CategoryProperty.DefaultValue)))" TextAlign="@TdTextAlign">
                    <Template Context="prop">
                        @if (prop.PropertyType == PropertyType.Text)
                        {
                            <RadzenTextBox @bind-Value="prop.DefaultValue" Style="width:100%" />
                        }
                        else if (prop.PropertyType == PropertyType.Number)
                        {
                            <CipherNumeric Amount="@(decimal.TryParse(prop.DefaultValue, out _) ? Convert.ToDecimal(prop.DefaultValue) : 0)" AmountChanged="@(args=> prop.DefaultValue = args.ToString())" Width="100%" />
                        }
                        else
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly" AlignItems="AlignItems.Center" style="width:50%">
                                <CipherText Text="כן" TextAlign="TextAlign.Center" Bold="true"/>
                                <RadzenSwitch ValueChanged="@(args=> prop.DefaultValue = args.ToString())"/>
                                <CipherText Text="לא" TextAlign="TextAlign.Center" Bold="true" />
                            </RadzenStack>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </ChildContent>
</CipherComponentCard>