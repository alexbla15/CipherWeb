@inherits CipherComponentCard

<CipherComponentCard WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <HeaderContent>
        @if (SetMode != FormMode.Create)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                <CipherCategoryDropDown Change="@Change" @ref="CatId" ChosenCategory="@ChosenObject" />
            </RadzenStack>
        }
    </HeaderContent>
    <ChildContent>
        @if (!(SetMode == FormMode.Update && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap" AlignCardItems="center">
                <Buttons>
                    @if (SetMode == FormMode.ReadOnly)
                    {
                        <CipherUpdateCategoryBtn ObjectId="@ChosenObject?.Id" />
                    }
                </Buttons>
                <ChildContent>
                    <CipherAutoComplete Label="@(Category.Translate(nameof(ICategory.Name)))" Icon="@Icons.Symbols.category" @ref=CatName
                                        Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.Name" />
                    <CipherCategoryDropDown Label="@(Category.Translate(nameof(ICategory.Parent)))" @ref=ParentCat Change="@(args => ChangedParent((ICategory?)args))"
                                            Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" ChosenCategory="@(ChosenObject?.Parent ?? Parent)" />
                    <CipherAutoComplete Label="@(Category.Translate(nameof(ICategory.Description)))" Icon="@Icons.Documents.Page.description" Multiline="true"
                                        @ref=CatDescription Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.Description" />
                    <CipherProcesses Icon="@Icons.Arrows.Squared.input" Label="@(Category.Translate(nameof(ICategory.CreatingProcesses)))" @ref=InProcs
                                     Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" ChosenProcesses="@ChosenObject?.CreatingProcesses" />
                    <CipherProcesses Icon="@Icons.Arrows.Squared.output" Label="@(Category.Translate(nameof(ICategory.ConsumingProcesses)))" @ref=OutProcs
                                     Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" ChosenProcesses="@ChosenObject?.ConsumingProcesses" />
                    <CipherMask @ref=CatMask Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.IdMask[0]" />
                </ChildContent>
            </CipherComponentCard>
            <CipherCategoryProperties @ref=CatProperties
                                      ChosenProperties="@(ParentProps ?? (CatProperties.ChosenProperties.Count > 0 ? CatProperties.ChosenProperties : (ChosenObject?.Properties ?? new List<ICategoryProperty>())))" />
        }
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Define the usage of this object-card
    /// </summary>
    [Parameter]
    public FormMode SetMode { get; set; } = FormMode.Create;

    /// <summary>
    /// Chosen category within the card
    /// </summary>
    [Parameter]
    public ICategory? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the category.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    private CipherCategoryDropDown CatId = new();
    private CipherCategoryDropDown ParentCat = new();
    private CipherAutoComplete CatName = new();
    private CipherAutoComplete CatDescription = new();
    private CipherMask CatMask = new();
    private CipherProcesses InProcs = new();
    private CipherProcesses OutProcs = new();
    private CipherCategoryProperties CatProperties = new();

    private ICategory? Parent;
    private List<ICategoryProperty>? ParentProps;

    protected override void OnInitialized()
    {
        Title ??= "פרטי הקטגוריה";

        // DON'T DELETE - it made the form refresh with details from url
        if (ChosenObject != null) StateHasChanged();
    }

    public void Change()
    {
        ChosenObject = CatId.ChosenCategory;
        ChangeObject.InvokeAsync();
        StateHasChanged();
    }

    public ICategoryRequest Value()
    {
        return new CategoryRequest()
            {
                ParentId = ParentCat.ChosenCategory?.Id,
                Name = CatName.Value,
                Description = CatDescription.Value,
                CreatingProcesses = (InProcs.ChosenProcesses is null) ? new() : InProcs.ChosenProcesses.Select(x => x.Id).ToList(),
                ConsumingProcesses = (OutProcs.ChosenProcesses is null) ? new() : OutProcs.ChosenProcesses.Select(x => x.Id).ToList(),
                Properties = CatProperties.ChosenProperties,
                IdMask = CatMask.GetValue()
            };
    }

    /// <summary>
    /// Method to set properties according to category's parent's properties.
    /// </summary>
    public void ChangedParent(ICategory? parent)
    {
        Parent = parent;
        ParentProps = null;

        if (parent != null)
        {
            if (parent.Properties != null) ParentProps = parent.Properties;
        }
    }
}