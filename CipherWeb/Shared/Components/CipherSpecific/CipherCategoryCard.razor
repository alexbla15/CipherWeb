@inherits CipherComponentCard

<CipherComponentCard WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <HeaderContent>
        @if (SetMode != FormMode.Create)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                <CipherCategoryDropDown Change="@Change" @ref="CatId" ChosenCategory="@ChosenObject" />
            </RadzenStack>
        }
    </HeaderContent>
    <ChildContent>
        <CipherComponentCard Title="תכונות" WithCard="true" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap" AlignCardItems="center">
            <Buttons>
                @if (SetMode == FormMode.ReadOnly)
                {
                    <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                                     Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdateCategory.Href}?Id={ChosenObject?.Id}")" />
                }
            </Buttons>
            <ChildContent>
                <CipherAutoComplete Label="@(new Category().Translate(nameof(Category.Name)))" Icon="@Icons.Symbols.category" @ref=CatName
                                    Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.Name"/>
                <CipherCategoryDropDown Label="@(new Category().Translate(nameof(Category.Parent)))" @ref=ParentCat Change="@(args => ChangedParent((Category?)args))"
                                        Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" ChosenCategory="@(ChosenObject?.Parent ?? Parent)" />
                <CipherAutoComplete Label="@(new Category().Translate(nameof(Category.Description)))" Icon="@Icons.Documents.Page.description" Multiline="true"
                @ref=CatDescription Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.Description" />
                <CipherProcesses Icon="@Icons.Arrows.Squared.input" Label="@(new Category().Translate(nameof(Category.CreatingProcesses)))" @ref=InProcs
                                 Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" ChosenProcesses="@ChosenObject?.CreatingProcesses" />
                <CipherProcesses Icon="@Icons.Arrows.Squared.output" Label="@(new Category().Translate(nameof(Category.ConsumingProcesses)))" @ref=OutProcs
                                 Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" ChosenProcesses="@ChosenObject?.ConsumingProcesses" />
                <CipherMask @ref=CatMask Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.IdMask[0]" />
            </ChildContent>
        </CipherComponentCard>
        <CipherCategoryProperties @ref=CatProperties
                                  ChosenProperties="@(ParentProps ?? (CatProperties.ChosenProperties.Count > 0 ? CatProperties.ChosenProperties : (ChosenObject?.Properties ?? new List<CategoryProperty>())))" />
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Define the usage of this object-card
    /// </summary>
    [Parameter]
    public FormMode SetMode { get; set; } = FormMode.Create;

    /// <summary>
    /// Chosen category within the card
    /// </summary>
    [Parameter]
    public Category? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the category.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    private CipherCategoryDropDown CatId = new();
    private CipherCategoryDropDown ParentCat = new();
    private CipherAutoComplete CatName = new();
    private CipherAutoComplete CatDescription = new();
    private CipherMask CatMask = new();
    private CipherProcesses InProcs = new();
    private CipherProcesses OutProcs = new();
    private CipherCategoryProperties CatProperties = new();

    private Category? Parent;
    private List<CategoryProperty>? ParentProps;

    protected override void OnInitialized()
    {
        Title ??= "פרטי הקטגוריה";

        // DON'T DELETE - it made the form refresh with details from url
        if (ChosenObject != null) StateHasChanged();
    }

    public void Change()
    {
        ChosenObject = CatId.ChosenCategory;
        ChangeObject.InvokeAsync();
        StateHasChanged();
    }

    public CategoryRequest Value()
    {
        CategoryRequest cat = new()
        {
            ParentId = ParentCat.ChosenCategory?.Id,
            Name = CatName.Value,
            Description = CatDescription.Value,
            CreatingProcesses = (InProcs.ChosenProcesses is null) ? new() : InProcs.ChosenProcesses.Select(x => x.Id).ToList(),
            ConsumingProcesses = (OutProcs.ChosenProcesses is null) ? new() : OutProcs.ChosenProcesses.Select(x => x.Id).ToList(),
            Properties = CatProperties.ChosenProperties,
            IdMask = CatMask.GetValue()
        };
        return cat;
    }

    /// <summary>
    /// Method to set properties according to category's parent's properties.
    /// </summary>
    public void ChangedParent(Category? parent)
    {
        Parent = parent;
        ParentProps = null;

        if (parent != null)
        {
            if (parent.Properties != null) ParentProps = parent?.Properties;
        }
    }
}