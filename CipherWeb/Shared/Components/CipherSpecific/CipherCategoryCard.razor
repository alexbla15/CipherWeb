@inherits CipherResourceCard

<CipherResourceCard SetMode="@SetMode" Title="@Title">
    <ObjectPicker>
        <CipherCategoryDropDown Change="@Change" @ref="CatId" ChosenCategory="@ChosenObject" />
    </ObjectPicker>
    <ChildContent>
        @if (!(SetMode != FormMode.Create && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" WithButtons="@(SetMode == FormMode.ReadOnly)"
                                 ContentStyleClass="@Constants.Styles.ComponentResourceCardContent_Centered">
                <Buttons>
                    <CipherUpdateCategoryBtn ObjectId="@ChosenObject?.Id" />
                </Buttons>
                <ChildContent>
                    @CategoryName()
                    @CategoryDescription()
                    @CategoryParent()
                    @CategoryMaterialType()
                    @CategoryCreatingProcesses()
                    @CategoryConsumingProcesses()
                    @CategoryMasks()
                </ChildContent>
            </CipherComponentCard>
            <CipherCategoryProperties @ref=CatProperties ValueChanged="@ChangeDetail" Disabled="@ReadonlyFields()"
                                      ChosenProperties="@SetProperties()" />
        }
    </ChildContent>
</CipherResourceCard>

@code {
    /// <summary>
    /// Chosen category within the card
    /// </summary>
    [Parameter]
    public ICategory? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the category.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    private CipherCategoryDropDown CatId = new();
    private CipherCategoryDropDown ParentCat = new();
    private CipherAutoComplete CatName = new();
    private CipherAutoComplete CatDescription = new();
    private CipherMask CatMask = new();
    private CipherProcesses InProcs = new();
    private CipherProcesses OutProcs = new();
    private CipherCategoryProperties CatProperties = new();

    private ICategory? Parent;
    private List<ICategoryProperty>? ParentProps;

    protected override void OnInitialized()
    {
        Title ??= "פרטי הקטגוריה";
        SetDetails();
    }

    public List<ICategoryProperty> SetProperties()
    {
        List<ICategoryProperty> result = new();
        result = ChosenObject?.Properties ?? result;

        if (CatProperties != null && CatProperties.ChosenProperties != null)
        {
            if (CatProperties.ChosenProperties.Any()) result = CatProperties.ChosenProperties;
        }

        return ParentProps ?? result;
    }

    public bool ReadonlyFields() => 
    SetMode==FormMode.ReadOnly || SetMode == FormMode.Update && ChosenObject is null;

    public void Change()
    {
        ChosenObject = CatId.ChosenCategory;
        //SetDetails();
        ChangeObject.InvokeAsync();
    }

    public void SetDetails()
    {
        if (ChosenObject is null) return;

        ParentCat.ChosenCategory = ChosenObject.Parent;
        CatName.Value = ChosenObject.Name;
        CatDescription.Value = ChosenObject.Description;
        InProcs.ChosenProcesses = ChosenObject.CreatingProcesses;
        OutProcs.ChosenProcesses = ChosenObject.ConsumingProcesses;
        CatProperties.ChosenProperties = ChosenObject.Properties;
        CatMask.SelectedTexts = ChosenObject.IdMask.ToHashSet();
    }

    public void ChangeDetail()
    {
        if (ChosenObject is null) return;
        ChosenObject.Parent = ParentCat.ChosenCategory;
        ChosenObject.Name = CatName.Value;
        ChosenObject.Description = CatDescription.Value;
        ChosenObject.CreatingProcesses = InProcs.ChosenProcesses;
        ChosenObject.ConsumingProcesses = OutProcs.ChosenProcesses;
        ChosenObject.Properties = CatProperties.ChosenProperties;
        ChosenObject.IdMask = CatMask.GetValue();
        ChangeDetails.InvokeAsync();
    }

    /// <summary>
    /// Method to set properties according to category's parent's properties.
    /// </summary>
    public void ChangedParent(ICategory? parent)
    {
        ParentCat.ChosenCategory = parent;

        Parent = parent;
        ParentProps = null;

        if (parent != null && parent.Properties != null) ParentProps = parent.Properties;

        ChangeDetail();
    }

    private string GetLabel(string property) => ICategory.Translate(property);

    private string? GetValue(string? value)
        => (SetMode == FormMode.ReadOnly && string.IsNullOrEmpty(value)) ? "אין נתונים" : value;

    private RenderFragment CategoryName()
    {
        string? value = GetValue(ChosenObject?.Name);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(ICategory.Name)))"
                        Icon="@Icons.Symbols.category" @ref=CatName
                        ValueChanged="@ChangeDetail"
                        Disabled="@ReadonlyFields()"
                        Value="@value" />
        ;
    }

    private RenderFragment CategoryDescription()
    {
        string? value = GetValue(ChosenObject?.Description);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(ICategory.Description)))"
                        Icon="@Icons.Documents.Page.description"
                        Multiline="true"
                        ValueChanged="@ChangeDetail"
                        @ref=CatDescription
                        Disabled="@ReadonlyFields()"
        Value="@value" />
    ;
    }

    private RenderFragment CategoryParent()
    {
        string label = GetLabel(nameof(ICategory.Parent));
        ICategory? chosenParent = ChosenObject?.Parent;
        string? value = GetValue(chosenParent?.Name);

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label"
                        Icon="@Icons.Cipher.Parent"
                        Disabled="true"
                        Value="@value" />;

        return
        @<CipherCategoryDropDown Label="@label" @ref=ParentCat
                            Change="@(args => ChangedParent((ICategory?)args))"
        Disabled="@ReadonlyFields()" ChosenCategory="@chosenParent" />
    ;
    }

    private RenderFragment CategoryMaterialType()
    {
        string label = GetLabel(nameof(ICategory.MaterialType));
        ICategory? materialType = ChosenObject?.MaterialType;
        string? value = GetValue(materialType?.Name);

        return
            @<CipherAutoComplete Label="@label"
                        Icon="@Icons.Cipher.Material"
                        Disabled="true"
                        Value="@value" />;
    }

    private RenderFragment CategoryMasks()
    {
        string label = GetLabel(nameof(ICategory.IdMask));
        HashSet<string> idMasks = ChosenObject?.IdMask?.ToHashSet() ?? new();
        string? value = GetValue(string.Join(", ", idMasks));

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label"
                        Icon="@Icons.Security.password"
                        Disabled="true" Value="@value" />;

        return
        @<CipherMask @ref=CatMask Disabled="@ReadonlyFields()"
                SelectedTexts="@idMasks" ValueChanged="@ChangeDetail" />
    ;
    }

    private RenderFragment CategoryCreatingProcesses()
    {
        string icon = Icons.Arrows.Squared.input;
        List<IProcessDefinition>? procs = ChosenObject?.CreatingProcesses;
        string label = GetLabel(nameof(ICategory.CreatingProcesses));
        string? value = (procs != null && procs.Any()) ? 
        string.Join(", ", procs.Select(x => x.Name).ToList()) : "אין נתונים";

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label" Icon="@icon"
                        Disabled="true" Value="@value" />;

        return
        @<CipherProcesses Icon="@icon"
                     Label="@label" @ref=InProcs Change="@ChangeDetail"
                     Disabled="@ReadonlyFields()" ChosenProcesses="@procs" />;
    }

    private RenderFragment CategoryConsumingProcesses()
    {
        string icon = Icons.Arrows.Squared.output;
        List<IProcessDefinition>? procs = ChosenObject?.ConsumingProcesses;
        string label = GetLabel(nameof(ICategory.ConsumingProcesses));
        string? value = (procs != null && procs.Any()) ? 
        string.Join(", ", procs.Select(x=>x.Name).ToList()) : "אין נתונים";

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label" Icon="@icon"
                        Disabled="true" Value="@value" />;

        return
        @<CipherProcesses Icon="@icon"
                     Label="@label" @ref=OutProcs Change="@ChangeDetail"
                     Disabled="@ReadonlyFields()" ChosenProcesses="@procs" />;
    }
}