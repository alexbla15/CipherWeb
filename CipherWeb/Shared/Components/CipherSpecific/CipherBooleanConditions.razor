@inherits CipherComponentCard

@using System.Reflection;

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "כאן ניתן להוסיף תנאים. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת תנאי";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת תנאים";

    /// <summary>
    /// Help text for save-button.
    /// </summary>
    [Parameter]
    public string SaveConditionsText { get; set; } = "שמירת תנאים";

    /// <summary>
    /// All available attributes to set conditions on them
    /// </summary>
    [Parameter]
    public List<CipherField> AvailableAttributes { get; set; } = new();

    /// <summary>
    /// All chosen conditions
    /// </summary>
    [Parameter]
    public ProcessStepDefinition SelectedStep { get; set; }

    /// <summary>
    /// All chosen conditions
    /// </summary>
    [Parameter]
    public List<BooleanCondition> ChosenConditions { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    public class CipherField
    {
        public string Path { get; set; } = string.Empty;
        public string Translation { get; set; } = string.Empty;
    }

    private RadzenDataGrid<BooleanCondition> ConditionsDataGrid = new();

    protected override void OnInitialized()
    {
        Title ??= "תנאים נבחרים";
        AvailableAttributes = GetTranslatedFields(typeof(Event));
    }

    /// <summary>
    /// Get a translation list (english,hebrew) of all available field of a Cipher data model.
    /// </summary>
    public static List<CipherField> GetTranslatedFields(Type setType, string? main = null, int curr_depth = 0)
    {
        int max_depth = 2;

        List<Type> OptionalTypes = new() { typeof(Package), typeof(Vessel), typeof(StorageSystem), typeof(Category), typeof(ProcessDefinition),
        new Event().Packages.GetType()};
        List<CipherField> translations = new();

        if (curr_depth <= max_depth)
        {
            foreach (PropertyInfo prop in setType.GetProperties())
            {
                var attribute = prop.GetCustomAttribute<HebrewTranslationAttribute>();
                if (attribute != null)
                {
                    CipherField c = new();
                    c.Path = !string.IsNullOrEmpty(main) ? $"{main}.{prop.Name}" : $"{setType.Name}.{prop.Name}";
                    c.Translation = attribute.Translation;

                    translations.Add(c);
                    Type prop_type = prop.PropertyType;
                    if (OptionalTypes.Contains(prop_type))
                    {
                        translations.AddRange(GetTranslatedFields(prop_type, c.Path, curr_depth + 1));
                    }
                    if (prop_type.IsGenericType)
                    {
                        prop_type = prop_type.GetGenericArguments()[0];
                        if (OptionalTypes.Contains(prop_type))
                        {
                            translations.AddRange(GetTranslatedFields(prop_type, c.Path, curr_depth + 1));
                        }
                    }
                }
            }
        }

        return translations;
    }

    /// <summary>
    /// Add a condition to the memory.
    /// </summary>
    async Task AddCondition()
    {
        // Add the new restriction to the existing list
        ChosenConditions.Add(new BooleanCondition());

        StateHasChanged();

        await ConditionsDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Deletes a condition from memory & view.
    /// </summary>
    /// <param name="cond">Condition to delete</param>
    async Task DeleteCondition(BooleanCondition cond)
    {
        ChosenConditions.Remove(cond);

        ConditionsDataGrid.Data = ChosenConditions;

        await ConditionsDataGrid.RefreshDataAsync();

        StateHasChanged();
    }

    /// <summary>
    /// Clears all conditions from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAllConditions()
    {
        ChosenConditions.Clear();
        ConditionsDataGrid.Data = ChosenConditions;

        await ConditionsDataGrid.RefreshDataAsync();
    }

    public void Save()
    {
        SelectedStep.Condition = new GroupedBooleanCondition() { Conditions = ChosenConditions };
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible">
    <Buttons>
        <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddCondition())" HelpText="@AddText" />
        <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" Variant="Variant.Outlined" Click="@(args => DeleteAllConditions())" HelpText="@DeleteAllText" />
        <CipherButton Icon="@Icons.Documents.Edit.save" Variant="Variant.Outlined" Click="@(args => Save())" HelpText="@SaveConditionsText" />
    </Buttons>
    <ChildContent>
        @if (ChosenConditions.Count() == 0)
        {
            <CipherText Text="@HelpText" />
        }
        <RadzenDataGrid @ref="ConditionsDataGrid" Data="@ChosenConditions" TItem="BooleanCondition" AllowColumnResize="true" Visible="@(ChosenConditions.Count() != 0)">
            <Columns>
                <RadzenDataGridColumn Width="10%" TItem="BooleanCondition" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                    <Template Context="cond">
                        <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteCondition(cond))" @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BooleanCondition" Title="@(BooleanCondition.Translate(nameof(BooleanCondition.Attribute)))" TextAlign="@TdTextAlign">
                    <Template Context="cond">
                        <RadzenDropDownDataGrid @bind-Value="@cond.Attribute" AllowFiltering="true" Data="@AvailableAttributes" Style="width: 100%" SearchTextPlaceholder="חיפוש..."
                                                ValueProperty="Path" TextProperty="Translation">
                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Path" Title="שם תכונה">
                                    <Template>
                                        @((context as CipherField).Path)
                                    </Template>
                                </RadzenDropDownDataGridColumn>
                                <RadzenDropDownDataGridColumn Property="Translation" Title="תרגום">
                                    <Template>
                                        @((context as CipherField).Translation)
                                    </Template>
                                </RadzenDropDownDataGridColumn>
                            </Columns>
                        </RadzenDropDownDataGrid>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BooleanCondition" Title="@(BooleanCondition.Translate(nameof(BooleanCondition.AttributeRelation)))" TextAlign="@TdTextAlign">
                    <Template Context="cond">
                        <RadzenDropDown @bind-Value="cond.AttributeRelation" Style="width: 100%" TValue="AttributeRelation"
                                        Data="@(new List<AttributeRelation>() {AttributeRelation.Eq, AttributeRelation.Ne, AttributeRelation.Contains, AttributeRelation.Gt, AttributeRelation.Lt})">
                            <ValueTemplate>
                                @if (cond.AttributeRelation == AttributeRelation.Eq)
                                    @("שווה ל")

                                @if (cond.AttributeRelation == AttributeRelation.Ne)
                                    @("שונה מ")

                                @if (cond.AttributeRelation == AttributeRelation.Gt)
                                    @("גדול מ")

                                @if (cond.AttributeRelation == AttributeRelation.Lt)
                                    @("קטן מ")

                                @if (cond.AttributeRelation == AttributeRelation.Contains)
                                    @("מכיל")

                            </ValueTemplate>
                            <Template>
                                @if (context == AttributeRelation.Eq)
                                    @("שווה ל")

                                @if (context == AttributeRelation.Ne)
                                    @("שונה מ")

                                @if (context == AttributeRelation.Gt)
                                    @("גדול מ")

                                @if (context == AttributeRelation.Lt)
                                    @("קטן מ")

                                @if (context == AttributeRelation.Contains)
                                    @("מכיל")

                            </Template>
                        </RadzenDropDown>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BooleanCondition" Title="@(BooleanCondition.Translate(nameof(BooleanCondition.Value)))" TextAlign="@TdTextAlign">
                    <Template Context="cond">
                        <CipherAutoComplete @bind-Value="@cond.Value" Width="100%" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="BooleanCondition" Title="@(BooleanCondition.Translate(nameof(BooleanCondition.Operator)))" TextAlign="@TdTextAlign">
                    <Template Context="cond">
                        <RadzenDropDown @bind-Value="cond.Operator" Style="width: 100%" TValue="Operator" Data="@(new List<Operator>() {Operator.Any, Operator.All, Operator.All, Operator.Any})">
                            <ValueTemplate>
                                @if (cond.Operator == Operator.All)
                                {
                                    @("כל האיברים")
                                }
                                else
                                {
                                    @("לפחות אחד")
                                }
                            </ValueTemplate>
                            <Template>
                                @if (context == Operator.All)
                                {
                                    @("כל האיברים")
                                }
                                else
                                {
                                    @("לפחות אחד")
                                }
                            </Template>
                        </RadzenDropDown>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </ChildContent>
</CipherComponentCard>