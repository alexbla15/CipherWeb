@inherits CipherComponentCard

@using System.Reflection;

@code {
    [Parameter]
    public bool WithSaveButton { get; set; } = true;

    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// All available attributes to set conditions on them
    /// </summary>
    [Parameter]
    public List<CipherField> AvailableAttributes { get; set; } = CommonFuncs.GetCipherTypeFields(typeof(Event));

    /// <summary>
    /// All chosen conditions
    /// </summary>
    [Parameter]
    public GroupedBooleanCondition ChosenCondition { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Function that occurs upon saving the conditions
    /// </summary>
    [Parameter]
    public EventCallback<object> OnSave { get; set; }

    /// <summary>
    /// Help text for save-button.
    /// </summary>
    [Parameter]
    public string SaveConditionsText { get; set; } = "רענון נתונים";

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; } = string.Empty;

    private CipherDataFilter<CipherField> dataFilter = new();

    protected override async Task OnInitializedAsync()
    {
        Title ??= "תנאים נבחרים";

        if (ChosenCondition != null)
        {
            await FillDataFilter();
        }
    }

    public CompositeFilterDescriptor AddBooleanConditionFilter(BooleanCondition cond)
    {
        CompositeFilterDescriptor new_filter = new();
        new_filter.Property = cond.Attribute;
        new_filter.FilterValue = cond.Value;

        new_filter.FilterOperator = cond.AttributeRelation switch
        {
            AttributeRelation.Eq => FilterOperator.Equals,
            AttributeRelation.Ne => FilterOperator.NotEquals,
            AttributeRelation.Gt => FilterOperator.GreaterThan,
            AttributeRelation.Ge => FilterOperator.GreaterThanOrEquals,
            AttributeRelation.Lt => FilterOperator.LessThan,
            AttributeRelation.Le => FilterOperator.LessThanOrEquals,
            AttributeRelation.Contains => FilterOperator.Contains,
            AttributeRelation.NotContains => FilterOperator.DoesNotContain,
            AttributeRelation.IsEmpty => FilterOperator.IsEmpty,
            AttributeRelation.IsNotEmpty => FilterOperator.IsNotEmpty,
            AttributeRelation.IsNull => FilterOperator.IsNull,
            AttributeRelation.IsNotNull => FilterOperator.IsNotNull,
            _ => FilterOperator.In
        };

        return new_filter;
    }

    public CompositeFilterDescriptor AddGroupedBooleanConditionFilter(GroupedBooleanCondition cond)
    {
        CompositeFilterDescriptor new_filter = new();
        new_filter.LogicalFilterOperator = (cond.Operator == Operator.All) ? LogicalFilterOperator.And : LogicalFilterOperator.Or;

        if (cond.Conditions != null)
        {
            List<CompositeFilterDescriptor> sub_conds = new();

            foreach (var sub_cond in cond.Conditions)
            {
                if (sub_cond is BooleanCondition)
                {
                    sub_conds.Add(AddBooleanConditionFilter(sub_cond as BooleanCondition));
                }
                else if (sub_cond is GroupedBooleanCondition)
                {
                    sub_conds.Add(AddGroupedBooleanConditionFilter(sub_cond as GroupedBooleanCondition));
                }
            }

            new_filter.Filters = sub_conds;
        }

        return new_filter;
    }

    /// <summary>
    /// Filter is a Boolean condition (no sub filters)
    /// </summary>
    public BooleanCondition SetBooleanCondition(CompositeFilterDescriptor filter)
    {
        BooleanCondition cond = new();
        cond.Attribute = filter.Property;

        if (filter.FilterValue != null)
        {
            string filterVal = filter.FilterValue.ToString();

            if (filterVal.Contains("##"))
            {
                cond.Operator = (filterVal.Split("##")[1] == nameof(Operator.Any)) ? Operator.Any : Operator.All;
            }

            cond.Value = filterVal.Split("##")[0];
        }

        FilterOperator? filterOperator = filter.FilterOperator;

        if (filterOperator != null)
        {
            cond.AttributeRelation = filterOperator switch
            {
                FilterOperator.Equals => AttributeRelation.Eq,
                FilterOperator.NotEquals => AttributeRelation.Ne,
                FilterOperator.GreaterThan => AttributeRelation.Gt,
                FilterOperator.GreaterThanOrEquals => AttributeRelation.Ge,
                FilterOperator.LessThan => AttributeRelation.Lt,
                FilterOperator.LessThanOrEquals => AttributeRelation.Le,
                FilterOperator.Contains => AttributeRelation.Contains,
                FilterOperator.DoesNotContain => AttributeRelation.NotContains,
                FilterOperator.IsEmpty => AttributeRelation.IsEmpty,
                FilterOperator.IsNotEmpty => AttributeRelation.IsNotEmpty,
                FilterOperator.IsNull => AttributeRelation.IsNull,
                FilterOperator.IsNotNull => AttributeRelation.IsNotNull,
                _ => AttributeRelation.Eq
            };
        }

        return cond;
    }

    /// <summary>
    /// Filter is a Grouped Boolean condition (no sub filters)
    /// </summary>
    public GroupedBooleanCondition SetGroupedBooleanCondition(CompositeFilterDescriptor filter)
    {
        GroupedBooleanCondition cond = new();
        cond.Operator = (filter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        List<Condition> conditions = new();

        foreach (var sub_filter in filter.Filters)
        {
            if (sub_filter.Filters is null)
            {
                conditions.Add(SetBooleanCondition(sub_filter));
            }
            else
            {
                conditions.Add(SetGroupedBooleanCondition(sub_filter));
            }
        }

        cond.Conditions = conditions;

        return cond;
    }

    public void Save()
    {
        List<Condition> conditions = new();

        ChosenCondition.Operator = (dataFilter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        foreach (var filter in dataFilter.GetFilters())
        {
            // decide if it is a GroupedCondition or BooleanCondition

            if (filter.Filters is null)
            {
                conditions.Add(SetBooleanCondition(filter));
            }
            else
            {
                conditions.Add(SetGroupedBooleanCondition(filter));
            }

        }

        ChosenCondition.Conditions = conditions;

        JsonRequest = ChosenCondition.ToJson();

        OnSave.InvokeAsync();
    }

    public async Task FillDataFilter()
    {
        await dataFilter.ClearFilters();

        dataFilter.LogicalFilterOperator = (ChosenCondition.Operator == Operator.All) ? LogicalFilterOperator.And : LogicalFilterOperator.Or;

        foreach (var cond in ChosenCondition.Conditions)
        {
            if (cond is BooleanCondition)
            {
                await dataFilter.AddFilter(AddBooleanConditionFilter(cond as BooleanCondition));
            }
            else if (cond is GroupedBooleanCondition)
            {
                await dataFilter.AddFilter(AddGroupedBooleanConditionFilter(cond as GroupedBooleanCondition));
            }
        }
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible">
    <Buttons>
        @if (WithSaveButton)
        {
            <CipherButton Icon="@Icons.Arrows.Rounded.refresh" Variant="Variant.Outlined" 
            Click="@(args => Save())" HelpText="@SaveConditionsText" />
        }
    </Buttons>
    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical" Gap="10px">
            <CipherDataFilter @ref=dataFilter Cipher_TItem="CipherField" Data="@AvailableAttributes">
                <FilterProperties>
                    @foreach (CipherField field in AvailableAttributes)
                    {
                        <RadzenDataFilterProperty TItem="CipherField" Property="@field.Path" Title="@field.Translation">
                            <FilterTemplate>
                                @if (context.FilterOperator != FilterOperator.IsNull && context.FilterOperator != FilterOperator.IsNotNull)
                                {
                                    @if (field.IsList)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center"
                                                     AlignItems="AlignItems.Center" Style="width:100%">
                                            <RadzenTextBox Style="width: 100%" ValueChanged="@(args => context.FilterValue=(object)args)" />
                                            <RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left" />
                                            <RadzenDropDown Style="width: 100%" TValue="Operator" ValueChanged="@(args=>context.FilterValue=(object)($"{context.FilterValue?.ToString().Split("##")[0]}##{args}"))" 
                                                Data="@(new List<Operator>() {Operator.Any, Operator.All})" Placeholder="אופרטור">
                                                <ValueTemplate Context="operator_value_context">
                                                    @if (operator_value_context == Operator.All)
                                                    {
                                                        @("כל האיברים")
                                                    }
                                                    else
                                                    {
                                                        @("לפחות אחד")
                                                    }
                                                </ValueTemplate>
                                                <Template Context="operator_context">
                                                    @if (operator_context == Operator.All)
                                                    {
                                                        @("כל האיברים")
                                                    }
                                                    else
                                                    {
                                                        @("לפחות אחד")
                                                    }
                                                </Template>
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    }
                                    else
                                    {
                                        <RadzenTextBox Style="width: 100%" Value="@(context.FilterValue?.ToString() ?? string.Empty)" ValueChanged="@(args => context.FilterValue=(object)args)" />
                                    }
                                }
                                else
                                {
                                    <RadzenTextBox Style="width: 100%" Disabled="true" Value="@(context.FilterValue?.ToString() ?? string.Empty)" ValueChanged="@(args => context.FilterValue=(object)args)" />
                                }
                            </FilterTemplate>
                        </RadzenDataFilterProperty>
                    }
                </FilterProperties>
            </CipherDataFilter>
            <CipherJsonCheck JsonValue="@JsonRequest" Visible="@Constants.CheckJsons" />
        </RadzenStack>
    </ChildContent>
</CipherComponentCard>