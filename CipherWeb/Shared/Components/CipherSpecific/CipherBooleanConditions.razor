@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Reflection;

@inherits CipherComponentCard

@code {
    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool WithSaveButton { get; set; } = true;

    /// <summary>
    /// All available attributes to set conditions on them
    /// </summary>
    [Parameter]
    public List<CipherField> AvailableAttributes { get; set; } = CommonFuncs.GetCipherTypeFields(typeof(IEvent));

    /// <summary>
    /// All chosen conditions
    /// </summary>
    [Parameter]
    public IGroupedBooleanCondition ChosenCondition { get; set; } = Config.GroupedBooleanCondition();

    [Parameter]
    public EventCallback<IGroupedBooleanCondition> ChosenConditionChanged { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Function that occurs upon saving the conditions
    /// </summary>
    [Parameter]
    public EventCallback<object> OnSave { get; set; }

    /// <summary>
    /// Help text for save-button.
    /// </summary>
    [Parameter]
    public string SaveConditionsText { get; set; } = "רענון נתונים";

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; } = string.Empty;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private RadzenDataFilter<CipherField> dataFilter = new();

    public CompositeFilterDescriptor AddBooleanConditionFilter(IBooleanCondition? cond)
    {
        CompositeFilterDescriptor new_filter = new();

        if (cond is null) return new_filter;

        new_filter.Property = cond.Attribute;
        new_filter.FilterValue = cond.Value;

        new_filter.FilterOperator = cond.AttributeRelation switch
        {
            AttributeRelation.Eq => FilterOperator.Equals,
            AttributeRelation.Ne => FilterOperator.NotEquals,
            AttributeRelation.Gt => FilterOperator.GreaterThan,
            AttributeRelation.Ge => FilterOperator.GreaterThanOrEquals,
            AttributeRelation.Lt => FilterOperator.LessThan,
            AttributeRelation.Le => FilterOperator.LessThanOrEquals,
            AttributeRelation.Contains => FilterOperator.Contains,
            AttributeRelation.NotContains => FilterOperator.DoesNotContain,
            AttributeRelation.IsEmpty => FilterOperator.IsEmpty,
            AttributeRelation.IsNotEmpty => FilterOperator.IsNotEmpty,
            AttributeRelation.IsNull => FilterOperator.IsNull,
            AttributeRelation.IsNotNull => FilterOperator.IsNotNull,
            _ => FilterOperator.In
        };

        return new_filter;
    }

    public CompositeFilterDescriptor AddGroupedBooleanConditionFilter(IGroupedBooleanCondition? cond)
    {
        CompositeFilterDescriptor new_filter = new();

        if (cond is null) return new_filter;

        new_filter.LogicalFilterOperator = (cond.Operator == Operator.All) ? LogicalFilterOperator.And : LogicalFilterOperator.Or;

        if (cond.Conditions != null)
        {
            List<CompositeFilterDescriptor> sub_conds = new();

            foreach (var sub_cond in cond.Conditions)
            {
                if (sub_cond is IBooleanCondition)
                {
                    sub_conds.Add(AddBooleanConditionFilter(sub_cond as IBooleanCondition));
                }
                else if (sub_cond is IGroupedBooleanCondition)
                {
                    sub_conds.Add(AddGroupedBooleanConditionFilter(sub_cond as IGroupedBooleanCondition));
                }
            }

            new_filter.Filters = sub_conds;
        }


        return new_filter;
    }

    /// <summary>
    /// Filter is a Boolean condition (no sub filters)
    /// </summary>
    public IBooleanCondition SetBooleanCondition(CompositeFilterDescriptor filter)
    {
        IBooleanCondition cond = Config.BooleanCondition();
        cond.Attribute = filter.Property;

        if (filter.FilterValue != null)
        {
            string filterVal = filter.FilterValue.ToString() ?? string.Empty;

            if (filterVal.Contains("##")) cond.Operator = (filterVal.Split("##")[1] == nameof(Operator.Any)) ? Operator.Any : Operator.All;
            cond.Value = filterVal.Split("##")[0];
        }

        FilterOperator? filterOperator = filter.FilterOperator;

        if (filterOperator != null)
        {
            cond.AttributeRelation = filterOperator switch
            {
                FilterOperator.Equals => AttributeRelation.Eq,
                FilterOperator.NotEquals => AttributeRelation.Ne,
                FilterOperator.GreaterThan => AttributeRelation.Gt,
                FilterOperator.GreaterThanOrEquals => AttributeRelation.Ge,
                FilterOperator.LessThan => AttributeRelation.Lt,
                FilterOperator.LessThanOrEquals => AttributeRelation.Le,
                FilterOperator.Contains => AttributeRelation.Contains,
                FilterOperator.DoesNotContain => AttributeRelation.NotContains,
                FilterOperator.IsEmpty => AttributeRelation.IsEmpty,
                FilterOperator.IsNotEmpty => AttributeRelation.IsNotEmpty,
                FilterOperator.IsNull => AttributeRelation.IsNull,
                FilterOperator.IsNotNull => AttributeRelation.IsNotNull,
                _ => AttributeRelation.Eq
            };
        }

        return cond;
    }

    /// <summary>
    /// Filter is a Grouped Boolean condition (no sub filters)
    /// </summary>
    public IGroupedBooleanCondition SetGroupedBooleanCondition(CompositeFilterDescriptor filter)
    {
        IGroupedBooleanCondition cond = Config.GroupedBooleanCondition();
        cond.Operator = (filter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        List<ICondition> conditions = new();

        foreach (var sub_filter in filter.Filters)
        {
            conditions.Add(sub_filter.Filters is null ? SetBooleanCondition(sub_filter) : SetGroupedBooleanCondition(sub_filter));
        }

        cond.Conditions = conditions;
        return cond;
    }

    public void Save(IQueryable<CipherField>? fields = null)
    {
        List<ICondition> conditions = new();

        ChosenCondition.Operator = (dataFilter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        foreach (var filter in dataFilter.Filters)
        {
            if (fields!=null)
            {
                filter.Property ??= fields.ToList()[dataFilter.Filters.ToList().IndexOf(filter)].Path;
            }

            // decide if it is a GroupedCondition or BooleanCondition

            conditions.Add((filter.Filters is null) ? SetBooleanCondition(filter) : SetGroupedBooleanCondition(filter));

        }

        ChosenCondition.Conditions = conditions;
        OnSave.InvokeAsync();
    }

    async Task ParamsChanged(IQueryable<CipherField>? fields = null)
    {
        //StateHasChanged();
        Save(fields);
        await ChosenConditionChanged.InvokeAsync(ChosenCondition); // Trigger change event
        await ValueChanged.InvokeAsync();

        JsonRequest = ChosenCondition.ToJson();
    }

    public async Task Clear() => await dataFilter.ClearFilters();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        Title ??= "תנאים נבחרים";
        if (firstRender)
        {
            if (dataFilter.Filters.Any()) await Clear();

            dataFilter.LogicalFilterOperator = (ChosenCondition.Operator == Operator.All) ? LogicalFilterOperator.And : LogicalFilterOperator.Or;

            List<CompositeFilterDescriptor> newFilters = new();

            foreach (var cond in ChosenCondition.Conditions)
            {
                if (cond is IBooleanCondition)
                {
                    await dataFilter.AddFilter(AddBooleanConditionFilter(cond as IBooleanCondition));
                }
                else if (cond is IGroupedBooleanCondition)
                {
                    await dataFilter.AddFilter(AddGroupedBooleanConditionFilter(cond as IGroupedBooleanCondition));
                }
            }

            StateHasChanged();
        }
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible" WithButtons="@(!Disabled)">
    <Buttons>
        @if (WithSaveButton)
        {
            <CipherButton Icon="@Icons.Arrows.Rounded.refresh" Variant="Variant.Outlined"
                          Click="@(async args => {await ParamsChanged();})" HelpText="@SaveConditionsText" />
        }
    </Buttons>
    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical" Gap="10px">
            <RadzenDataFilter @ref=dataFilter TItem="CipherField" Data="@AvailableAttributes" ViewChanged="@(async args => {await ParamsChanged(args);})"
                              RemoveFilterText="הסרת מסנן" 
                              AddFilterText="הוספת מסנן" AddFilterGroupText="הוספת קבוצת סינון"
                              AndOperatorText="וגם" OrOperatorText="או"
                              ClearFilterText="ביטול" IsNullText="חסר" IsNotNullText="לא חסר"
                              StartsWithText="מתחיל ב" EndsWithText="מסתיים ב" IsEmptyText="ריק" IsNotEmptyText="לא ריק"
                              FilterText="סינון" ApplyFilterText="סינון"
                              ContainsText="מכיל" DoesNotContainText="לא מכיל" EqualsText="זהה ל" NotEqualsText="שונה מ"
                              LessThanOrEqualsText="קטן מ / שווה ל" LessThanText="קטן מ" GreaterThanOrEqualsText="גדול / שווה ל" GreaterThanText="גדול מ">
                <Properties>
                    @foreach (CipherField field in AvailableAttributes)
                    {
                        <RadzenDataFilterProperty TItem="CipherField" Property="@field.Path" Title="@field.Translation">
                            <FilterTemplate>
                                @if (context.FilterOperator != FilterOperator.IsNull && context.FilterOperator != FilterOperator.IsNotNull)
                                {
                                    @if (field.IsList)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center"
                                                     AlignItems="AlignItems.Center" Style="width:100%">
                                            <RadzenTextBox Style="width: 100%" Disabled="@Disabled" 
                                                           Value="@(context.FilterValue != null ? (context.FilterValue.ToString().Contains("##") ? context.FilterValue.ToString().Split("##")[0] : context.FilterValue.ToString()) : string.Empty)"
                                                           ValueChanged="@(async args => { context.FilterValue = (context.FilterValue != null) ? (context.FilterValue.ToString().Contains("##") ? (object)($"{args}##{context.FilterValue?.ToString().Split("##")[1]}") :  (object)($"{args}##{Operator.All.ToString()}")) : (object)($"{args}##{Operator.All.ToString()}"); await ParamsChanged(); })"/>
                                            <RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left" />
                                            <RadzenDropDown Style="width: 100%" TValue="Operator" Disabled="@Disabled"
                                            Value="@(context.FilterValue != null ? (context.FilterValue.ToString().Contains("##") ? ((context.FilterValue.ToString().Split("##")[1] == "All") ? Operator.All : Operator.Any) : Operator.All) : Operator.All)" 
                                            ValueChanged="@(async args=> {context.FilterValue=(object)($"{context.FilterValue?.ToString().Split("##")[0]}##{args}"); await ParamsChanged();})"
                                                Data="@(new List<Operator>() {Operator.Any, Operator.All})" Placeholder="אופרטור">
                                                <ValueTemplate Context="operator_value_context">
                                                    @if (operator_value_context == Operator.All)
                                                    {
                                                        @("כל האיברים")
                                                    }
                                                    else
                                                    {
                                                        @("לפחות אחד")
                                                    }
                                                </ValueTemplate>
                                                <Template Context="operator_context">
                                                    @if (operator_context == Operator.All)
                                                    {
                                                        @("כל האיברים")
                                                    }
                                                    else
                                                    {
                                                        @("לפחות אחד")
                                                    }
                                                </Template>
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    }
                                    else
                                    {
                                        <RadzenTextBox Disabled="@Disabled" Style="width: 100%" Value="@(context.FilterValue?.ToString() ?? string.Empty)" ValueChanged="@(async args => {context.FilterValue=(object)args; await ParamsChanged();})" />
                                    }
                                }
                                else
                                {
                                    <RadzenTextBox Style="width: 100%" Disabled="true" Value="@(context.FilterValue?.ToString() ?? string.Empty)" ValueChanged="@(async args => {context.FilterValue=(object)args; await ParamsChanged();})" />
                                }
                            </FilterTemplate>
                        </RadzenDataFilterProperty>
                    }
                </Properties>
            </RadzenDataFilter>
            @if (!Disabled)
            {
                <CipherJsonCheck JsonValue="@JsonRequest" Visible="@Constants.CheckJsons" />
            }
        </RadzenStack>
    </ChildContent>
</CipherComponentCard>