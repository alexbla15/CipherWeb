@inherits CipherComponentCard

@using System.Reflection;

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Help text for save-button.
    /// </summary>
    [Parameter]
    public string SaveConditionsText { get; set; } = "שמירת תנאים";

    /// <summary>
    /// All available attributes to set conditions on them
    /// </summary>
    [Parameter]
    public List<CipherField> AvailableAttributes { get; set; } = GetTranslatedFields(typeof(Event));

    /// <summary>
    /// All chosen conditions
    /// </summary>
    [Parameter]
    public ProcessStepDefinition SelectedStep { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    public class CipherField
    {
        public string Path { get; set; } = string.Empty;
        public string Translation { get; set; } = string.Empty;
        public bool IsList { get; set; } = false;
    }

    private CipherDataFilter<CipherField> dataFilter = new();

    private string json_value = string.Empty;
    protected override void OnInitialized()
    {
        Title ??= "תנאים נבחרים";
    }

    /// <summary>
    /// Get a translation list (english,hebrew) of all available field of a Cipher data model.
    /// </summary>
    public static List<CipherField> GetTranslatedFields(Type setType, string? mainPath = null, string? mainTranslation = null, int curr_depth = 0)
    {
        int max_depth = 2;

        List<Type> OptionalTypes = new() { typeof(Package), typeof(Vessel), typeof(StorageSystem), typeof(Category), typeof(ProcessDefinition),
        new Event().Packages.GetType()};
        List<CipherField> translations = new();

        if (curr_depth <= max_depth)
        {
            foreach (PropertyInfo prop in setType.GetProperties())
            {
                var attribute = prop.GetCustomAttribute<HebrewTranslationAttribute>();
                if (attribute != null)
                {
                    CipherField c = new();
                    c.Path = !string.IsNullOrEmpty(mainPath) ? $"{mainPath}.{prop.Name}" : $"{setType.Name}.{prop.Name}";
                    c.Translation = !string.IsNullOrEmpty(mainTranslation) ? $"{mainTranslation}.[{attribute.Translation}]" : $"[{attribute.Translation}]";
                    c.IsList = false;

                    Type prop_type = prop.PropertyType;
                    if (OptionalTypes.Contains(prop_type))
                    {
                        translations.AddRange(GetTranslatedFields(prop_type, c.Path, c.Translation, curr_depth + 1));
                    }
                    if (prop_type.IsGenericType)
                    {
                        c.IsList = true;
                        prop_type = prop_type.GetGenericArguments()[0];
                        if (OptionalTypes.Contains(prop_type))
                        {
                            translations.AddRange(GetTranslatedFields(prop_type, c.Path, c.Translation, curr_depth + 1));
                        }
                    }

                    translations.Add(c);
                }
            }
        }

        return translations;
    }

    /// <summary>
    /// Filter is a Boolean condition (no sub filters)
    /// </summary>
    /// <param name="filter"></param>
    /// <returns></returns>
    public BooleanCondition SetBooleanCondition(CompositeFilterDescriptor filter)
    {
        BooleanCondition cond = new();
        cond.Attribute = filter.Property;

        if (filter.FilterValue != null)
        {
            string filterVal= filter.FilterValue.ToString();

            if (filterVal.Contains("##"))
            {
                cond.Operator = (filterVal.Split("##")[1] == nameof(Operator.Any)) ? Operator.Any:Operator.All;
            }

            cond.Value = filterVal.Split("##")[0];
        }

        FilterOperator? filterOperator = filter.FilterOperator;

        if (filterOperator != null)
        {
            cond.AttributeRelation = filterOperator switch
            {
                FilterOperator.Equals => AttributeRelation.Eq,
                FilterOperator.NotEquals => AttributeRelation.Ne,
                FilterOperator.GreaterThan => AttributeRelation.Gt,
                FilterOperator.GreaterThanOrEquals => AttributeRelation.Ge,
                FilterOperator.LessThan => AttributeRelation.Lt,
                FilterOperator.LessThanOrEquals => AttributeRelation.Le,
                FilterOperator.Contains => AttributeRelation.Contains,
                FilterOperator.DoesNotContain => AttributeRelation.NotContains,
                FilterOperator.IsEmpty => AttributeRelation.IsEmpty,
                FilterOperator.IsNotEmpty => AttributeRelation.IsNotEmpty,
                FilterOperator.IsNull => AttributeRelation.IsNull,
                FilterOperator.IsNotNull => AttributeRelation.IsNotNull,
                _ => AttributeRelation.Eq
            };
        }

        return cond;
    }

    /// <summary>
    /// Filter is a Grouped Boolean condition (no sub filters)
    /// </summary>
    public GroupedBooleanCondition SetGroupedBooleanCondition(CompositeFilterDescriptor filter)
    {
        GroupedBooleanCondition cond = new();
        cond.Operator = (filter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        List<Condition> conditions = new();

        foreach (var sub_filter in filter.Filters)
        {
            if (sub_filter.Filters is null)
            {
                conditions.Add(SetBooleanCondition(sub_filter));
            }
            else
            {
                conditions.Add(SetGroupedBooleanCondition(sub_filter));
            }
        }

        cond.Conditions = conditions;

        return cond;
    }

    public void Save()
    {
        GroupedBooleanCondition ChosenConditions = new();
        List<Condition> conditions = new();

        ChosenConditions.Operator = (dataFilter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        foreach (var filter in dataFilter.GetFilters())
        {
            // decide if it is a GroupedCondition or BooleanCondition

            if (filter.Filters is null)
            {
                conditions.Add(SetBooleanCondition(filter));
            }
            else
            {
                conditions.Add(SetGroupedBooleanCondition(filter));
            }

        }

        ChosenConditions.Conditions = conditions;

        SelectedStep.Condition = ChosenConditions;
        json_value = SelectedStep.Condition.ToJson();

    }
}

<CipherComponentCard Title="@Title" Visible="@Visible">
    <Buttons>
        <CipherButton Icon="@Icons.Documents.Edit.save" Variant="Variant.Outlined" Click="@(args => Save())" HelpText="@SaveConditionsText" />
    </Buttons>
    <ChildContent>
        <CipherDataFilter @ref=dataFilter Cipher_TItem="CipherField" Data="@AvailableAttributes">
            <FilterProperties>
                @foreach (CipherField field in AvailableAttributes)
                {
                    <RadzenDataFilterProperty TItem="CipherField" Property="@field.Path" Title="@field.Translation">

                        <FilterTemplate>
                            @if (context.FilterOperator != FilterOperator.IsNull && context.FilterOperator != FilterOperator.IsNotNull)
                            {
                                @if (field.IsList)
                                {
                                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" 
                                    AlignItems="AlignItems.Center" Style="width:100%">
                                        <RadzenTextBox Style="width: 100%" ValueChanged="@(args => context.FilterValue=(object)args)" />
                                        <RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left"/>
                                        <RadzenDropDown Style="width: 100%" TValue="Operator" ValueChanged="@(args=>context.FilterValue=(object)($"{context.FilterValue?.ToString().Split("##")[0]}##{args}"))" Data="@(new List<Operator>() {Operator.Any, Operator.All})" Placeholder="אופרטור">
                                            <ValueTemplate Context="operator_value_context">
                                                @if (operator_value_context == Operator.All)
                                                {
                                                    @(
                                                                                        "כל האיברים"
                                                                                                                                        )
                                                }
                                                else
                                                {
                                                    @(
                                                                                        "לפחות אחד"
                                                                                                                                        )
                                                }
                                            </ValueTemplate>
                                            <Template Context="operator_context">
                                                @if (operator_context == Operator.All)
                                                {
                                                    @(
                                                                                        "כל האיברים"
                                                                                                                                        )
                                                }
                                                else
                                                {
                                                    @(
                                                                                        "לפחות אחד"
                                                                                                                                        )
                                                }
                                            </Template>
                                        </RadzenDropDown>
                                    </RadzenStack>
                                }
                                else
                                {
                                    <RadzenTextBox Style="width: 100%" ValueChanged="@(args => context.FilterValue=(object)args)"/>
                                }
                            }
                            else
                            {
                                <RadzenTextBox Style="width: 100%" Disabled="true" ValueChanged="@(args => context.FilterValue=null)" />
                            }
                        </FilterTemplate>
                    </RadzenDataFilterProperty>
                }
            </FilterProperties>
        </CipherDataFilter>
        <CipherJsonCheck JsonValue="@json_value" />
    </ChildContent>
</CipherComponentCard>