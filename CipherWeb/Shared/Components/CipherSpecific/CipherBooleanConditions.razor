@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Reflection;

@inherits CipherComponentCard

@code {
    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool WithSaveButton { get; set; } = true;

    /// <summary>
    /// All chosen conditions
    /// </summary>
    [Parameter]
    public IGroupedBooleanCondition ChosenCondition { get; set; } = Config.GroupedBooleanCondition();

    /// <summary>
    /// Help text for save-button.
    /// </summary>
    [Parameter]
    public string SaveConditionsText { get; set; } = "רענון נתונים";

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; } = string.Empty;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    [Parameter]
    public EventCallback<IGroupedBooleanCondition> ChosenConditionChanged { get; set; }

    /// <summary>
    /// Function that occurs upon saving the conditions
    /// </summary>
    [Parameter]
    public EventCallback<object> OnSave { get; set; }

    [Parameter]
    public Type? InitialType { get; set; }

    private RadzenDataFilter<CipherField> dataFilter = new();

    public enum FilterType
    {
        Text, Number, Date, Condition, Other
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (string.IsNullOrEmpty(Title)) Title = "תנאים נבחרים";

        if (firstRender)
        {
            await Clear();

            dataFilter.LogicalFilterOperator = (ChosenCondition.Operator == Operator.All) ? LogicalFilterOperator.And : LogicalFilterOperator.Or;

            List<CompositeFilterDescriptor> newFilters = new();

            foreach (var cond in ChosenCondition.Conditions)
            {
                if (cond is IBooleanCondition)
                {
                    await dataFilter.AddFilter(AddBooleanConditionFilter(cond as IBooleanCondition));
                }
                else if (cond is IGroupedBooleanCondition)
                {
                    await dataFilter.AddFilter(AddGroupedBooleanConditionFilter(cond as IGroupedBooleanCondition));
                }
            }

            StateHasChanged();
        }
    }

    public CompositeFilterDescriptor AddBooleanConditionFilter(IBooleanCondition? cond)
    {
        CompositeFilterDescriptor new_filter = new();

        if (cond is null) return new_filter;

        new_filter.Property = cond.Attribute;
        new_filter.FilterValue = cond.Value;

        new_filter.FilterOperator = cond.AttributeRelation switch
        {
            AttributeRelation.Eq => FilterOperator.Equals,
            AttributeRelation.Ne => FilterOperator.NotEquals,
            AttributeRelation.Gt => FilterOperator.GreaterThan,
            AttributeRelation.Ge => FilterOperator.GreaterThanOrEquals,
            AttributeRelation.Lt => FilterOperator.LessThan,
            AttributeRelation.Le => FilterOperator.LessThanOrEquals,
            AttributeRelation.Contains => FilterOperator.Contains,
            AttributeRelation.NotContains => FilterOperator.DoesNotContain,
            AttributeRelation.IsEmpty => FilterOperator.IsEmpty,
            AttributeRelation.IsNotEmpty => FilterOperator.IsNotEmpty,
            AttributeRelation.IsNull => FilterOperator.IsNull,
            AttributeRelation.IsNotNull => FilterOperator.IsNotNull,
            _ => FilterOperator.In
        };

        return new_filter;
    }

    public CompositeFilterDescriptor AddGroupedBooleanConditionFilter(IGroupedBooleanCondition? cond)
    {
        CompositeFilterDescriptor new_filter = new();

        if (cond is null) return new_filter;

        new_filter.LogicalFilterOperator = (cond.Operator == Operator.All) ? LogicalFilterOperator.And : LogicalFilterOperator.Or;

        if (cond.Conditions != null)
        {
            List<CompositeFilterDescriptor> sub_conds = new();

            foreach (var sub_cond in cond.Conditions)
            {
                if (sub_cond is IBooleanCondition)
                {
                    sub_conds.Add(AddBooleanConditionFilter(sub_cond as IBooleanCondition));
                }
                else if (sub_cond is IGroupedBooleanCondition)
                {
                    sub_conds.Add(AddGroupedBooleanConditionFilter(sub_cond as IGroupedBooleanCondition));
                }
            }

            new_filter.Filters = sub_conds;
        }


        return new_filter;
    }

    /// <summary>
    /// Filter is a Boolean condition (no sub filters)
    /// </summary>
    public IBooleanCondition SetBooleanCondition(CompositeFilterDescriptor filter)
    {
        IBooleanCondition cond = Config.BooleanCondition();
        cond.Attribute = filter.Property;

        if (filter.FilterValue != null)
        {
            string filterVal = filter.FilterValue.ToString() ?? string.Empty;

            cond.Attribute = GetName(filter);
            cond.Value = GetValue(filter);
            cond.Operator = GetOperator(filter);

            string? filterRelation = GetRelation(filter);

            if (filterRelation != null)
            {
                if (filterRelation == Translate(nameof(AttributeRelation.Eq))) cond.AttributeRelation = AttributeRelation.Eq;
                if (filterRelation == Translate(nameof(AttributeRelation.Ne))) cond.AttributeRelation = AttributeRelation.Ne;
                if (filterRelation == Translate(nameof(AttributeRelation.Gt))) cond.AttributeRelation = AttributeRelation.Gt;
                if (filterRelation == Translate(nameof(AttributeRelation.Ge))) cond.AttributeRelation = AttributeRelation.Ge;
                if (filterRelation == Translate(nameof(AttributeRelation.Lt))) cond.AttributeRelation = AttributeRelation.Lt;
                if (filterRelation == Translate(nameof(AttributeRelation.Le))) cond.AttributeRelation = AttributeRelation.Le;
                if (filterRelation == Translate(nameof(AttributeRelation.Contains))) cond.AttributeRelation = AttributeRelation.Contains;
                if (filterRelation == Translate(nameof(AttributeRelation.NotContains))) cond.AttributeRelation = AttributeRelation.NotContains;
                if (filterRelation == Translate(nameof(AttributeRelation.IsEmpty))) cond.AttributeRelation = AttributeRelation.IsEmpty;
                if (filterRelation == Translate(nameof(AttributeRelation.IsNotEmpty))) cond.AttributeRelation = AttributeRelation.IsNotEmpty;
                if (filterRelation == Translate(nameof(AttributeRelation.IsNull))) cond.AttributeRelation = AttributeRelation.IsNull;
                if (filterRelation == Translate(nameof(AttributeRelation.IsNotNull))) cond.AttributeRelation = AttributeRelation.IsNotNull;
                if (filterRelation == Translate(nameof(AttributeRelation.StartsWith))) cond.AttributeRelation = AttributeRelation.StartsWith;
                if (filterRelation == Translate(nameof(AttributeRelation.EndsWith))) cond.AttributeRelation = AttributeRelation.EndsWith;
            }
        }

        return cond;
    }

    /// <summary>
    /// Filter is a Grouped Boolean condition (no sub filters)
    /// </summary>
    public IGroupedBooleanCondition SetGroupedBooleanCondition(CompositeFilterDescriptor filter)
    {
        IGroupedBooleanCondition cond = Config.GroupedBooleanCondition();
        cond.Operator = (filter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        List<ICondition> conditions = new();

        foreach (var sub_filter in filter.Filters)
        {
            conditions.Add(sub_filter.Filters is null ? SetBooleanCondition(sub_filter) : SetGroupedBooleanCondition(sub_filter));
        }

        cond.Conditions = conditions;
        return cond;
    }

    public void Save(IQueryable<CipherField>? fields = null)
    {
        List<ICondition> conditions = new();

        ChosenCondition.Operator = (dataFilter.LogicalFilterOperator == LogicalFilterOperator.And) ? Operator.All : Operator.Any;

        foreach (var filter in dataFilter.Filters)
        {
            //if (fields!=null)
            //{
            //    filter.Property ??= fields.ToList()[dataFilter.Filters.ToList().IndexOf(filter)].Path;
            //}

            // decide if it is a GroupedCondition or BooleanCondition

            conditions.Add((filter.Filters is null) ? SetBooleanCondition(filter) : SetGroupedBooleanCondition(filter));
        }

        ChosenCondition.Conditions = conditions;
        OnSave.InvokeAsync();
    }

    async Task ParamsChanged(IQueryable<CipherField>? fields = null)
    {
        Save(fields);
        await ChosenConditionChanged.InvokeAsync(ChosenCondition); // Trigger change event
        await ValueChanged.InvokeAsync();
        SetJson();
    }

    public void SetJson() => JsonRequest = ChosenCondition.ToJson();

    /// <summary>
    /// Clears all fields in the filter, and resets set-condition and json
    /// </summary>
    /// <returns></returns>
    public async Task Clear()
    {
        ChosenCondition = Config.GroupedBooleanCondition();
        SetJson();
        await dataFilter.ClearFilters();
    }

    private static string Translate(string key) => Translator.GetTranslation(key);

    ///  <summary>
    /// Method to control the including all data of a filter within its value
    /// </summary>
    /// <param name="prop">a filter description which will contain all the data</param>
    /// <param name="update_name">should the name be updated?</param>
    /// <param name="update_value">should the value be updated?</param>
    /// <param name="update_relation">should the relation be updated?</param>
    /// <param name="changeParams">should activate changed-params function after this method?</param>
    /// <param name="update_islist">should update isList?</param>
    /// <param name="update_operator">should update operator?</param>
    /// <param name="name">value to be set as name upon update</param>
    /// <param name="value">value to be set as value upon update</param>
    /// <param name="relation">value to be set as relation upon update</param>
    /// <param name="isList">value to be set as isList upon update</param>
    /// <param name="_operator">value to be set as operator upon update</param>
    private async void ChangeProperty(CompositeFilterDescriptor prop,
    bool update_name = false, bool update_value = false, bool update_relation = false,
    bool changeParams = true, bool update_islist = false, bool update_operator = false, bool update_type = false,
    string? name = null, string? value = null, string? relation = null, bool isList = false, Operator? _operator = null,
    FilterType filterType = FilterType.Other)
    {
        string? newName = update_name ? name : GetName(prop);
        string? newRel = update_relation ? relation : GetRelation(prop);
        string? newVal = update_value ? value : GetValue(prop);
        bool newIsList = update_islist ? isList : GetIsList(prop);
        Operator? newOperator = update_operator ? _operator : GetOperator(prop);
        FilterType newType = update_type ? filterType : GetFilterType(prop);

        // make value initially null / 0 / false / now
        if (string.IsNullOrEmpty(newVal)) newVal = GetDefaultValue(newType);
        // make value null if checking for IsNull or something that doesn't require a value
        if (IsCheckingNullOrEmpty(newRel)) newVal = null;

        prop.FilterValue = $"{newName}###{newVal ?? " "}###{newRel ?? " "}###{newIsList}###{newOperator?.ToString() ?? " "}###{newType}";

        if (changeParams) await ParamsChanged();
    }

    private string? GetName(CompositeFilterDescriptor prop) => prop.FilterValue?.ToString()?.Split("###")[0].Trim();

    private string? GetValue(CompositeFilterDescriptor prop) => prop.FilterValue?.ToString()?.Split("###")[1].Trim();

    private string? GetRelation(CompositeFilterDescriptor prop) => prop.FilterValue?.ToString()?.Split("###")[2].Trim();

    private bool GetIsList(CompositeFilterDescriptor prop)
    {
        var res = prop.FilterValue?.ToString()?.Split("###")[3];
        return Convert.ToBoolean(res);
    }

    private Operator GetOperator(CompositeFilterDescriptor prop)
        => prop.FilterValue?.ToString()?.Split("###")[4] == "All" ? Operator.All : Operator.Any;

    private FilterType GetFilterType(CompositeFilterDescriptor prop)
    {
        string? filterType = prop.FilterValue?.ToString()?.Split("###")[5];

        return filterType switch
        {
            nameof(FilterType.Text) => FilterType.Text,
            nameof(FilterType.Number) => FilterType.Number,
            nameof(FilterType.Condition) => FilterType.Condition,
            nameof(FilterType.Date) => FilterType.Date,
            _ => FilterType.Other
        };
    }

    private bool IsCheckingNullOrEmpty(string? rel)
    {
        var operators = new List<string> {
            nameof(FilterOperator.IsNull),
            nameof(FilterOperator.IsNotNull),
            nameof(FilterOperator.IsEmpty),
            nameof(FilterOperator.IsNotEmpty),
            };
        return operators.Select(x => Translate(x)).Contains(rel);
    }

    private bool IsCheckingNullOrEmpty(CompositeFilterDescriptor prop) =>
        IsCheckingNullOrEmpty(GetRelation(prop));

    private string FixedWidth() =>
        $"width:{Constants.StandardWidth}; min-width:{Constants.StandardWidth}; max-width:{Constants.StandardWidth}";

    private RenderFragment? RefreshBtn()
        => (!Disabled && WithSaveButton) ?
    @<CipherButton Icon="@Icons.Arrows.Rounded.refresh" Variant="Variant.Outlined"
                  Click="@(async args => {await ParamsChanged();})" HelpText="@SaveConditionsText" /> : null;

    private RenderFragment? JsonBox()
        => Disabled ? null : @<CipherJsonCheck JsonValue="@JsonRequest" Visible="@Constants.CheckJsons" />;

    private FilterType GetFilterType(CipherField field)
    {
        Type type = field.FieldType;
        if (typeof(bool?).IsAssignableFrom(field.FieldType)) return FilterType.Condition;
        if (typeof(DateTime?).IsAssignableFrom(field.FieldType)) return FilterType.Date;
        if (typeof(decimal?).IsAssignableFrom(field.FieldType)) return FilterType.Number;
        if (typeof(string).IsAssignableFrom(field.FieldType)) return FilterType.Text;
        if (field.IsList()) return GetFilterType(new CipherField() { FieldType = field.ItemType() });
        else return FilterType.Other;
    }

    private string? GetDefaultValue(FilterType type)
    {
        if (type == FilterType.Text) return null;
        if (type == FilterType.Date) return DateTime.Now.ToString();
        if (type == FilterType.Condition) return false.ToString();
        if (type == FilterType.Number) return "0";
        return null;
    }

    private RenderFragment AttributeDropDown(CompositeFilterDescriptor context)
    {
        return
    @<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center"
                      AlignItems="AlignItems.Center">
        <div style="width:100%">
            <CipherPathChooser Path="@GetName(context)" InitialType="@InitialType"
                               PathChanged="@(value => {
                CipherField field = value.Item2;
                ChangeProperty(context, update_name:true, update_value: true, update_islist: true, update_type: true, update_operator:true,
                    update_relation: true, name: value.Item1, isList: value.Item3,  filterType: GetFilterType(field));})" />
        </div>
        @RelationDropDown(context)
        @if (!IsCheckingNullOrEmpty(context))
        {
            @ValueFiller(context)
        }
    </RadzenStack>
        ;
    }

    private RenderFragment? RelationDropDown(CompositeFilterDescriptor context)
    {
        FilterType filterType = GetFilterType(context);
        List<string> filters = new();

        if (filterType == FilterType.Number) filters = CipherField.NumberFilters;
        if (filterType == FilterType.Date) filters = CipherField.DateFilters;
        if (filterType == FilterType.Condition) filters = CipherField.BoolFilters;
        if (filterType == FilterType.Text) filters = CipherField.TextFilters;

        filters = filters.Select(x => Translate(x)).ToList();

        // SET DEFAULT VALUE
        string defaultValue = GetRelation(context) ?? Translate(nameof(FilterOperator.Equals));

        if (!filters.Any()) return null;

        return
    @<RadzenDropDown TValue=string Data="@filters" Value="@defaultValue" Style="@($"min-width:{Constants.StandardWidth}; max-width:{Constants.StandardWidth}")"
                    Change="@(args=> ChangeProperty(context, update_relation:true, relation:args.ToString()))" />
        ;
    }

    private RenderFragment NumberFiller(CompositeFilterDescriptor context)
    {
        string val = GetValue(context) ?? string.Empty;
        if (string.IsNullOrEmpty(val)) val = "0";
        return
        @<RadzenNumeric TValue="decimal" Value="@(decimal.Parse(val))" Style="@($"width:100%; min-width:{Constants.StandardWidth}")"
                   ValueChanged="@(value => ChangeProperty(context, update_value:true, value: value.ToString()))" />
        ;
    }

    private RenderFragment DateFiller(CompositeFilterDescriptor context)
    {
        string val = GetValue(context) ?? string.Empty;
        DateTime? date = DateTime.TryParse(val, out _) ? DateTime.Parse(val) : null;
        return
        @<RadzenDatePicker TValue="DateTime" Value="@date" Style="@($"width:100%; min-width:{Constants.StandardWidth}")"
        ValueChanged="@(value => ChangeProperty(context, update_value:true, value: value.ToString()))" ShowTime="true" ShowTimeOkButton="true" />
    ;
    }

    private RenderFragment ConditionFiller(CompositeFilterDescriptor context)
    {
        string val = GetValue(context) ?? string.Empty;
        if (string.IsNullOrEmpty(val)) val = false.ToString();

        return
        @<RadzenToggleButton Value="@(bool.Parse(val))" Style="display:flex; justify-content:end"
                        ValueChanged="@(value => ChangeProperty(context, update_value:true, value: value.ToString()))"
                        Text="@(val == false.ToString() ? "לא" : "כן" )"
                        ButtonStyle="ButtonStyle.Danger" Disabled="@Disabled"
                        ToggleButtonStyle="ButtonStyle.Success" />
        ;
    }

    private RenderFragment TextFiller(CompositeFilterDescriptor context)
    {
        string? val = GetValue(context);

        return
    @<RadzenTextBox Disabled="@Disabled" Style="@($"width:100%; min-width:{Constants.StandardWidth}")"
                   Value="@GetValue(context)"
                   ValueChanged="@(value => ChangeProperty(context, update_value:true,value:value))" />
        ;
    }

    private RenderFragment? ValueFiller(CompositeFilterDescriptor context)
    {
        FilterType filterType = GetFilterType(context);

        if (filterType == FilterType.Number) return NumberFiller(context);
        if (filterType == FilterType.Date) return DateFiller(context);
        if (filterType == FilterType.Condition) return ConditionFiller(context);
        if (filterType == FilterType.Text) return TextFiller(context);

        return null;
    }

    private RenderFragment? OperatorDropDown(CompositeFilterDescriptor context)
    {
        if (!GetIsList(context) || GetFilterType(context) == FilterType.Other) return null;

        return
    @<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right"
                      AlignItems="AlignItems.Center">
        <RadzenIcon Icon="@Icons.Arrows.Circled.arrow_circle_left" IconColor="@Colors.PrimaryDark" />
        <RadzenDropDown Style="@FixedWidth()" TValue="Operator" Disabled="@Disabled"
                        Value="@(GetOperator(context))"
                        ValueChanged="@(value => ChangeProperty(context, update_operator:true, _operator:value))"
                        Data="@(new List<Operator>() {Operator.Any, Operator.All})" Placeholder="אופרטור">
            <ValueTemplate Context="operator_value_context">
                @if (operator_value_context == Operator.All)
                {
                    @(
                        "כל האיברים"
                            )
                }
                else
                {
                    @(
                        "לפחות אחד"
                            )
                }
            </ValueTemplate>
            <Template Context="operator_context">
                @if (operator_context == Operator.All)
                {
                    @(
                        "כל האיברים"
                            )
                }
                else
                {
                    @(
                        "לפחות אחד"
                            )
                }
            </Template>
        </RadzenDropDown>
    </RadzenStack>;
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible">
    <Buttons>
        @RefreshBtn()
    </Buttons>
    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical" Gap="10px">
            <RadzenDataFilter TItem="CipherField" @ref=dataFilter Data="@(new List<CipherField>())"
                              ViewChanged="@(async args => {await ParamsChanged(args);})" Auto=true
                              RemoveFilterText="@Translate("RemoveFilter")"
                              AddFilterText="@Translate("AddFilter")"
                              AddFilterGroupText="@Translate("AddFilterGroup")"
                              ClearFilterText="@Translate("ClearFilter")"
                              ApplyFilterText="@Translate("ApplyFilter")"
                              FilterText="@Translate("Filter")"
                              AndOperatorText="@Translate("AndOperator")"
                              OrOperatorText="@Translate("OrOperator")">
                <Properties>
                    <RadzenDataFilterProperty TItem="CipherField" Property="" Title="">
                        <FilterTemplate>
                            @if (context != null)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right"
                                             AlignItems="AlignItems.Center" Style="width:100%">
                                    @AttributeDropDown(context)
                                    @OperatorDropDown(context)
                                </RadzenStack>
                            }
                        </FilterTemplate>
                    </RadzenDataFilterProperty>
                </Properties>
            </RadzenDataFilter>
            @JsonBox()
        </RadzenStack>
    </ChildContent>
</CipherComponentCard>