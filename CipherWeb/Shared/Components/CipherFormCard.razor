@inherits RadzenCard

@if (WithCard)
{
    <RadzenCard Variant="@Constants.Card.Variant" Style="@CardStyle()" Visible="@Visible">
        <RadzenStack Gap="@Gap" JustifyContent="JustifyContent.Center">
            @ChildContent
        </RadzenStack>
    </RadzenCard>
}
else
{
    <RadzenStack Gap="@Gap" JustifyContent="JustifyContent.Center" Style="@($"width: {Width}; max-width:{MaxWidth}")" >
        @ChildContent
    </RadzenStack>
}

@code{
    [Parameter]
    public bool WithCard { get; set; } = true;

    [Parameter]
    public string BackgroundColor { get; set; } = "var(--cipher-header-background-color)";

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string MaxWidth { get; set; } = "100%";

    [Parameter]
    public string MaxHeigth { get; set; } = "800px";

    [Parameter]
    public string Float { get; set; } = "right";

    [Parameter]
    public string Gap { get; set; } = "0.2rem";

    [Parameter]
    public string MarginTop { get; set; }

    [Parameter]
    public string MarginBottom { get; set; } = "20px";

    [Parameter]
    public string MarginRight { get; set; }

    [Parameter]
    public string MarginLeft { get; set; }

    [Parameter]
    public string Padding { get; set; } = "10px";

    public string CardStyle()
    {
        return $@"
            background-color: {BackgroundColor}; 
            width: {Width}; 
            max-width: {MaxWidth}; 
            float: {Float};
            height: {Height};
            max-height: {MaxHeigth};
            margin-top: {MarginTop};
            margin-bottom: {MarginBottom};
            margin-right: {MarginRight};
            margin-left: {MarginLeft};
            padding: {Padding};
        ";
    }
}