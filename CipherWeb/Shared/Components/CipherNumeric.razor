@using System.Text.RegularExpressions;

@code {
    [Parameter]
    public string Width { get; set; } = "300px";

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Popup { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public bool ShowErrors { get; set; } = true;

    //

    private decimal _value;

    [Parameter]
    public decimal Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<decimal> ValueChanged { get; set; }

    // LENGTH VALIDATOR

    [Parameter]
    public int Min { get; set; } = 0;

    [Parameter]
    public int Max { get; set; } = int.MaxValue;

    // REQUIRED VALIDATOR
    [Parameter]
    public bool Required { get; set; } = true;

    class Model
    {
        public decimal value = 0;
    }

    Model model = new Model() {};
    RadzenRequiredValidator RequiredValidator = new RadzenRequiredValidator();

    public bool Check()
    {
        // required Validator
        return RequiredValidator.IsValid;
    }


    private void OnValueChanged(decimal value)
    {
        model.value = value;
        Value = value; // Update the Value parameter
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        model.value = Value; // Initialize model's value with the parameter value
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (parameters.TryGetValue<decimal>(nameof(Value), out var newValue))
        {
            model.value = newValue; // Synchronize model's value with the new parameter value
        }
    }
}


<RadzenTemplateForm TItem="Model" Data=@model >
    <RadzenStack Orientation="Orientation.Vertical" Gap="0" Style="padding-bottom:5px">

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="5px">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <style>
                    .rz-messages-error {
                        display: flex;
                        font-size: small;
                        padding-right: 2.5rem;
                    }
                </style>
                <RadzenIcon Icon="@Icon" IconColor="@Colors.PrimaryDark" Style="font-size: xx-large;" />
            }
            @if(string.IsNullOrEmpty(Label))
            {
                <RadzenNumeric @bind-Value=@model.value Name="value" Format="@Style" Disabled="@Disabled" 
                Change="@(EventCallback.Factory.Create<decimal>(this, OnValueChanged))" />
            }
            else
            {
            <RadzenFormField Variant=Variant.Flat Text="@Label" Style="@($"width:{Width};")">
                <RadzenNumeric Name="value" Min="@Min" Max="Max" @bind-Value=@model.value Format="@Style" Disabled="@Disabled" 
                Change="@(EventCallback.Factory.Create<decimal>(this, OnValueChanged))" />
            </RadzenFormField>
            }
        </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical">
        @if (Required)
        {
            <RadzenRequiredValidator @ref="RequiredValidator" Component="value" Text="שדה חובה" Popup=@Popup />
        }
    </RadzenStack>      
    </RadzenStack>
</RadzenTemplateForm>