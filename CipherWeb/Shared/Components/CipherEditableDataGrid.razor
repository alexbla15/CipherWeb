@using Radzen
@typeparam TItem

<RadzenDataGrid @ref="CustomDataGrid" Data="@Data" TItem="TItem" AllowColumnResize="true">
    <!-- Always present DeleteRow column -->
    <RadzenDataGridColumn Width="10%" TItem="TItem" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@(TdTextAlign)">
        <Template Context="item">
            <CipherDeleteButton Variant="Variant.Outlined" Click="@(async args => await OnDelete.InvokeAsync(item))" @onclick:stopPropagation="true" />
        </Template>
    </RadzenDataGridColumn>

    <!-- Always present Id column -->
    <RadzenDataGridColumn TItem="TItem" Property="Id" Title="#" Width="10%" SortOrder="SortOrder.Ascending" TextAlign="@(TdTextAlign)" />

    <!-- Dynamic columns -->
    @foreach (var column in DynamicColumns)
    {
        <RadzenDataGridColumn TItem="TItem" Property="@column.Property" Title="@column.Title" Width="@column.Width" TextAlign="@(TdTextAlign)">
            <Template Context="item">
                <RadzenTextBox Value="@column.Property"></RadzenTextBox>
                @*<CipherAutoComplete @bind-Value="@(GetPropertyValue(item, column.Property))" />*@
            </Template>
        </RadzenDataGridColumn>
    }
</RadzenDataGrid>

@code {
    [Parameter] public List<TItem> Data { get; set; }
    [Parameter] public List<DynamicColumn> DynamicColumns { get; set; }
    [Parameter] public TextAlign TdTextAlign { get; set; } = TextAlign.Right;
    [Parameter] public EventCallback<TItem> OnDelete { get; set; }

    private RadzenDataGrid<TItem> CustomDataGrid;

    public class DynamicColumn
    {
        public string Property { get; set; }
        public string Title { get; set; }
        public string Width { get; set; }
    }

    private string GetPropertyValue(TItem item, string propertyName)
    {
        var property = typeof(TItem).GetProperty(propertyName);
        return property != null ? property.GetValue(item)?.ToString() : string.Empty;
    }
}
