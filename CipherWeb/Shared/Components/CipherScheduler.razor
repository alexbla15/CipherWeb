@using System;
@using CipherData.Models.Randomizers;

@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ICipherInfo _db

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender dir="ltr"
                 style="@SchedulerStyle()" TItem="IProcess" AppointmentSelect="@SelectProcess"
                 Data=@Processes StartProperty="Start" EndProperty="End" AppointmentMouseEnter=@OnProcessMouseEnter AppointmentMouseLeave=@OnProcessMouseLeave
                 TextProperty="Id" SelectedIndex="2" AppointmentRender=@OnProcessRender TodayText="היום">
    <CipherDayView StartTime="@startTime" EndTime="@endTime" TimeFormat="h tt" />
    <CipherWeekView StartTime="@startTime" EndTime="@endTime" />
    <CipherMonthView MoreText="תהליכים נוספים" MaxAppointmentsInSlot="@EventsInSlot" />
    <CipherYearPlannerView />
</RadzenScheduler>


@code {
    /// <summary>
    /// Scheduler's height.
    /// </summary>
    [Parameter]
    public string Height { get; set; } = "400px";

    /// <summary>
    /// Scheduler's maximal height.
    /// </summary>
    [Parameter]
    public string MaxHeight { get; set; } = "400px";

    /// <summary>
    /// Scheduler's minimal height.
    /// </summary>
    [Parameter]
    public string MinHeight { get; set; } = "400px";

    /// <summary>
    /// Text alignment of event in a scheduler.
    /// </summary>
    [Parameter]
    public string TextAlign { get; set; } = "left";

    /// <summary>
    /// Text color of an event slot within a month / week / day view.
    /// </summary>
    [Parameter]
    public string EventTextColor { get; set; } = "black";

    /// <summary>
    /// Title of event-dialog which opens upon clicking an event.
    /// </summary>
    [Parameter]
    public string EventDialogTitle { get; set; } = "תנועה";

    /// <summary>
    /// Starting time of day / week view.
    /// </summary>
    [Parameter]
    public TimeSpan startTime { get; set; } = new TimeSpan(0, 0, 0);

    /// <summary>
    /// Ending time of day / week view.
    /// </summary>
    [Parameter]
    public TimeSpan endTime { get; set; } = new TimeSpan(23, 59, 59);

    /// <summary>
    /// Starting time of a working day within a week / day view.
    /// </summary>
    [Parameter]
    public int StartHour { get; set; } = 8;

    /// <summary>
    /// Ending time of a working day within a week / day view.
    /// </summary>
    [Parameter]
    public int EndHour { get; set; } = 16;

    /// <summary>
    /// Maximal amount of events visible in a month's view slot. Others are accesable using a More-button.
    /// </summary>
    [Parameter]
    public int EventsInSlot { get; set; } = 2;

    /// <summary>
    /// Controls location of a tooltip when hovering on an event. Must be a TooltipPosition-enum.
    /// </summary>
    [Parameter]
    public TooltipPosition EventTooltipPosition { get; set; } = TooltipPosition.Bottom;

    /// <summary>
    /// Schudler events are set by selected system.
    /// </summary>
    [Parameter]
    public string SelectedSystem { get; set; } = string.Empty;

    /// <summary>
    /// All events for scheduler
    /// </summary>
    [Parameter]
    public List<IProcess> Processes { get; set; } = new();

    private RadzenScheduler<IProcess> scheduler = new();

    private Dictionary<string, string> ProcessColoring = new()
            {
                [RandomProcessDefinition.ProcessesNames[0]] = Colors.Primary,
                [RandomProcessDefinition.ProcessesNames[1]] = Colors.Danger,
                [RandomProcessDefinition.ProcessesNames[2]] = Colors.Success
            };

    private string SchedulerStyle()
    {
        return $@"
            height: {Height};
            min-height: {MinHeight};
            ";
    }

    /// <summary>
    /// Change slot's appearane in each view, according to set of rules.
    /// </summary>
    /// <param name="args"></param>
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if ((args.View.Text == "חודש") && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = $"background: {Colors.PrimaryLighter};";
        }

        // change-view of days outside this month
        if ((args.View.Text == "חודש") && (args.Start.Date.Month < DateTime.Today.Month || args.Start.Date.Month > DateTime.Today.Month))
        {
            args.Attributes["style"] = $"color: lightgray;";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "שבוע" || args.View.Text == "יום") && args.Start.Hour > StartHour && args.Start.Hour < EndHour)
        {
            args.Attributes["style"] = $"background: {Colors.PrimaryLighter};";
        }
    }

    /// <summary>
    /// Controls the appearance of each event within a certain view.
    /// </summary>
    /// <param name="args"></param>
    void OnProcessRender(SchedulerAppointmentRenderEventArgs<IProcess> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        args.Attributes["style"] = $"background: {Colors.Primary};";

        foreach (string proc in ProcessColoring.Keys)
        {
            if (args.Data.Definition.Name == proc)
            {
                args.Attributes["style"] = $@"
                    background: {ProcessColoring[proc]};
                    color: {EventTextColor};
                    text-align: {TextAlign}";
            }
        }
    }

    /// <summary>
    /// Opens a dialog with extra details of an event upon clicking on it.
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    async Task SelectProcess(SchedulerAppointmentSelectEventArgs<IProcess> args)
    {
        await DialogService.OpenAsync(EventDialogTitle,

        ds =>
    @<CipherProcessCard dir="rtl" WithCard=false ReadOnly=false></CipherProcessCard>,
    Constants.SetDialogOptions);
    }

    /// <summary>
    /// Shows a tooltip upon hovering on an event.
    /// </summary>
    /// <param name="args"></param>
    void OnProcessMouseEnter(SchedulerAppointmentMouseEventArgs<IProcess> args)
    {
        TooltipService.Open(args.Element, ts =>
    @<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start"
                      Style="min-width: 250px; max-width: 500px;" dir="rtl" Gap="0">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center" Gap="0px">
            <CipherText Text="שם תהליך:" Bold="false" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);width: 44px;" />
            <CipherText Text="סוג:" Bold="false" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);width: 44px;" />
            <CipherText Text="שלבים שנותרו:" Bold="false" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);width: 44px;" />
            <CipherText Text="תאריך התחלה:" Bold="false" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);width: 44px;" />
            <CipherText Text="תאריך סיום:" Bold="false" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);width: 44px;" />
            <CipherText Text="משך:" Bold="false" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);width: 44px;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center" Gap="0px">
            <CipherText Text="@args.Data.Id" Bold="true" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);" />
            <CipherText Text="@args.Data.Definition.Name.ToString()" Bold="true" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);" />
            <CipherText Text="@string.Join(", ",args.Data.UncompletedSteps.Select(x=>x.Name).ToHashSet())" Bold="true" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);" />
            <CipherText Text="@args.Data.Start.ToString()" Bold="true" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);" />
            <CipherText Text="@args.Data.End.ToString()" Bold="true" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);" />
            <CipherText Text="@(args.Data.Duration())" Bold="true" TextStyle="TextStyle.Body1" Color="var(--rz-tooltip-color);" />
        </RadzenStack>
    </RadzenStack>
    , new TooltipOptions { Position = EventTooltipPosition, Duration = null, Style = $"background-color: {Colors.PrimaryDark};" });
    }

    /// <summary>
    /// Closes tooltip at the end of the hovering on an event.
    /// </summary>
    void OnProcessMouseLeave(SchedulerAppointmentMouseEventArgs<IProcess> args) => TooltipService.Close();

}
