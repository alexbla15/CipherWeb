@code {
    public class IconInfo
    {
        public string IconName { get; set; }
        public string SubClass { get; set; }
        public string MainClass { get; set; }
    }

    public List<IconInfo> GetIcons()
    {
        var icons = new List<IconInfo>();

        // Get the Icons type
        var iconsType = typeof(Icons);

        // Traverse all nested types (Main classes)
        foreach (var mainClass in iconsType.GetNestedTypes())
        {
            // Traverse all members (fields/properties) in the main class
            foreach (var member in mainClass.GetFields())
            {
                // If it's a constant (which represents an icon name)
                if (member.IsLiteral && !member.IsInitOnly)
                {
                    icons.Add(new IconInfo
                        {
                            IconName = (string)member.GetRawConstantValue(),
                            SubClass = "",
                            MainClass = mainClass.Name
                        });
                }
            }

            // Traverse sub-classes
            foreach (var subClass in mainClass.GetNestedTypes())
            {
                foreach (var member in subClass.GetFields())
                {
                    if (member.IsLiteral && !member.IsInitOnly)
                    {
                        icons.Add(new IconInfo
                            {
                                IconName = (string)member.GetRawConstantValue(),
                                SubClass = subClass.Name,
                                MainClass = mainClass.Name
                            });
                    }
                }
            }
        }

        return icons;
    }

    private List<IconInfo> icons;

    private string searchText;

    protected override void OnInitialized()
    {
        icons = GetIcons();
    }

    public void ChangeSearchText()
    {
        icons = GetIcons();
        icons = icons.Where(x => x.IconName.Contains(searchText)).ToList();
        StateHasChanged();
    }
}

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start" Style="padding-bottom:20px">
    <CipherAutoComplete @bind-Value=searchText></CipherAutoComplete>
<CipherButton Icon="@Icons.Arrows.Swap.Cached" Click="ChangeSearchText"></CipherButton>
</RadzenStack>

<RadzenAccordion>
    <Items>
        @foreach (string main in icons.Select(x => x.MainClass).Distinct().ToList())
        {
            <RadzenAccordionItem Text="@main">
                @foreach (string sub in icons.Where(x => x.MainClass == main).Select(x => x.SubClass).Distinct())
                {
                    <RadzenAccordion Style="flex-direction:column">
                        <Items>
                            <RadzenAccordionItem Text="@sub">
                                @foreach (string ic in icons.Where(x => x.MainClass == main && x.SubClass == sub).Select(x => x.IconName))
                                {
                                    <CipherComponentCard ContentDisplay="flex" ContentJustify="center" ContentFlexWrap="wrap" Width="200px">
                                        <CipherButton Icon="@ic" Variant="Variant.Text" Disabled="true" />
                                        <CipherText Text="@ic.Replace("_"," ")" TextAlign="TextAlign.Center" Wrap="true" />
                                    </CipherComponentCard>
                                }
                            </RadzenAccordionItem>
                        </Items>
                    </RadzenAccordion>
                }
            </RadzenAccordionItem>
        }
    </Items>
</RadzenAccordion>