@code {
    public class IconInfo
    {
        public string IconName { get; set; } = string.Empty;
        public string MainClass { get; set; } = string.Empty;
        public string SubClass { get; set; } = string.Empty;
        public string ThirdClass { get; set; } = string.Empty;
    }

    public List<IconInfo> GetIcons()
    {
        var icons = new List<IconInfo>();
        var iconsType = typeof(Icons);

        foreach (var mainClass in iconsType.GetNestedTypes())
        {
            foreach (var member in mainClass.GetFields())
            {
                if (member.IsLiteral && !member.IsInitOnly)
                {
                    icons.Add(new IconInfo
                        {
                            IconName = (string)member.GetRawConstantValue(),
                            SubClass = "",
                            MainClass = mainClass.Name,
                            ThirdClass = ""
                        });
                }
            }

            foreach (var subClass in mainClass.GetNestedTypes())
            {
                foreach (var member in subClass.GetFields())
                {
                    if (member.IsLiteral && !member.IsInitOnly)
                    {
                        icons.Add(new IconInfo
                            {
                                IconName = (string)member.GetRawConstantValue(),
                                SubClass = subClass.Name,
                                MainClass = mainClass.Name,
                                ThirdClass = ""
                            });
                    }
                }

                foreach (var thirdClass in subClass.GetNestedTypes())
                {
                    foreach (var member in thirdClass.GetFields())
                    {
                        if (member.IsLiteral && !member.IsInitOnly)
                        {
                            icons.Add(new IconInfo
                                {
                                    IconName = (string)member.GetRawConstantValue(),
                                    SubClass = subClass.Name,
                                    MainClass = mainClass.Name,
                                    ThirdClass = thirdClass.Name  // Populate ThirdClass
                                });
                        }
                    }
                }
            }
        }

        return icons;
    }

    private List<IconInfo> icons = new();

    private string searchText = string.Empty;

    protected override void OnInitialized() => icons = GetIcons();

    public void ChangeSearchText()
    {
        icons = GetIcons();
        icons = icons.Where(x => x.IconName.Contains(searchText)).ToList();
        StateHasChanged();
    }
}

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start" Style="padding-bottom:20px">
    <CipherAutoComplete @bind-Value=searchText></CipherAutoComplete>
    <CipherButton Icon="@Icons.Arrows.Swap.cached" Click="ChangeSearchText"></CipherButton>
</RadzenStack>

<RadzenAccordion>
    <Items>
        @foreach (string main in icons.Select(x => x.MainClass).Distinct().ToList())
        {
            <RadzenAccordionItem Text="@main">
                @foreach (string sub in icons.Where(x => x.MainClass == main).Select(x => x.SubClass).Distinct())
                {
                    <RadzenAccordion Style="flex-direction:column">
                        <Items>
                            <RadzenAccordionItem Text="@sub">
                                @{
                                    var thirdClasses = icons.Where(x => x.MainClass == main && x.SubClass == sub)
                                    .Select(x => x.ThirdClass)
                                    .Distinct()
                                    .ToList();
                                }
                                @if (thirdClasses.Any(x=> !string.IsNullOrEmpty(x)))
                                {
                                    <RadzenAccordion Style="flex-direction:column">
                                        <Items>
                                            @foreach (string third in thirdClasses)
                                            {
                                                <RadzenAccordionItem Text="@third">
                                                    @foreach (string ic in icons.Where(x => x.MainClass == main && x.SubClass == sub && x.ThirdClass == third).Select(x => x.IconName))
                                                    {
                                                        <CipherComponentCard ContentDisplay="flex" ContentJustify="center" ContentFlexWrap="wrap" Width="200px">
                                                            <CipherButton Icon="@ic" Variant="Variant.Text" Disabled="true" />
                                                            <CipherText Text="@ic.Replace("_", " ")" TextAlign="TextAlign.Center" Wrap="true" />
                                                        </CipherComponentCard>
                                                    }
                                                </RadzenAccordionItem>
                                            }
                                        </Items>
                                    </RadzenAccordion>
                                }
                                else
                                {
                                    @foreach (string ic in icons.Where(x => x.MainClass == main && x.SubClass == sub).Select(x => x.IconName))
                                    {
                                        <CipherComponentCard ContentDisplay="flex" ContentJustify="center" ContentFlexWrap="wrap" Width="200px">
                                            <CipherButton Icon="@ic" Variant="Variant.Text" Disabled="true" />
                                            <CipherText Text="@ic.Replace("_", " ")" TextAlign="TextAlign.Center" Wrap="true" />
                                        </CipherComponentCard>
                                    }

                                }

                            </RadzenAccordionItem>
                        </Items>
                    </RadzenAccordion>
                }
            </RadzenAccordionItem>
        }
    </Items>
</RadzenAccordion>