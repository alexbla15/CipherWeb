@inherits RadzenStack

<RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
             Style="@($"padding-bottom:{PaddingBottom}; padding-top:{PaddingTop}; padding-right:{PaddingRight}; padding-left:{PaddingLeft}")">
    @foreach (MyMenuItem item in items)
    {
        <CipherNavButton Icon="@item.Icon" Text="@item.Title" Width="@ButtonWidth()" Path="@item.Href" ColorShade="@ColorShade" ColorStyle="@ColorStyle" />
    }
</RadzenStack>

@code {
    /// <summary>
    /// Space outside the buttons, inside the component. (Bottom)
    /// </summary>
    [Parameter]
    public string PaddingBottom { get; set; } = "20px";

    /// <summary>
    /// Space outside the buttons, inside the component. (Top)
    /// </summary>
    [Parameter]
    public string PaddingTop { get; set; }

    /// <summary>
    /// Space outside the buttons, inside the component. (Right)
    /// </summary>
    [Parameter]
    public string PaddingRight { get; set; }

    /// <summary>
    /// Space outside the buttons, inside the component. (Left)
    /// </summary>
    [Parameter]
    public string PaddingLeft { get; set; }

    /// <summary>
    /// Shade of buttons. Must be a Shade-enum.
    /// </summary>
    [Parameter]
    public Shade ColorShade { get; set; } = Shade.Darker;

    /// <summary>
    /// Background-color scheme of buttons. Must be a ButtonStyle-enum.
    /// </summary>
    [Parameter]
    public ButtonStyle ColorStyle { get; set; } = ButtonStyle.Primary;

    /// <summary>
    /// Buttons' content.
    /// </summary>
    [Parameter]
    public List<MyMenuItem> items { get; set; } = new List<MyMenuItem>()
    {
        new MyMenuItem(){
            Title="סיכום", Icon=Icons.Summary, Href=CipherNavLinks.ProcessesReport.Href
        },
        new MyMenuItem(){
            Title="חיפוש", Icon=Icons.Search, Href=CipherNavLinks.AdvancedSearch.Href
        },
        new MyMenuItem(){
            Title="דוחות", Icon=Icons.Document, Href=CipherNavLinks.Reports.Href
        }
    };

    /// <summary>
    /// Width of each button.
    /// </summary>
    /// <returns></returns>
    public string ButtonWidth()
    {
        return $"{(100 / items.Count)}%";
    }
}