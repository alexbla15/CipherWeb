@inherits CipherComponentCard

@code {
    private Type _ComponentType = typeof(ICipherClass);
    private List<CipherField> _GroupFields = new();

    [Parameter]
    public Type ComponentType
    {
        get => _ComponentType;
        set
        {
            _ComponentType = value;
            _GroupFields = CipherField.GetFields(value);
        }
    }

    /// <summary>
    /// Max amount of grouping levels.
    /// </summary>
    [Parameter]
    public int maxGroupLevels { get; set; } = 9;

    /// <summary>
    /// Alert text for an empty group.
    /// </summary>
    [Parameter]
    public string EmptyGroupAlertText { get; set; } = "יש למלא את המקבץ הקודם לפני הוספת מקבץ חדש";

    /// <summary>
    /// Alert text for duplicity of groups.
    /// </summary>
    [Parameter]
    public string DuplicityGroupsAlertText { get; set; } = "אין לבחור 2 מקבצים זהים";

    /// <summary>
    /// Add group - text.
    /// </summary>
    [Parameter]
    public string AddGroupText { get; set; } = "הוספת מקבץ";
    /// <summary>
    /// Delete group - text.
    /// </summary>
    [Parameter]
    public string DeleteGroupText { get; set; } = "מחיקת מקבץ";

    /// <summary>
    /// User-chosen groups (place, property)
    /// </summary>
    [Parameter]
    public List<string> ChosenGroups { get; set; } = new();

    [Parameter]
    public EventCallback<List<string>> ChosenGroupsChanged { get; set; }

    private bool emptyGroupsAlertVisible = false;
    private bool limitedGroupsAlertVisible = false;
    private bool duplicityAlertVisible = false;
    private string? limitedGroupsAlertText;

    protected override void OnInitialized() => limitedGroupsAlertText = GetLimitedGroupsAlertText();

    /// <summary>
    /// Alert-text for reached limit of groups
    /// </summary>
    private string GetLimitedGroupsAlertText() => "ניתן לקבוע עד " + maxGroupLevels.ToString() + " מקבצים";

    /// <summary>
    /// Add a grouping parameter
    /// </summary>
    private async Task AddGroup()
    {
        if (!CheckForEmptyGroups())
        {
            if (!CheckMaxLevels())
            {
                if (!CheckDuplicity())
                {
                    ChosenGroups.Add(string.Empty);
                    StateHasChanged();
                }
            }
        }

        await GroupsChanged();
    }

    private bool CheckMaxLevels()
    {
        bool cond = ChosenGroups.Count >= maxGroupLevels;
        if (cond) limitedGroupsAlertVisible = true;
        return cond;
    }

    private bool CheckForEmptyGroups()
    {
        bool cond = ChosenGroups.Where(x => ChosenGroups.IndexOf(x) < ChosenGroups.Count).Any(x => string.IsNullOrEmpty(x));
        if (cond) emptyGroupsAlertVisible = true;
        return cond;
    }

    /// <summary>
    /// Validate if there are two identical groups.
    /// </summary>
    private bool CheckDuplicity()
    {
        bool cond = ChosenGroups.Distinct().Count() != ChosenGroups.Count;
        if (cond) duplicityAlertVisible = true;
        return cond;
    }

    private async Task ChangedValue(int index, string? val)
    {
        ChosenGroups[index] = val ?? string.Empty;
        await GroupsChanged();
    }

    /// <summary>
    /// Delete last-inserted group.
    /// </summary>
    private async Task DeleteGroup()
    {
        int groups = ChosenGroups.Count;
        bool cond = groups > 0;

        if (cond) ChosenGroups.RemoveAt(groups - 1);
        StateHasChanged();
        await GroupsChanged();
    }

    /// <summary>
    /// Close the current visible alert. Reset all alerts.
    /// </summary>
    private void CloseAlert()
    {
        emptyGroupsAlertVisible = false;
        limitedGroupsAlertVisible = false;
        duplicityAlertVisible = false;
    }

    async Task GroupsChanged() => await ChosenGroupsChanged.InvokeAsync(ChosenGroups); // Trigger change event

    private RenderFragment ControlButtons()
    =>
    @<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="5px">
        <CipherAddBtn Height="10px" Variant="Variant.Outlined" HelpText="@AddGroupText" Click="@AddGroup" ColorStyle="ButtonStyle.Success" ColorShade="Shade.Dark" />
        <CipherDeleteButton Height="10px" Variant="Variant.Outlined" HelpText="@DeleteGroupText" Click="@DeleteGroup" ColorStyle="ButtonStyle.Danger" ColorShade="Shade.Default" />
        </RadzenStack>
    ;

    private RenderFragment Alert(bool Visible, string? Text)
    =>
    @<RadzenAlert Visible="@Visible" Text="@Text" AlertStyle="AlertStyle.Danger" Close="@CloseAlert" />;
}

<CipherComponentCard Title="@Title">
    <ChildContent>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap" Style="padding-bottom:20px;" Gap="20px">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                @for (int i = 0 ; i< ChosenGroups.Count ; i++)
                {
                    int Index = i;
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="20px">
                        <CipherFormRow Icon="@($"filter_{Index+1}")">
                            <CipherPathChooser InitialType="@ComponentType" PathChanged="@(args=> ChangedValue(Index, args.Item1))" />
                        </CipherFormRow>
                        @if (Index+1 == ChosenGroups.Count)
                        {
                            @ControlButtons()
                            ;
                        }
                    </RadzenStack>
                }
                @if (!ChosenGroups.Any())
                {
                    @ControlButtons()
                }
            </RadzenStack>
        </RadzenStack>

        @Alert(emptyGroupsAlertVisible, EmptyGroupAlertText)
        @Alert(limitedGroupsAlertVisible, limitedGroupsAlertText)
        @Alert(duplicityAlertVisible, DuplicityGroupsAlertText)
    </ChildContent>
</CipherComponentCard>