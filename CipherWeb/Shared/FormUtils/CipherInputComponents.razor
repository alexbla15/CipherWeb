@inject DialogService DialogService

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    RadzenDataGrid<Package> CustomDataGrid;

    List<Package> from_packs = new List<Package>();
    Package old_pack = new Package();

    int components = 0;

    private void AddComponent()
    {
        if (components == from_packs.Count)
        {
            int next_id = components + 1;

            Package new_pack = new Package() { Id = next_id };

            // from_packs.Add(new_pack);

            components += 1;
            CustomDataGrid.InsertRow(new_pack);
        }
    }

    public decimal GetTotal()
    {
        decimal Total = 0;

        foreach (Package pack in from_packs)
        {
            Total += pack.BrutMass;
        }
        return Total;
    }


    async Task EditRow(Package pack)
    {
        // prevent editing of two rows in parallel
        if (CustomDataGrid.Count == from_packs.Count)
        {
            old_pack.Id = pack.Id;
            old_pack.BrutMass = pack.BrutMass;
            old_pack.SerialNumber = pack.SerialNumber;

            from_packs.Remove(pack);
            await CustomDataGrid.EditRow(pack);
        }
    }

    async Task CancelEdit(Package pack)
    {
        pack.Id = old_pack.Id;
        pack.BrutMass = old_pack.BrutMass;
        pack.SerialNumber = old_pack.SerialNumber;

        await SaveRow(pack);
    }

    async Task DeleteRow(Package pack)
    {
        from_packs.Remove(pack);

        foreach (Package p in from_packs)
        {
            p.Id = from_packs.IndexOf(p) + 1;
        }

        CustomDataGrid.Data = from_packs;

        components -= 1;
        await CustomDataGrid.RefreshDataAsync();
    }

    async Task DeleteAll()
    {
        from_packs = new List<Package>();
        components = 0;
        CustomDataGrid.Data = from_packs;

        await CustomDataGrid.RefreshDataAsync();
    }

    async Task SaveRow(Package pack)
    {
        from_packs.Add(pack);

        await CustomDataGrid.UpdateRow(pack);
        await CustomDataGrid.RefreshDataAsync();
    }
}

<CipherComponentCard Title="תעודות מוסרות">
    <Buttons>
        <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddComponent())" HelpText="הוספת תעודה מוסרת" />
        <CipherButton Icon="@Icons.DeleteSweep" Variant="Variant.Outlined" Click="@(args => DeleteAll())" HelpText="מחיקת תעודות" />
    </Buttons>

    <ChildContent>
        <RadzenDataGrid @ref="CustomDataGrid" Data="from_packs" TItem="Package" AllowColumnResize="true" Visible="!components.Equals(0)" >
            <Columns>
                <RadzenDataGridColumn TItem="Package" Property="Id" Title="#" Width="10%" SortOrder="SortOrder.Descending" TextAlign="@TdTextAlign" />
                <RadzenDataGridColumn TItem="Package" Property="SerialNumber" Title="תעודה" Width="37%" TextAlign="@TdTextAlign">
                        <EditTemplate Context="pack">
                            <CipherAutoComplete Data="TestedData.Packages" TextProperty="SerialNumber" @bind-Value="@pack.SerialNumber"  />
                        </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="BrutMass" Title="משקל מועבר [גר']" Width="37%" TextAlign="@TdTextAlign">
                    <EditTemplate Context="pack">
                        <CipherNumeric @bind-Value="@pack.BrutMass" />
                    </EditTemplate>
                    <FooterTemplate>
                        מסה כוללת: @GetTotal()
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="14%" TItem="Package" Context="pack" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                    <Template Context="pack">
                        <CipherEditButton Click="@(args => EditRow(pack))" @onclick:stopPropagation="true" />
                        <CipherDeleteButton Click="@(args => DeleteRow(pack))" @onclick:stopPropagation="true" />
                    </Template>
                    <EditTemplate Context="pack">
                        <CipherSuccessButton Click="@((args) => SaveRow(pack))" />
                        <CipherCloseButton Click="@((args) => CancelEdit(pack))" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </ChildContent>
</CipherComponentCard>