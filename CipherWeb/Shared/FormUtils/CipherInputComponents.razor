@inject DialogService DialogService

@inherits CipherComponentCard

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "במסך זה ניתן להוסיף תעודות מוסרות. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת תעודה מוסרת";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת תעודות";

    /// <summary>
    /// All packages available
    /// </summary>
    [Parameter]
    public List<IPackage> allPacks { get; set; } = new();

    /// <summary>
    /// All chosen packeges
    /// </summary>
    [Parameter]
    public List<IPackage> chosenPacks { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    private RadzenDataGrid<IPackage> CustomDataGrid = new();

    protected override void OnInitialized()
    {
        Title ??= "תעודות מוסרות";

        (allPacks, error) = CachedData.AllPackages;
    }

    /// <summary>
    /// Add a component to the memory.
    /// </summary>
    async Task AddComponent()
    {
        // Add the new restriction to the existing list
        chosenPacks.Add(new Package() { Id = "" });
        StateHasChanged();
        await CustomDataGrid.RefreshDataAsync();
    }

    /// <summary>
    /// Get total sum of masses of package-components.
    /// </summary>
    public decimal GetTotal() => chosenPacks.Sum(pack => pack.BrutMass);

    /// <summary>
    /// Deletes a package-component from memory & view.
    /// </summary>
    /// <param name="pack">Package to delete</param>
    async Task DeleteRow(IPackage pack)
    {
        chosenPacks.Remove(pack);
        await CustomDataGrid.RefreshDataAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Clears all package-components from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAll()
    {
        chosenPacks.Clear();
        await CustomDataGrid.RefreshDataAsync();
    }
}

<CipherComponentCard Title="@Title" Visible="@Visible">
    <Buttons>
        <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddComponent())" HelpText="@AddText" />
        <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" Variant="Variant.Outlined" Click="@(args => DeleteAll())" HelpText="@DeleteAllText" />
    </Buttons>
    <ChildContent>
        @if (chosenPacks.Count() == 0)
        {
            <CipherText Text="@HelpText" />
        }
        <RadzenDataGrid @ref="CustomDataGrid" Data="@chosenPacks" TItem="IPackage" AllowColumnResize="true" Visible="chosenPacks.Count() != 0">
            <Columns>
                <RadzenDataGridColumn Width="10%" TItem="IPackage" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                    <Template Context="pack">
                        <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteRow(pack))" @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="IPackage" Title="@(Package.Translate(nameof(IPackage.Id)))" Width="40%" TextAlign="@TdTextAlign">
                    <Template Context="pack">
                        @if (string.IsNullOrEmpty(pack.Id))
                        {
                            <CipherPackageId AllPacks="@allPacks" ChosenPackage="null" Change="@(args=>pack.Id = ((IPackage)args).Id)" />
                        }
                        else
                        {
                            <CipherPackageId AllPacks="@allPacks" ChosenPackage="pack" Change="@(args=>pack.Id = (args is null) ? string.Empty : ((IPackage)args).Id)" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="IPackage" Title="@(Package.Translate(nameof(IPackage.BrutMass)))" Width="40%" TextAlign="@TdTextAlign">
                    <Template Context="pack">
                        <CipherNumeric Width="100%" Amount="Package.Get(pack.Id).Item1.BrutMass" Disabled="true" Visible="@(!string.IsNullOrEmpty(pack.Id))" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="IPackage" Title="מסה ברוטו מועברת [גר']" Width="40%" TextAlign="@TdTextAlign">
                    <Template Context="pack">
                        <CipherNumeric @bind-Amount="pack.BrutMass" Width="100%" Max="Package.Get(pack.Id).Item1.BrutMass" Visible="@(!string.IsNullOrEmpty(pack.Id))" />
                    </Template>
                    <FooterTemplate>
                        מסה כוללת: @GetTotal()
                    </FooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </ChildContent>
</CipherComponentCard>