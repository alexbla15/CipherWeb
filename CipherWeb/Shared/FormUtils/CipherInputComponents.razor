@inject DialogService DialogService

@inherits CipherComponentCard

@code {
    [Parameter]
    public TextAlign TdTextAlign { get; set; } = TextAlign.Right;

    /// <summary>
    /// Text shown in case no rows were added.
    /// </summary>
    [Parameter]
    public string HelpText { get; set; } = "במסך זה ניתן להוסיף תעודות מוסרות. להוספה לחצו על כפתור ההוספה למעלה";

    /// <summary>
    /// Help text for add-button.
    /// </summary>
    [Parameter]
    public string AddText { get; set; } = "הוספת תעודה מוסרת";

    /// <summary>
    /// Help text for delete-all-button.
    /// </summary>
    [Parameter]
    public string DeleteAllText { get; set; } = "מחיקת תעודות";

    private RadzenDataGrid<Package> CustomDataGrid;
    private List<Package> from_packs = new List<Package>();
    private Package old_pack = new Package();

    private bool ShowHelpText = true;
    private int components = 0;

    protected override void OnInitialized()
    {
        Title ??= "תעודות מוסרות";
    }

    /// <summary>
    /// Add a component to the memory.
    /// </summary>
    private void AddComponent()
    {
        if (components == from_packs.Count)
        {
            Package new_pack = new Package() { Id = components + 1 };

            // from_packs.Add(new_pack);

            components += 1;
            CustomDataGrid.InsertRow(new_pack);

            ShowHelpText = false;
        }
    }

    /// <summary>
    /// Get total sum of masses of package-components.
    /// </summary>
    /// <returns></returns>
    public decimal GetTotal()
    {
        return from_packs.Sum(pack => pack.BrutMass);
    }


    /// <summary>
    /// Edits a package-component.
    /// </summary>
    /// <param name="pack"></param>
    /// <returns></returns>
    async Task EditRow(Package pack)
    {
        // prevent editing of two rows in parallel
        if (CustomDataGrid.Count == from_packs.Count)
        {
            old_pack = new Package
                {
                    Id = pack.Id,
                    BrutMass = pack.BrutMass,
                    SerialNumber = pack.SerialNumber
                };

            from_packs.Remove(pack);
            await CustomDataGrid.EditRow(pack);
        }
    }

    /// <summary>
    /// Cancels edit of a package-component.
    /// </summary>
    /// <param name="pack"></param>
    /// <returns></returns>
    async Task CancelEdit(Package pack)
    {
        pack.Id = old_pack.Id;
        pack.BrutMass = old_pack.BrutMass;
        pack.SerialNumber = old_pack.SerialNumber;

        await SaveRow(pack);
    }

    /// <summary>
    /// Deletes a package-component from memory & view.
    /// </summary>
    /// <param name="pack"></param>
    /// <returns></returns>
    async Task DeleteRow(Package pack)
    {
        from_packs.Remove(pack);

        // Reassign IDs after deletion
        for (int i = 0; i < from_packs.Count; i++)
        {
            from_packs[i].Id = i + 1;
        }

        CustomDataGrid.Data = from_packs;

        components--;

        await CustomDataGrid.RefreshDataAsync();

        if (from_packs.Count() == 0)
        {
            ShowHelpText = true;
        }
    }

    /// <summary>
    /// Clears all package-components from memory & view.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAll()
    {
        from_packs.Clear();
        components = 0;
        CustomDataGrid.Data = from_packs;

        await CustomDataGrid.RefreshDataAsync();

        ShowHelpText = true;
    }

    /// <summary>
    /// Saves a package-component to the memory.
    /// </summary>
    /// <param name="pack"></param>
    /// <returns></returns>
    async Task SaveRow(Package pack)
    {
        from_packs.Add(pack);

        await CustomDataGrid.UpdateRow(pack);
        await CustomDataGrid.RefreshDataAsync();
    }
}

<CipherComponentCard Title="@Title">
    <Buttons>
        <CipherAddBtn Variant="Variant.Outlined" Click="@(args => AddComponent())" HelpText="@AddText" />
        <CipherButton Icon="@Icons.DeleteSweep" Variant="Variant.Outlined" Click="@(args => DeleteAll())" HelpText="@DeleteAllText" />
    </Buttons>

    <ChildContent>

        @if (ShowHelpText)
        {
            <CipherText Text="@HelpText"></CipherText>
        }
        <RadzenDataGrid @ref="CustomDataGrid" Data="from_packs" TItem="Package" AllowColumnResize="true" Visible="!components.Equals(0)">
            <Columns>
                <RadzenDataGridColumn TItem="Package" Property="Id" Title="#" Width="10%" SortOrder="SortOrder.Descending" TextAlign="@TdTextAlign" />
                <RadzenDataGridColumn TItem="Package" Property="SerialNumber" Title="תעודה" Width="37%" TextAlign="@TdTextAlign">
                    <EditTemplate Context="pack">
                        <CipherAutoComplete Data="TestedData.Packages" TextProperty="SerialNumber" @bind-Value="@pack.SerialNumber" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Package" Property="BrutMass" Title="משקל מועבר [גר']" Width="37%" TextAlign="@TdTextAlign">
                    <EditTemplate Context="pack">
                        <CipherNumeric @bind-Value="@pack.BrutMass" />
                    </EditTemplate>
                    <FooterTemplate>
                        מסה כוללת: @GetTotal()
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="14%" TItem="Package" Context="pack" Title="פעולות" Filterable="false" Sortable="false" TextAlign="@TdTextAlign">
                    <Template Context="pack">
                        <CipherEditButton Variant=Variant.Outlined Click="@(args => EditRow(pack))" @onclick:stopPropagation="true" />
                        <CipherDeleteButton Variant=Variant.Outlined Click="@(args => DeleteRow(pack))" @onclick:stopPropagation="true" />
                    </Template>
                    <EditTemplate Context="pack">
                        <CipherSuccessButton Variant=Variant.Outlined Click="@((args) => SaveRow(pack))" />
                        <CipherCloseButton Variant=Variant.Outlined Click="@((args) => CancelEdit(pack))" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </ChildContent>
</CipherComponentCard>