@inherits CipherComponentCard

@code {
    /// <summary>
    /// Are fields not editable?
    /// </summary>
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    /// <summary>
    /// Is package info used for a new package or an existing one?
    /// </summary>
    [Parameter]
    public bool IsNew { get; set; } = false;

    /// <summary>
    /// Set Packge-object value.
    /// </summary>
    [Parameter]
    public Package pack { get; set; } = Package.Empty();

    /// <summary>
    /// Processes which can use the current package.
    /// </summary>
    [Parameter]
    public List<ProcessDefinition> DestinationProcesses { get; set; } = new();

    /// <summary>
    /// All optional vessels
    /// </summary>
    [Parameter]
    public List<Vessel> AllVessels { get; set; }

    /// <summary>
    /// Vessel which contains the package.
    /// </summary>
    [Parameter]
    public Vessel? ChosenVessel { get; set; }

    /// <summary>
    /// System which contains the package.
    /// </summary>
    [Parameter]
    public StorageSystem? ChosenSystem { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherAutoComplete packId = new();
    private CipherCategoryDropDown packCategory = new();
    private CipherLocation packLocation = new();
    private CipherVesselDropDown packVessel = new();
    private CipherComments PackDescription = new();
    private CipherPackageId ParentPackage = new();

    protected override void OnInitialized()
    {
        (AllVessels, Error) = CachedData.AllVessels;
    }

    public Package Value()
    {
        pack.Id = (packId.Check()) ? packId.Value : string.Empty;
        pack.Category = packCategory.ChosenCategory ?? Category.Empty();
        pack.System = ChosenSystem ?? StorageSystem.Empty();
        pack.Vessel = ChosenVessel;
        pack.Parent = ParentPackage.ChosenPackage;
        pack.Properties = pack.Category.Properties?.ToDictionary(x => x.Name, x => x.DefaultValue);

        return pack;
    }

    public void ChangedCategory()
    {
        DestinationProcesses = packCategory.ChosenCategory?.ConsumingProcesses.ToList() ?? new List<ProcessDefinition>();
    }

    public void ChangedVessel()
    {
        if (packVessel.ChosenVessel != null)
        {
            ChosenVessel = packVessel.ChosenVessel;
            ChosenSystem = packVessel.ChosenVessel.System;
        }
        else
        {
            ChosenVessel = null;
        }
    }

    public void ChangedSystem()
    {
        ChosenVessel = null;
        ChosenSystem = packLocation.ChosenSystem;

        (AllVessels, Error) = (packLocation.ChosenSystem is null)? Vessel.All() : StorageSystem.Vessels(packLocation.ChosenSystem.Id);
    }
}

<CipherComponentCard Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap" WithCard="@WithCard">
    <CipherAutoComplete Label="@Package.Translate(nameof(CachedData.PackageExample.Id))" Disabled="@ReadOnly" @ref="packId" Icon="@Icons.Cipher.Package" />
    <CipherCategoryDropDown Disabled="@ReadOnly" @ref="packCategory" Change="@ChangedCategory" />
    <CipherVesselDropDown Disabled="@ReadOnly" @ref="packVessel" AllVessels="@AllVessels" ChosenVessel="@ChosenVessel" Change="@ChangedVessel" />
    <CipherLocation Disabled="@ReadOnly" @ref="packLocation" ChosenSystem="@ChosenSystem" Change="@ChangedSystem" />
    <CipherPackageId Label="@Package.Translate(nameof(CachedData.PackageExample.Parent))" @ref=ParentPackage />
    @if (!IsNew)
    {
        <CipherComments @ref="PackDescription" Label="@Package.Translate(nameof(CachedData.PackageExample.Description))" Icon="@Icons.Documents.Page.Description" Width="300px" />
        <CipherNumeric Disabled="@ReadOnly" Label="@Package.Translate(nameof(CachedData.PackageExample.BrutMass))" Icon="@Icons.Professions.Construction.Scale" />
        <CipherNumeric Disabled="@ReadOnly" Label="@Package.Translate(nameof(CachedData.PackageExample.NetMass))" Icon="@Icons.Professions.Construction.Scale" />
        <CipherProcesses Label="@Package.Translate(nameof(CachedData.PackageExample.DestinationProcesses))" ChosenProcesses="@DestinationProcesses" />
    }

    @if (packCategory.ChosenCategory != null)
    {
        @foreach (CategoryProperty prop in packCategory.ChosenCategory.Properties)
        {
            <CipherAutoComplete Label="@prop.Name" Value="@prop.DefaultValue" Disabled="true"
                                Icon="@((prop.PropertyType == PropertyType.Text) ? Icons.Design.Colors.Draw : ((prop.PropertyType == PropertyType.Number) ? Icons.Cipher.Properties : Icons.Cipher.Rule))" />
        }
    }
</CipherComponentCard>