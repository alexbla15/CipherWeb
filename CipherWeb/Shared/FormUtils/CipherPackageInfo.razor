@inherits CipherComponentCard

@code {
    /// <summary>
    /// Are fields not editable?
    /// </summary>
    [Parameter]
    public bool ReadOnly { get; set; } = false;

    /// <summary>
    /// Is package info used for a new package or an existing one?
    /// </summary>
    [Parameter]
    public bool IsNew { get; set; } = false;

    /// <summary>
    /// Is new package an assembly of other packages? otherwise it must get partial mass from other packeges.
    /// </summary>
    [Parameter]
    public bool AssemblyOfPackages { get; set; } = false;

    /// <summary>
    /// Set Packge-object value.
    /// </summary>
    [Parameter]
    public IPackage ChosenPackage { get; set; } = Config.Package();

    /// <summary>
    /// Processes which can use the current package.
    /// </summary>
    [Parameter]
    public List<IProcessDefinition> DestinationProcesses { get; set; } = new();

    /// <summary>
    /// All optional vessels
    /// </summary>
    [Parameter]
    public List<IVessel>? AllVessels { get; set; }

    /// <summary>
    /// Vessel which contains the package.
    /// </summary>
    [Parameter]
    public IVessel? ChosenVessel { get; set; }

    /// <summary>
    /// Category of the package.
    /// </summary>
    [Parameter]
    public ICategory? ChosenCategory { get; set; }

    /// <summary>
    /// System which contains the package.
    /// </summary>
    [Parameter]
    public IStorageSystem? ChosenSystem { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    private CipherAutoComplete packId = new();
    private CipherCategoryDropDown packCategory = new();
    private CipherLocation packLocation = new();
    private CipherVesselDropDown packVessel = new();
    private CipherComments PackDescription = new();
    private CipherPackageId ParentPackage = new();
    private CipherPackageProperties PackProps = new();
    private CipherPackagesPicking InnerPacks = new();
    private CipherInputComponents InputPacks = new();

    private IPackage NewPackage = Config.Package(true);
    private List<IPackageProperty> ChosenProperties = new();

    protected override async Task OnInitializedAsync() => (AllVessels, Error) = await CachedData.AllVessels;

    public IPackage Value()
    {
        ChosenPackage.Id = packId.Value;
        ChosenPackage.Category = packCategory.ChosenCategory ?? Config.Category();
        ChosenPackage.System = ChosenSystem ?? Config.StorageSystem();
        ChosenPackage.Vessel = ChosenVessel;
        ChosenPackage.Parent = ParentPackage.ChosenPackage;
        ChosenPackage.Properties = PackProps.ChosenProperties?.Select(x => 
            { 
                var prop = Config.PackageProperty();
                prop.Name = x.Name;
                prop.Value = x.Value;
                return prop;
            }).ToList();
        ChosenPackage.Children = InnerPacks.SelectedPackages ?? new();

        return ChosenPackage;
    }

    public void ChangedCategory()
    {
        ChosenCategory = packCategory.ChosenCategory;
        DestinationProcesses = packCategory.ChosenCategory?.ConsumingProcesses.ToList() ?? new();
        ChosenProperties = ChosenCategory?.Properties?.Select(x => 
            { 
                IPackageProperty prop = Config.PackageProperty();
                prop.Name = x.Name;
                prop.Value = x.DefaultValue;
                return prop;
            }).ToList() ?? new List<IPackageProperty>();
        StateHasChanged();
        ChangeDetail();
    }

    public void ChangedVessel()
    {
        if (packVessel.ChosenVessel != null)
        {
            ChosenVessel = packVessel.ChosenVessel;
            ChosenSystem = packVessel.ChosenVessel.System;
        }
        else
        {
            ChosenVessel = null;
        }
        ChangeDetail();
    }

    public async Task ChangedSystem()
    {
        ChosenVessel = null;
        ChosenSystem = packLocation.ChosenSystem;

        if (packLocation.ChosenSystem is null)
        {
            (AllVessels, Error) = await CachedData.AllVessels;
        }
        else
        {
            var result = await Config.StorageSystem(false).Vessels(packLocation.ChosenSystem?.Id ?? string.Empty);
            (AllVessels, Error) = (result.Item1.Select(x => x as IVessel).ToList(), result.Item2);
        }
        ChangeDetail();
    }

    /// <summary>
    /// Once there are some inner packs, user cannot add
    /// </summary>
    private void ChangeView()
    {
        AssemblyOfPackages = (InnerPacks.SelectedPackages is null) ? false : (InnerPacks.SelectedPackages.Count() > 0);

        ChangeDetail();
    }

    /// <summary>
    /// choosing relevant packages for calculation of mass
    /// </summary>
    /// <param name="pack">Relevant package</param>
    public decimal GetBrutMass(IPackage pack)
    {
        List<IPackage>? RelevantPackages = AssemblyOfPackages ? pack.Children?.ToList() : InputPacks.ChosenPacks;
        return RelevantPackages?.Select(x => x.BrutMass).Sum() ?? 0;
    }

    public void SetNewPackage()
    {
        NewPackage = Value();

        // choosing relevant packages for calculation of mass
        NewPackage.BrutMass = GetBrutMass(NewPackage);
        NewPackage.NetMass = NewPackage.BrutMass * NewPackage.Concentration;
    }

    /// <summary>
    /// Get all the package requests of packages that were changed in this event.
    /// </summary>
    public List<IPackageRequest> GetChangedPacks()
    {
        SetNewPackage();

        List<IPackageRequest> ChangedPacks = new() { NewPackage.Request() };

        if (!AssemblyOfPackages)
        {
            foreach (IPackage inputPack in InputPacks.ChosenPacks)
            {
                IPackage PreviousStatus = InputPacks.FindPack(inputPack.Id);

                IPackageRequest packageRequest = PreviousStatus.Request();
                // removing the amount that was transfered from the original amount
                packageRequest.BrutMass -= inputPack.BrutMass;
                packageRequest.NetMass = packageRequest.BrutMass * PreviousStatus.Concentration;

                ChangedPacks.Add(packageRequest);
            }
        }
        return ChangedPacks;
    }

    public void ChangeDetail() => ChangeDetails.InvokeAsync();
}


@if (!AssemblyOfPackages)
{
    <CipherInputComponents @ref="InputPacks" ChangeDetails="@ChangeDetails" />
}

<CipherComponentCard Title="@Title" ContentStyleClass="@Constants.Styles.ComponentResourceCardContent" WithCard="@WithCard">
    <CipherAutoComplete ValueChanged="@ChangeDetails" Label="@(IPackage.Translate(nameof(IPackage.Id)))" Disabled="@ReadOnly" @ref="packId" 
    Icon="@Icons.Cipher.Package" />
    <CipherCategoryDropDown Disabled="@ReadOnly" @ref="packCategory" Change="@ChangedCategory" ChosenCategory="@ChosenCategory" />
    <CipherVesselDropDown Disabled="@ReadOnly" @ref="packVessel" AllVessels="@AllVessels" ChosenVessel="@ChosenVessel" Change="@ChangedVessel" />
    <CipherLocation Disabled="@ReadOnly" @ref="packLocation" ChosenSystem="@ChosenSystem" Change="@ChangedSystem" />
    <CipherPackageId Change="@ChangeDetails" Label="@(IPackage.Translate(nameof(IPackage.Parent)))" @ref=ParentPackage />
    @if (!IsNew)
    {
        <CipherComments @ref="PackDescription" ValueChanged="@ChangeDetails"
                        Label="@(IPackage.Translate(nameof(IPackage.Description)))" Icon="@Icons.Documents.Page.description" />
        <CipherNumeric AmountChanged="@ChangeDetails" Disabled="@ReadOnly" 
            Label="@(IPackage.Translate(nameof(IPackage.BrutMass)))" Icon="@Icons.Professions.Construction.scale" />
        <CipherNumeric AmountChanged="@ChangeDetails" Disabled="@ReadOnly" 
            Label="@(IPackage.Translate(nameof(IPackage.NetMass)))" Icon="@Icons.Professions.Construction.scale" />
        <CipherProcesses Change="@ChangeDetails" Label="@(IPackage.Translate(nameof(IPackage.DestinationProcesses)))" ChosenProcesses="@DestinationProcesses" />
    }
</CipherComponentCard>

<CipherComponentCard Title="תעודות המוכלות בתעודה זו">
    <CipherPackagesPicking @ref="InnerPacks" Change="ChangeView" />
</CipherComponentCard>

<CipherPackageProperties @ref="PackProps" ChosenProperties="@ChosenProperties" ChangeDetails="@ChangeDetails" />
