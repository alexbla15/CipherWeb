@inherits CipherFormRow

<CipherFormRow Icon="@Icon">
    <RadzenDropDownDataGrid TValue="IProcessDefinition" Data=@Processes AllowClear=true Placeholder="@PlaceHolder" AllowSorting=false Change="@Change"
                            Style="@($"width: {Width}; min-width: {MinWidth}")" AllowFiltering="true" TextProperty="@(nameof(IProcessDefinition.Name))" @bind-Value="@ChosenProcess" SearchTextPlaceholder="חיפוש ...">
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(IProcessDefinition.Name))" Title="@(ProcessDefinition.Translate(nameof(IProcessDefinition.Name)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IProcessDefinition.Description))" Title="@(ProcessDefinition.Translate(nameof(IProcessDefinition.Description)))" />
        </Columns>
        <ValueTemplate>
            <b>@Label:</b> @((context as IProcessDefinition).Name)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</CipherFormRow>

@code {
    /// <summary>
    /// Max amount of labels that will be shown upon choosing. Afterwards, it will be shown as "X labels were selected".
    /// Initially set to max.
    /// </summary>
    [Parameter]
    public string PlaceHolder { get; set; } = "בחירת תהליך";

    /// <summary>
    /// All available processes
    /// </summary>
    [Parameter]
    public List<IProcessDefinition> Processes { get; set; } = new();

    /// <summary>
    /// Chosen process among AllProcesses
    /// </summary>
    [Parameter]
    public IProcessDefinition? ChosenProcess { get; set; }

    /// <summary>
    /// Data fetching error
    /// </summary>
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Action function that occurs upon change of set-value.
    /// </summary>
    [Parameter]
    public EventCallback<object> Change { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Label ??= ProcessDefinition.Translate(nameof(IProcessDefinition.Name));
        Icon ??= Icons.Cipher.Process;
        Width ??= "100%";
        MinWidth ??= "300px";

        if (Processes.Count() == 0) (Processes, Error) = await CachedData.AllProcessDefinitions;
    }
}