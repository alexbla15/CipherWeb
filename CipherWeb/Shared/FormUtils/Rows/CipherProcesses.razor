@inherits CipherFormRow

<CipherFormRow Icon="@Icon" Label="@Label" Width="@Width" MinWidth="@MinWidth">
    <RadzenDropDownDataGrid TValue="List<ProcessDefinition>" Data=@Processes Multiple=true AllowClear=true Placeholder="@PlaceHolder"
                            AllowFiltering="true" MaxSelectedLabels="@MaxShownLabels" TextProperty="@(nameof(CachedData.ProcessDefinitionExample.Name))"
                            Chips=true Style="width: 100%;" @bind-Value="@ChosenProcesses" SearchTextPlaceholder="חיפוש ..." Disabled="@Disabled">
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(CachedData.ProcessDefinitionExample.Name))" Title="@(ProcessDefinition.Translate(nameof(CachedData.ProcessDefinitionExample.Name)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(CachedData.ProcessDefinitionExample.Description))" Title="@(ProcessDefinition.Translate(nameof(CachedData.ProcessDefinitionExample.Description)))" />
        </Columns>
        <ValueTemplate>
            <b>@Label:</b> @context
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</CipherFormRow>

@code {
    /// <summary>
    /// Is the component readonly, or it's editable.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Max amount of labels that will be shown upon choosing. Afterwards, it will be shown as "X labels were selected".
    /// Initially set to max.
    /// </summary>
    [Parameter]
    public string PlaceHolder { get; set; } = "בחירת תהליכים";

    /// <summary>
    /// Max amount of labels that will be shown upon choosing. Afterwards, it will be shown as "X labels were selected".
    /// Initially set to max.
    /// </summary>
    [Parameter]
    public int MaxShownLabels { get; set; } = int.MaxValue;

    /// <summary>
    /// All available processes
    /// </summary>
    [Parameter]
    public List<ProcessDefinition> Processes { get; set; } = new();

    /// <summary>
    /// All chosen processes
    /// </summary>
    [Parameter]
    public List<ProcessDefinition>? ChosenProcesses { get; set; } = new();

    /// <summary>
    /// Data fetching error
    /// </summary>
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    protected override void OnInitialized()
    {
        Label ??= "תהליכים";
        Icon ??= Icons.Cipher.Process;
        Width ??= "100%";
        MinWidth ??= "300px";

        if (Processes.Count() == 0)
        {
            (Processes, Error) = CachedData.AllProcessDefinitions;
        }
    }
}