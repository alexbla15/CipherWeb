@inherits RadzenStack

@code {
    /// <summary>
    /// Is component readonly?
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// All packages available
    /// </summary>
    [Parameter]
    public List<IPackage> AllPacks { get; set; } = new();

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Component's Label.
    /// </summary>
    [Parameter]
    public string? Label { get; set; } = Package.Translate(nameof(IPackage.Id));

    /// <summary>
    /// Component's Label.
    /// </summary>
    [Parameter]
    public string? Icon { get; set; } = Icons.Cipher.Package;

    /// <summary>
    /// Component's width.
    /// </summary>
    [Parameter]
    public string? Width { get; set; } = "300px";

    /// <summary>
    /// Component's chosen value.
    /// </summary>
    [Parameter]
    public IPackage? ChosenPackage { get; set; }

    /// <summary>
    /// Action function that occurs upon change of set-value.
    /// </summary>
    [Parameter]
    public EventCallback<object> Change {get;set;}

    private CipherAutoComplete component = new CipherAutoComplete();

    protected override async Task OnInitializedAsync() => (AllPacks, Error) = await CachedData.AllPackages;

    public IPackage? GetValue() => ChosenPackage;
}

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="5px">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <RadzenIcon Icon="@Icon" IconColor="@Colors.PrimaryDark" Style="font-size: xx-large;" />
    }
    <RadzenDropDownDataGrid Placeholder="@Label" SearchTextPlaceholder="חיפוש..." TValue="IPackage" AllowClear="true"
                            Data=@AllPacks TextProperty="@(nameof(IPackage.Id))" AllowFilteringByAllStringColumns="true"
                            Style="@($"width: {Width}; min-height:;")" @bind-Value="ChosenPackage" Disabled="@Disabled"
                            Change="@Change" AllowSorting=false>
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(IPackage.Id))" Title="@(Package.Translate(nameof(IPackage.Id)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(ICategory.MaterialType))" Title="@(Category.Translate(nameof(ICategory.MaterialType)))">
                <Template>
                    @((context as IPackage).Category.MaterialType?.Name)
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="@(nameof(IPackage.Category))" Title="@(Package.Translate(nameof(IPackage.Category)))">
                <Template>
                    @(string.Join(", ", (context as IPackage).Category.Name))
                </Template>
            </RadzenDropDownDataGridColumn>
        </Columns>
        <ValueTemplate>
            <b>@Label:</b> @((context as IPackage).Id)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</RadzenStack>