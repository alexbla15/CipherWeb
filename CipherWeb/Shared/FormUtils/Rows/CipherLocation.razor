@inherits RadzenStack

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="5px">
    @if (WithIcon)
    {
        <RadzenIcon Icon="@Icon" IconColor="@Colors.PrimaryDark" Style="font-size: xx-large;" />
    }
    <RadzenDropDownDataGrid @bind-Value=@ChosenSystem Data=@AvailableSystems TextProperty="@(nameof(IStorageSystem.Name))"
                            Placeholder="@Label" SearchTextPlaceholder="חיפוש..." AllowClear="true" AllowSorting=false
                            AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Style="@($"width: {Constants.StandartWidth}")" Disabled="@Disabled" Change="@Change">
        <Columns>
            <RadzenDropDownDataGridColumn Property="@(nameof(IStorageSystem.Name))" Title="@(IStorageSystem.Translate(nameof(IStorageSystem.Name)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IStorageSystem.Description))" Title="@(IStorageSystem.Translate(nameof(IStorageSystem.Description)))" />
            <RadzenDropDownDataGridColumn Property="@(nameof(IStorageSystem.Parent))" Title="@(IStorageSystem.Translate(nameof(IStorageSystem.Parent)))">
                <Template>
                    @((context as IStorageSystem)?.Parent?.Name)
                </Template>
            </RadzenDropDownDataGridColumn>
            <RadzenDropDownDataGridColumn Property="@(nameof(IStorageSystem.Unit))" Title="@(IStorageSystem.Translate(nameof(IStorageSystem.Unit)))">
                <Template>
                    @((context as IStorageSystem)?.Unit?.Description)
                </Template>
            </RadzenDropDownDataGridColumn>
        </Columns>
        <ValueTemplate>
            <b>מערכת:</b> @(context.Name)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</RadzenStack>

@code {
    /// <summary>
    /// Value of the component.
    /// </summary>
    [Parameter]
    public IStorageSystem? ChosenSystem { get; set; }

    /// <summary>
    /// All available systems to choose from.
    /// </summary>
    [Parameter]
    public List<IStorageSystem> AvailableSystems { get; set; } = new();

    /// <summary>
    /// Label and placeholder of component.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Icon aside the component.
    /// </summary>
    [Parameter]
    public string? Icon { get; set; }

    /// <summary>
    /// Is dropdown disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Is icon visible?
    /// </summary>
    [Parameter]
    public bool WithIcon { get; set; } = true;

    /// <summary>
    /// Function which takes place as value is changed
    /// </summary>
    [Parameter]
    public EventCallback<object> Change { get; set; }

    /// <summary>
    /// Response from API to data fetching
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    protected override async Task OnInitializedAsync()
    {
        Label ??= IStorageSystem.Translate(nameof(IStorageSystem.Name));
        Icon ??= Icons.Cipher.Location;

        (AvailableSystems, Error) = await CachedData.AllSystems;
    }
}