@inject ICipherInfo _db

@inherits RadzenStack

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="5px">
    @if (WithIcon)
    {
        <RadzenIcon Icon="@Icon" IconColor="@Colors.PrimaryDark" Style="font-size: xx-large;"/>
    }
    <RadzenDropDownDataGrid @bind-Value=@sys Data=@TestedData.Systems TextProperty="Id" ValueProperty="Id" Placeholder="@Label" SearchTextPlaceholder="חיפוש..."
                            AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Style="@($"width: {Width}")" Disabled="@Disabled" Change="@Change">
        <Columns>
            <RadzenDropDownDataGridColumn Property="Id" Title="שם" Width="50px" />
            <RadzenDropDownDataGridColumn Property="Description" Title="תיאור" Width="50px" />
            <RadzenDropDownDataGridColumn Property="ParentId" Title="מערכת אב" Width="50px" />
            <RadzenDropDownDataGridColumn Property="UnitDescription" Title="יחידה" Width="50px" />
        </Columns>
        <ValueTemplate>
            @(context.Description): @(context.Id)
        </ValueTemplate>
    </RadzenDropDownDataGrid>
</RadzenStack>

@code {
    /// <summary>
    /// Value of the component.
    /// </summary>
    [Parameter]
    public string? sys { get; set; }

    /// <summary>
    /// Label and placeholder of component.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Icon aside the component.
    /// </summary>
    [Parameter]
    public string Icon { get; set; }

    /// <summary>
    /// Component's width.
    /// </summary>
    [Parameter]
    public string Width { get; set; } = "300px";

    /// <summary>
    /// Is dropdown disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Is icon visible?
    /// </summary>
    [Parameter]
    public bool WithIcon { get; set; } = true;

    /// <summary>
    /// Function which takes place as value is changed
    /// </summary>
    [Parameter]
    public EventCallback<object> Change { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Label ??= "מיקום"; 
        Icon ??= Icons.Cipher.Location;
    }
}