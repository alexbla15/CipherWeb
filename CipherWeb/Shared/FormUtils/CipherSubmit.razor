@inherits CipherComponentCard

@code {
    /// <summary>
    /// Is submission acceptable.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Is alert visible under submission button.
    /// </summary>
    [Parameter]
    public bool alertVisible { get; set; }

    /// <summary>
    /// Alert text according to the submission.
    /// </summary>
    [Parameter]
    public string? alertText { get; set; }

    /// <summary>
    /// Summerizes the action that user tries to do with this form.
    /// </summary>
    [Parameter]
    public string? ActionText { get; set; }

    /// <summary>
    /// Path to go to when user cancels the form.
    /// </summary>
    [Parameter]
    public string? CancelPath { get; set; } = CipherNavLinks.Forms.Href;

    /// <summary>
    /// Message that will be showen when submitting the succesfuly.
    /// </summary>
    [Parameter]
    public string SuccessMessage { get; set; } = "טופס הוזן בהצלחה";

    /// <summary>
    /// Message that will be showen when submitting the form unsuccesfuly.
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "שגיאה בהזנת טופס";

    /// <summary>
    /// Background styling of alert. Must be AlertStyle-enum.
    /// </summary>
    [Parameter]
    public AlertStyle alertStyle { get; set; }

    /// <summary>
    /// Function that takes place once user clicks submission.
    /// </summary>
    [Parameter]
    public EventCallback<object> Click { get; set; }

    protected override void OnInitialized()
    {
        Title ??= "סיכום ואישור";
        alertStyle = AlertStyle.Success;
    }

    /// <summary>
    /// Control alert upon saving.
    /// </summary>
    public async Task Save()
    {
        await Click.InvokeAsync();

        alertVisible = true;
        alertStyle = (Valid) ? AlertStyle.Success : AlertStyle.Danger;
        alertText = (Valid) ? SuccessMessage : ErrorMessage;
    }

    /// <summary>
    /// Close the shown alert.
    /// </summary>
    private void CloseAlert() => alertVisible = false;

    public void SetValid(bool value) => Valid = value;

    public void SetErrorMessage(string? msg) => ErrorMessage = msg ?? string.Empty;

    private RenderFragment SubmissionButton()
        =>@<CipherSubmitButton Click=@(args => Save()) Size="ButtonSize.Medium" />;

    private RenderFragment CancelButton()
        =>@<CipherNavButton ColorStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Icon="@Icons.Documents.Delete.cancel" Text="ביטול" 
        Path="@CancelPath" Size="ButtonSize.Medium" />;

    public RenderFragment SubmissionAlert() =>
    @<RadzenAlert Visible="@alertVisible" Text="@alertText" AlertStyle="@alertStyle" Style="width:100%" Close="@CloseAlert" />;
}

<CipherComponentCard Title="@Title" WithCard="@WithCard" ButtonsGap="10px" ContentStyleClass="@Constants.Styles.ComponentFooterContent" Visible="@Visible">
    <Buttons>
        @if (string.IsNullOrEmpty(ActionText))
        {
            @SubmissionButton()
            @CancelButton()
        }
    </Buttons>
    <ChildContent>
        @if (!string.IsNullOrEmpty(ActionText))
        {
            <RadzenText TextStyle="TextStyle.Subtitle1" Text="@ActionText"/>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                @SubmissionButton()
                @CancelButton()
            </RadzenStack>
        }
        <RadzenAlert Visible="@alertVisible" Text="@alertText" AlertStyle="@alertStyle" Style="width:100%" Close="@CloseAlert" />
    </ChildContent>
</CipherComponentCard>