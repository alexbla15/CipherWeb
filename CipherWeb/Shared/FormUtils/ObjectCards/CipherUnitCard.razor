@inherits CipherResourceCard

<CipherResourceCard SetMode="@SetMode" Title="@Title">
    <ObjectPicker>
        <CipherUnitDropDown Label="@(GetLabel(nameof(IUnit.Name)))"
                            Change="@Change" @ref="UnitId" ChosenUnit="@ChosenObject" />
    </ObjectPicker>
    <ChildContent>
        @if (!(SetMode != FormMode.Create && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" 
            WithButtons="@(SetMode == FormMode.ReadOnly && CommonFuncs.CanView(CipherNavLinks.UpdateUnit))"
            ContentStyleClass="@Constants.Styles.ComponentResourceCardContent_Centered">
                <Buttons>
                    <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                    Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdateUnit.Href}?Id={ChosenObject?.Id}")" />
                </Buttons>
            <ChildContent>
                @_UnitName()
                @_UnitDescription()
                @_UnitParent()
            </ChildContent>
        </CipherComponentCard>
        }
    </ChildContent>
</CipherResourceCard>

@code {
    /// <summary>
    /// Chosen vessel within the card
    /// </summary>
    [Parameter]
    public IUnit? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the object.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherAutoComplete UnitName = new();
    private CipherAutoComplete UnitDescription = new();
    private CipherUnitDropDown UnitId = new();
    private CipherUnitDropDown UnitParent = new();

    protected override void OnInitialized()
    {
        Title ??= "פרטי היחידה";
        SetDetails();
    }

    public void Change()
    {
        ChosenObject = UnitId.ChosenUnit;
        ChangeObject.InvokeAsync();
    }

    public void ChangeDetail()
    {
        if (ChosenObject is null) return;
        ChosenObject.Name = UnitName.Value;
        ChosenObject.Description = UnitDescription.Value;
        ChosenObject.Parent = UnitParent.ChosenUnit;
        ChangeDetails.InvokeAsync();
    }

    public void SetDetails()
    {
        if (ChosenObject is null) return;

        UnitName.Value = ChosenObject.Name;
        UnitDescription.Value = ChosenObject.Description;
        UnitParent.ChosenUnit = ChosenObject.Parent;
        ChangeDetails.InvokeAsync();
    }

    private string GetLabel(string property) => IUnit.Translate(property);

    private string? GetValue(string? value)
    => (SetMode == FormMode.ReadOnly && string.IsNullOrEmpty(value)) ? "אין נתונים" : value;

    private bool IsDisabled() => 
    SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null);

    private RenderFragment _UnitName()
    {
        string? value = GetValue(ChosenObject?.Name);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(IUnit.Name)))" Icon="@Icons.Cipher.Unit" ValueChanged="@ChangeDetail"
                        Disabled="@IsDisabled()" Value="@value" @ref=UnitName />
    ;
    }

    private RenderFragment _UnitDescription()
    {
        string? value = GetValue(ChosenObject?.Description);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(IUnit.Description)))" 
        Icon="@Icons.Documents.Page.description" ValueChanged="@ChangeDetail"
        Disabled="@IsDisabled()" Value="@value" @ref=UnitDescription />
    ;
    }

    private RenderFragment _UnitParent()
    {
        string label = GetLabel(nameof(IUnit.Parent));
        IUnit? chosenParent = ChosenObject?.Parent;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@Icons.Cipher.Unit" SelectedChips="@CommonFuncs.GetChip(chosenParent?.Name, chosenParent?.Id)" 
            Label="@label" NavigationLink="@CipherNavLinks.UnitSearch" />;

        return
        @<CipherUnitDropDown Label="@label" Disabled="@IsDisabled()"
                        ChosenUnit="@chosenParent" @ref=UnitParent Change="@ChangeDetail" />
        ;
    }
}