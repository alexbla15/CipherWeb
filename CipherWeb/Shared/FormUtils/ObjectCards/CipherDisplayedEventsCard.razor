@inherits CipherComponentCard

@code {

    private List<IDisplayedEvent> DisplayedEvents = new();

    private List<IEvent> _Events = new();

    /// <summary>
    /// All events
    /// </summary>
    [Parameter]
    public List<IEvent> Events
    {
        get => _Events;
        set
        {
            _Events = value;
            foreach (IEvent ev in _Events)
            {
                DisplayedEvents.AddRange(ev.TransformToDisplayedEvents());
            }
        }
    }

    /// <summary>
    /// Update result, send from the api
    /// </summary>
    [Parameter]
    public IEvent? Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    [Parameter]
    public bool WithRowButtons { get; set; } = false;

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; } = string.Empty;

    private RadzenDataGrid<IDisplayedEvent> CustomDataGrid = new();

    public void OnRender(DataGridRenderEventArgs<IDisplayedEvent> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor()
                {
                    Title = GetLabel(nameof(IDisplayedEvent.Id)),
                    Property = nameof(IDisplayedEvent.Id),
                    SortOrder = SortOrder.Descending
                });
            StateHasChanged();
        }
    }

    public async Task ForSingleEvent(Func<IUpdateEvent> singleFunc, IEvent ev)
    {
        IUpdateEvent setUpdate = singleFunc();
        (Result, Error) = await ev.Update(ev.Id, setUpdate);
        JsonRequest = ev.Id + "\n___\n\n" + setUpdate.ToJson();
    }

    public async Task ApproveEvent(IEvent ev) => await ForSingleEvent(IUpdateEvent.ApprovedEvent, ev);

    public async Task DeclineEvent(IEvent ev) => await ForSingleEvent(IUpdateEvent.DeclinedEvent, ev);

    public async Task ForAllEvents(Func<IEvent, Task> singleFunc)
    {
        string NewJsonRequest = string.Empty;
        foreach (IEvent ev in Events)
        {
            await singleFunc(ev);
            NewJsonRequest += JsonRequest + "\n\n";
        }
        JsonRequest = NewJsonRequest;
    }

    public async Task ApproveAllEvents() => await ForAllEvents(ApproveEvent);

    public async Task DeclineAllEvents() => await ForAllEvents(DeclineEvent);

    public async Task ChangeEvents(List<IEvent> newEvents)
    {
        _Events = newEvents;
        DisplayedEvents = new();
        foreach (IEvent ev in _Events)
        {
            DisplayedEvents.AddRange(ev.TransformToDisplayedEvents());
        }
        StateHasChanged();
        await CustomDataGrid.RefreshDataAsync();
    }

    private string GetLabel(string property) => IDisplayedEvent.Translate(property);
}

<CipherComponentCard Title="@Title">
    <Buttons>
        @if (WithRowButtons)
        {
            <CipherButton Icon="@Icons.Symbols.V.done_all" HelpText="אישור כל התנועות" Variant="Variant.Outlined" Click="@ApproveAllEvents" />
            <CipherButton Icon="@Icons.Documents.Delete.delete_sweep" HelpText="דחיית כל התנועות" Variant="Variant.Outlined" Click="@DeclineAllEvents" />
        }

        <CipherExcelButton OnClickFunc="@(() => DisplayedObject.ToListDicts(DisplayedEvents))"/>
        <CipherPDFButton OnClickFunc="@(() => DisplayedObject.ToListDicts(DisplayedEvents))" />
    </Buttons>
    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical">
            @if (DisplayedEvents.Any())
            {
                <RadzenDataGrid TItem="IDisplayedEvent" @ref=CustomDataGrid
                                FilterMode="FilterMode.Simple" AllowFiltering="false" AllowGrouping="false"
                                AllowSorting="true" HideGroupedColumn="true"
                                AllGroupsExpanded="true" Render="@OnRender"
                                Data="@DisplayedEvents">
                    <GroupHeaderTemplate>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="10px">
                            @if (WithRowButtons)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                                    <CipherButton ColorStyle="ButtonStyle.Success" Icon="@Icons.Symbols.V.check"
                                                  Variant="Variant.Flat" ColorShade="Shade.Default"
                                                  Size="ButtonSize.Medium" Click="@(args => ApproveEvent(Events.Where(x=>x.Id == context.Data.Key).First()))" />
                                    <CipherButton ColorStyle="ButtonStyle.Danger" Icon="@Icons.Documents.Delete.cancel"
                                                  Variant="Variant.Flat" ColorShade="Shade.Default"
                                                  Size="ButtonSize.Medium" Click="@(args => DeclineEvent(Events.Where(x=>x.Id == context.Data.Key).First()))" />
                                </RadzenStack>
                            }
                            <RadzenText class="@Constants.Styles.GroupHeader" Text="@($@"{GetLabel(nameof(IDisplayedEvent.Id))} : {context.Data.Key},
                                 {GetLabel(nameof(IDisplayedEvent.EventType))} : {context.Data.Items.Cast<IDisplayedEvent>().First().EventType},
                                 {GetLabel(nameof(IDisplayedEvent.ProcessId))} : {context.Data.Items.Cast<IDisplayedEvent>().First().ProcessId},
                                 {GetLabel(nameof(IDisplayedEvent.Timestamp))} : {context.Data.Items.Cast<IDisplayedEvent>().First().Timestamp},
                                 {GetLabel(nameof(IDisplayedEvent.Comments))} : {context.Data.Items.Cast<IDisplayedEvent>().First().Comments}
                                ")" />
                        </RadzenStack>
                    </GroupHeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.Id))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.Id)))" MinWidth="20px" />
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.DonatingPackage))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.DonatingPackage)))">
                            <Template>
                                @context.DonatingPackage?.Item1.Id
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.DonatingSystem))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.DonatingSystem)))">
                            <Template>
                                @context.DonatingSystem?.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.AcceptingPackage))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.AcceptingPackage)))">
                            <Template>
                                @context.AcceptingPackage?.Item1.Id
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.AcceptingSystem))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.AcceptingSystem)))">
                            <Template>
                                @context.AcceptingSystem?.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.EventMass))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.EventMass)))" />
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <RadzenText Text="לא נמצאו תנועות" class="@Constants.Styles.DataGridEmpty" />
            }

            @if (WithRowButtons)
            {
                <CipherJsonCheck JsonValue="@JsonRequest" />
            }
        </RadzenStack>
    </ChildContent>
</CipherComponentCard>