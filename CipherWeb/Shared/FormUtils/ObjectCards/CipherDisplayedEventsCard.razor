@inherits CipherComponentCard

@code {

    private List<IDisplayedEvent> DisplayedEvents = new();

    /// <summary>
    /// All events
    /// </summary>
    [Parameter]
    public List<IEvent> AllEvents { get; set; } = new();

    /// <summary>
    /// All events that were approved
    /// </summary>
    [Parameter]
    public List<IEvent> ApprovedEvents { get; set; } = new();

    /// <summary>
    /// All events that were declined events
    /// </summary>
    [Parameter]
    public List<IEvent> DeclinedEvents { get; set; } = new();

    /// <summary>
    /// All events that were declined events
    /// </summary>
    [Parameter]
    public List<IEvent> PendingEvents { get; set; } = new();

    [Parameter]
    public bool WithApproveButton { get; set; } = false;

    [Parameter]
    public bool WithDeclineButton { get; set; } = false;

    [Parameter]
    public string ApproveAllText { get; set; } = "אישור כל התנועות";

    [Parameter]
    public string DeclineAllText { get; set; } = "דחיית כל התנועות";

    [Parameter] 
    public EventCallback UponApproval {get;set;}

    [Parameter] 
    public EventCallback UponDecline {get;set;}

    private RadzenDataGrid<IDisplayedEvent> CustomDataGrid = new();

    protected override void OnInitialized()
    {
        Title ??= "תנועות";
        SetDisplayedEvents();
    }

    private void SetDisplayedEvents()
    {
        PendingEvents = AllEvents.ToList();
        ApprovedEvents = new();
        DeclinedEvents = new();

        DisplayedEvents = new();

        foreach (IEvent ev in AllEvents)
        {
            DisplayedEvents.AddRange(ev.TransformToDisplayedEvents());
        }
    }

    public void OnRender(DataGridRenderEventArgs<IDisplayedEvent> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor()
                {
                    Title = GetLabel(nameof(IDisplayedEvent.Id)),
                    Property = nameof(IDisplayedEvent.Id),
                    SortOrder = SortOrder.Descending
                });
            StateHasChanged();
        }
    }

    public async Task ForSingleEvent(IEvent ev, bool approved = true)
    {
        if (approved)
        {
            PendingEvents.Remove(ev);
            ApprovedEvents.Add(ev);
            await UponApproval.InvokeAsync();
        }
        else
        {
            PendingEvents.Remove(ev);
            DeclinedEvents.Add(ev);
            await UponDecline.InvokeAsync();
        }
    }

    public async Task ApproveEvent(IEvent ev) => await ForSingleEvent(ev);

    public async Task DeclineEvent(IEvent ev) => await ForSingleEvent(ev, false);

    public async Task ForAllEvents(Func<IEvent, Task> singleFunc)
    {
        foreach (IEvent ev in AllEvents)
        {
            await singleFunc(ev);
        }
    }

    public async Task ApproveAllEvents() => await ForAllEvents(ApproveEvent);

    public async Task DeclineAllEvents() => await ForAllEvents(DeclineEvent);

    public void ChangeEvents(List<IEvent> newEvents)
    {
        AllEvents = newEvents;
        SetDisplayedEvents();
        StateHasChanged();
    }

    private string GetLabel(string property) => IDisplayedEvent.Translate(property);

    private RenderFragment? EventAction(Group context, bool Approve = true)
    {
        if (!WithApproveButton && Approve) return null;
        if (!WithDeclineButton && !Approve) return null;

        ButtonStyle colorStyle = Approve ? ButtonStyle.Success : ButtonStyle.Danger;
        string icon = Approve ? Icons.Symbols.V.check : Icons.Documents.Delete.cancel;
        IEvent selectedEv = AllEvents.Where(x => x.Id == context.Data.Key).First();

        return 
    @<CipherButton ColorStyle="@colorStyle" Icon="@icon"
        Variant="Variant.Flat" ColorShade="Shade.Dark" Style="margin:0px"
        Size="ButtonSize.Medium" Click="@(args => Approve ? ApproveEvent(selectedEv) : DeclineEvent(selectedEv))" />
    ;
    }


    private RenderFragment? ApproveAllBtn()
    {
        if (!WithApproveButton) return null;

        return
        @<CipherButton Icon="@Icons.Symbols.V.done_all" HelpText="@ApproveAllText" 
        Variant="Variant.Outlined" Click="@ApproveAllEvents" />;
    }

    private RenderFragment? DeclineAllBtn()
    {
        if (!WithDeclineButton) return null;

        return
        @<CipherButton Icon="@Icons.Documents.Delete.delete_sweep" HelpText="@DeclineAllText" 
        Variant="Variant.Outlined" Click="@DeclineAllEvents" />;
    }

    private RenderFragment? ExportButtons()
    {
            string fileName = "events";
            Func<IEnumerable<IDictionary<string, object?>>>? GetData = () => DisplayedObject.ToListDicts(DisplayedEvents);

            return@<div>
        <CipherExcelButton FileName="@fileName" OnClickFunc="@GetData" Disabled="@(!DisplayedEvents.Any())"/>
        <CipherPDFButton FileName="@fileName" OnClickFunc="@GetData" Disabled="@(!DisplayedEvents.Any())"/>
    </div>;
    }
}

<CipherComponentCard Title="@Title">
    <Buttons>
        @ApproveAllBtn()
        @DeclineAllBtn()
        @ExportButtons()
    </Buttons>
    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical">
            @if (DisplayedEvents.Any())
            {
                <RadzenDataGrid TItem="IDisplayedEvent" @ref=CustomDataGrid
                                FilterMode="FilterMode.Simple" AllowFiltering="false" AllowGrouping="false"
                                AllowSorting="true" HideGroupedColumn="true" AllowPaging="true"
                                PageSize="@Constants.RowsPerPage"
                                AllGroupsExpanded="true" Render="@OnRender"
                                Data="@DisplayedEvents">
                    <GroupHeaderTemplate>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="10px">
                            @if (WithApproveButton || WithDeclineButton)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                                    @EventAction(context)
                                    @EventAction(context, false)
                                </RadzenStack>
                            }
                            <RadzenText class="@Constants.Styles.GroupHeader" Text="@($@"{GetLabel(nameof(IDisplayedEvent.Id))} : {context.Data.Key},
                                 {GetLabel(nameof(IDisplayedEvent.EventType))} : {context.Data.Items.Cast<IDisplayedEvent>().First().EventType},
                                 {GetLabel(nameof(IDisplayedEvent.ProcessId))} : {context.Data.Items.Cast<IDisplayedEvent>().First().ProcessId},
                                 {GetLabel(nameof(IDisplayedEvent.Timestamp))} : {context.Data.Items.Cast<IDisplayedEvent>().First().Timestamp},
                                 {GetLabel(nameof(IDisplayedEvent.Comments))} : {context.Data.Items.Cast<IDisplayedEvent>().First().Comments}
                                ")" />
                        </RadzenStack>
                    </GroupHeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.Id))" 
                                              Title="@(GetLabel(nameof(IDisplayedEvent.Id)))" MinWidth="10px" />
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Width="100px" Filterable="false" Sortable="false"/> 
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.DonatingPackage))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.DonatingPackage)))">
                            <Template>
                                @context.DonatingPackage?.Item1.Id
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.DonatingSystem))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.DonatingSystem)))">
                            <Template>
                                @context.DonatingSystem?.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.AcceptingPackage))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.AcceptingPackage)))">
                            <Template>
                                @context.AcceptingPackage?.Item1.Id
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.AcceptingSystem))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.AcceptingSystem)))">
                            <Template>
                                @context.AcceptingSystem?.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="IDisplayedEvent" Property="@(nameof(IDisplayedEvent.EventMass))"
                                              Title="@(GetLabel(nameof(IDisplayedEvent.EventMass)))" />
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <RadzenText Text="לא נמצאו נתונים" class="@Constants.Styles.DataGridEmpty" />
            }
        </RadzenStack>
    </ChildContent>
</CipherComponentCard>