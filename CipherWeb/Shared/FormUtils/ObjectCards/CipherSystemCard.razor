@inherits CipherResourceCard

<CipherResourceCard SetMode="@SetMode" Title="@Title">
    <ObjectPicker>
        <CipherLocation Change="Change" @ref="SysId" ChosenSystem="@ChosenObject" />
    </ObjectPicker>
    <ChildContent>
        @if (!(SetMode != FormMode.Create && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" WithButtons="@(SetMode == FormMode.ReadOnly)"
            ContentStyleClass="@Constants.Styles.ComponentResourceCardContent_Centered">
                <Buttons>
                    <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                    Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdateSystem.Href}?Id={ChosenObject?.Id}")" />
                </Buttons>
            <ChildContent>
                    @SystemName()
                    @SystemDescription()
                    @SystemParent()
                    @SystemUnit()
            </ChildContent>
        </CipherComponentCard>
        }
    </ChildContent>
</CipherResourceCard>

@code {
    /// <summary>
    /// Chosen vessel within the card
    /// </summary>
    [Parameter]
    public IStorageSystem? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the system.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    private CipherLocation SysId = new();
    private CipherAutoComplete SysName = new();
    private CipherLocation SysParent = new();
    private CipherComments SysDescription = new();
    private CipherUnitDropDown SysUnit = new();

    protected override void OnInitialized()
    {
        Title ??= "פרטי המערכת";
        SetDetails();
    }

    public void Change()
    {
        ChosenObject = SysId.ChosenSystem;
        ChangeObject.InvokeAsync();
        StateHasChanged();
    }

    public void ChangeDetail()
    {
        if (ChosenObject is null) return;
        ChosenObject.Name = SysName.Value;
        ChosenObject.Description = SysDescription.Comments;
        ChosenObject.Parent = SysParent.ChosenSystem;
        ChosenObject.Unit = SysUnit.ChosenUnit;
        ChangeDetails.InvokeAsync();
    }

    public void SetDetails()
    {
        if (ChosenObject is null) return;

        SysName.Value = ChosenObject.Name;
        SysDescription.Comments = ChosenObject.Description;
        SysParent.ChosenSystem = ChosenObject.Parent;
        SysUnit.ChosenUnit = ChosenObject.Unit;
        ChangeDetails.InvokeAsync();
    }

    private string GetLabel(string property) => IStorageSystem.Translate(property);

    private string? GetValue(string? value)
        => (SetMode == FormMode.ReadOnly && string.IsNullOrEmpty(value)) ? "אין נתונים" : value;

    private bool IsDisabled() =>
        SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null);

    private RenderFragment SystemName()
    {
        string? value = GetValue(ChosenObject?.Name);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(IStorageSystem.Name)))" Disabled="@IsDisabled()"
                        Icon="@Icons.Cipher.Location" @ref=SysName Value="@value" ValueChanged="@ChangeDetail" />
        ;
    }

    private RenderFragment SystemDescription()
    {
        string? value = GetValue(ChosenObject?.Description);

        return
        @<CipherComments @ref="SysDescription" Label="@(GetLabel(nameof(IStorageSystem.Description)))" ValueChanged="@ChangeDetail"
        Icon="@Icons.Documents.Page.description" Comments="@value" Disabled="@IsDisabled()" />
    ;
    }

    private RenderFragment SystemParent()
    {
        string icon = Icons.Cipher.Parent;
        string label = GetLabel(nameof(IStorageSystem.Parent));
        IStorageSystem? chosenParent = ChosenObject?.Parent;

        if (SetMode == FormMode.ReadOnly)
            return @<CipherChips Icon="@icon"
                 SelectedChips="@CommonFuncs.GetChip(chosenParent?.Name, chosenParent?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.SystemSearch" />;

        return
        @<CipherLocation Icon="@icon" @ref="SysParent" Disabled="@IsDisabled()"
                    Label="@label" ChosenSystem="@chosenParent" Change="@ChangeDetail" />
        ;
    }

    private RenderFragment SystemUnit()
    {
        string label = GetLabel(nameof(IStorageSystem.Unit));
        IUnit? unit = ChosenObject?.Unit;

        if (SetMode == FormMode.ReadOnly)
            return @<CipherChips Icon="@Icons.Cipher.Unit"
                 SelectedChips="@CommonFuncs.GetChip(unit?.Name, unit?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.UnitSearch" />;

        return
        @<CipherUnitDropDown @ref="SysUnit" Change="@ChangeDetail"
                        ChosenUnit="@unit" Disabled="@IsDisabled()" />
        ;
    }
}