@inherits CipherComponentCard

<CipherComponentCard Title="@Title" WithCard="@WithCard" BackgroundColor="transparent">
    <HeaderContent>
        @if (SetMode != FormMode.Create)
        {
        <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
            <CipherPackageId @ref=SetPack Icon="" Change="Change" ChosenPackage="@ChosenObject" />
        </RadzenStack>
        }
    </HeaderContent>
    <ChildContent>
        @if (!(SetMode != FormMode.Create && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap" AlignCardItems="center">
                <Buttons>
                    @if (SetMode == FormMode.ReadOnly)
                    {
                        <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                        Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdatePackage.Href}?Id={ChosenObject?.Id}")" />
                    }
                </Buttons>
                <ChildContent>

                    @if (SetMode == FormMode.Create)
                    {
                        <CipherAutoComplete Label="@(IPackage.Translate(nameof(IPackage.Id)))" Value="@ChosenObject?.Id"
                        Icon="@Icons.Cipher.Package" Disabled="@(SetMode == FormMode.ReadOnly)"/>
                    }
                    <CipherComments Label="@(IPackage.Translate(nameof(IPackage.Description)))" 
                    Icon="@Icons.Documents.Page.description" Width="@Constants.StandartWidth" Comments="@ChosenObject?.Description" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />

                    @if (SetMode != FormMode.Create)
                    {
                        <CipherNumeric Amount="@((ChosenObject == null) ? 0 : ChosenObject.BrutMass)" Label="@(IPackage.Translate(nameof(IPackage.BrutMass)))" Icon="@Icons.Professions.Construction.scale"
                        Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                        <CipherNumeric Amount="@((ChosenObject == null) ? 0 : ChosenObject.NetMass)" Label="@(IPackage.Translate(nameof(IPackage.NetMass)))" Icon="@Icons.Professions.Construction.scale"
                        Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                    }
                    <CipherCategoryDropDown ChosenCategory="@ChosenObject?.Category" Width="@Constants.StandartWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                    <CipherVesselDropDown ChosenVessel="@ChosenObject?.Vessel" Width="@Constants.StandartWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                    <CipherLocation ChosenSystem="@ChosenObject?.System" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />

                    @if (SetMode != FormMode.Create)
                    {
                        <CipherDatePicker Value="@(ChosenObject?.CreatedAt ?? DateTime.Now)" Label="@(IPackage.Translate(nameof(IPackage.CreatedAt)))" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Width="@Constants.StandartWidth" />
                        <CipherProcesses ChosenProcesses="@ChosenObject?.DestinationProcesses.ToList()" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" 
                        Label="@(IPackage.Translate(nameof(IPackage.DestinationProcesses)))" />
                    }

                    <CipherPackageId ChosenPackage="@ChosenObject?.Parent" Width="@Constants.StandartWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Label="@(IPackage.Translate(nameof(IPackage.Parent)))" />

                    @if (ChosenObject != null && SetMode != FormMode.Create)
                    {
                        if (ChosenObject.Properties != null)
                        {
                            @foreach (IPackageProperty prop in ChosenObject.Properties)
                            {
                                <CipherAutoComplete Label="@prop.Name" Value="@prop.Value" Disabled="true"
                                Icon="@Icons.Cipher.Properties" />
                            }

                        }
                    }
                    <CipherPackagesPicking SelectedPackages="@ChosenObject?.Children?.ToList()" 
                                       Width="@Constants.StandartWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))"
                                       Label="@(IPackage.Translate(nameof(IPackage.Children)))" />
            </ChildContent>
        </CipherComponentCard>

        <CipherPackageProperties @ref="PackProps" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))"
            ChosenProperties="@((ChosenObject?.Category is null)? 
            new List<IPackageProperty>() : ChosenObject?.Category?.Properties?.Select(x=> 
            { IPackageProperty prop = Config.PackageProperty();
              prop.Name= x.Name;
              prop.Value = x.DefaultValue;
              return prop;
            }).ToList())" />

        <CipherDisplayedEventsCard @bind-Events="PackEvents"/>
        }
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Define the usage of this object-card
    /// </summary>
    [Parameter]
    public FormMode SetMode { get; set; } = FormMode.Create;

    /// <summary>
    /// All packages available
    /// </summary>
    [Parameter]
    public List<IPackage> packs { get; set; } = new();

    /// <summary>
    /// Chosen package to view within card.
    /// </summary>
    [Parameter]
    public IPackage? ChosenObject { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Event that takes place upon changing the package.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    private List<IEvent> PackEvents = new();

    private CipherPackageId SetPack = new();
    private CipherPackageId PackId = new();
    private CipherPackageProperties PackProps = new();

    protected override async Task OnInitializedAsync()
    {
        // DON'T DELETE - it made the form refresh with details from url
        if (ChosenObject != null) StateHasChanged();

        (packs, error) = await CachedData.AllPackages;
    }

    public async Task Change()
    {
        ChosenObject = SetPack.ChosenPackage;

        if (SetPack.ChosenPackage != null)
        {
            (PackEvents, error) = await SetPack.ChosenPackage.Events();
        }
        else
        {
            (PackEvents, error) = (new(), ErrorResponse.Success);
        }

        await ChangeObject.InvokeAsync();
        StateHasChanged();
    }
}