@inherits CipherComponentCard

<CipherComponentCard Title="@Title" WithCard="@WithCard" BackgroundColor="transparent">
    <HeaderContent>
        @if (SetMode != FormMode.Create)
        {
        <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
            <CipherPackageId @ref=SetPack Icon="" Change="Change" ChosenPackage="@ChosenObject" />
        </RadzenStack>
        }
    </HeaderContent>
    <ChildContent>
        <CipherComponentCard Title="תכונות" WithCard="true" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap" AlignCardItems="center">
            <Buttons>
                @if (SetMode == FormMode.ReadOnly)
                {
                <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                                 Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdatePackage.Href}?Id={ChosenObject?.Id}")" />
                }
            </Buttons>
            <ChildContent>

                @if (SetMode == FormMode.Create)
                {
                    <CipherAutoComplete Label="@(new Package().Translate(nameof(Package.Id)))" Value="@ChosenObject?.Id" Icon="@Icons.Cipher.Package" />
                }
                <CipherComments Label="@(new Package().Translate(nameof(Package.Description)))"
                                Icon="@Icons.Documents.Page.description" Width="300px" Comments="@ChosenObject?.Description" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                
                @if (SetMode != FormMode.Create)
                {
                    <CipherNumeric Amount="@((ChosenObject == null) ? 0 : ChosenObject.BrutMass)" Label="@(new Package().Translate(nameof(Package.BrutMass)))" Icon="@Icons.Professions.Construction.scale"
                                   Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                    <CipherNumeric Amount="@((ChosenObject == null) ? 0 : ChosenObject.NetMass)" Label="@(new Package().Translate(nameof(Package.NetMass)))" Icon="@Icons.Professions.Construction.scale"
                                   Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                }
                <CipherCategoryDropDown ChosenCategory="@ChosenObject?.Category" Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                <CipherVesselDropDown ChosenVessel="@ChosenObject?.Vessel" Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                <CipherLocation ChosenSystem="@ChosenObject?.System" Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" />
                
                @if (SetMode != FormMode.Create)
                {
                    <CipherDatePicker Value="@(ChosenObject?.CreatedAt ?? DateTime.Now)" Label="@(new Package().Translate(nameof(Package.CreatedAt)))" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Width="@RowWidth" />
                    <CipherProcesses ChosenProcesses="@ChosenObject?.DestinationProcesses.ToList()" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Label="@(new Package().Translate(nameof(Package.DestinationProcesses)))" />
                }

                <CipherPackageId ChosenPackage="@ChosenObject?.Parent" Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Label="@(new Package().Translate(nameof(Package.Parent)))" />
                
                @if (ChosenObject != null && SetMode != FormMode.Create)
                {
                    if (ChosenObject.Properties != null)
                    {
                        @foreach (PackageProperty prop in ChosenObject.Properties)
                        {
                            <CipherAutoComplete Label="@prop.Name" Value="@prop.Value" Disabled="true"
                            Icon="@Icons.Cipher.Properties" />
                        }
                    }
                }
                <CipherPackagesPicking SelectedPackages="@ChosenObject?.Children?.ToList()" Width="@RowWidth" Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Label="@(new Package().Translate(nameof(Package.Children)))" />
            </ChildContent>
        </CipherComponentCard>

        <CipherPackageProperties @ref="PackProps" ChosenProperties="@((ChosenObject?.Category is null)? new List<PackageProperty>() : ChosenObject?.Category?.Properties?.Select(x=>new PackageProperty() {Name= x.Name, Value = x.DefaultValue}).ToList())" />

        <CipherProcessesTable WithCard="true" Title="תנועות" Processes="@PackProcesses" WithHeaderContent="false" />
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Define the usage of this object-card
    /// </summary>
    [Parameter]
    public FormMode SetMode { get; set; } = FormMode.Create;

    /// <summary>
    /// Width of each row within the component
    /// </summary>
    [Parameter]
    public string RowWidth { get; set; } = "300px";

    /// <summary>
    /// All packages available
    /// </summary>
    [Parameter]
    public List<Package> packs { get; set; } = new List<Package>();

    /// <summary>
    /// Chosen package to view within card.
    /// </summary>
    [Parameter]
    public Package? ChosenObject { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Event that takes place upon changing the package.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    private List<Process> PackProcesses = new();

    private CipherPackageId SetPack = new();
    private CipherPackageId PackId = new();
    private CipherPackageProperties PackProps = new();

    protected override void OnInitialized()
    {
        // DON'T DELETE - it made the form refresh with details from url
        if (ChosenObject != null)
        {
            StateHasChanged();
        }

        (packs, error) = CachedData.AllPackages;
    }

    public void Change()
    {
        ChosenObject = SetPack.ChosenPackage;

        if (SetPack.ChosenPackage != null)
        {
            (PackProcesses, error) = SetPack.ChosenPackage.Processes();
        }
        else
        {
            (PackProcesses, error) = (new List<Process>(), ErrorResponse.Success);
        }

        ChangeObject.InvokeAsync();
        StateHasChanged();
    }
}