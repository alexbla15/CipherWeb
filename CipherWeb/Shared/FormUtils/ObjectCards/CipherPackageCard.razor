@inherits CipherResourceCard

<CipherResourceCard Title="@Title" SetMode="@SetMode">
    <ObjectPicker>
        <CipherPackageId @ref=SetPack Icon="" Change="Change" ChosenPackage="@ChosenObject" />
    </ObjectPicker>
    <ChildContent>
        @if (!(SetMode != FormMode.Create && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" WithButtons="@(SetMode == FormMode.ReadOnly)"
            ContentStyleClass="@Constants.Styles.ComponentResourceCardContent_Centered">
                <Buttons>
                    <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                    Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdatePackage.Href}?Id={ChosenObject?.Id}")" />
                </Buttons>
                <ChildContent>
                    @PackageId()
                    @PackageDescription()
                    @PackageBrutMass()
                    @PackageNetMass()
                    @PackageCategory()
                    @PackageVessel()
                    @PackageSystem()
                    @PackageCreateDate()
                    @PackageProcesses()
                    @PackageParent()
                    @if (SetMode == FormMode.ReadOnly)
                    {
                        @PackageProperties()
                    }
                    @PackageChildren()

            </ChildContent>
        </CipherComponentCard>

            @if (SetMode != FormMode.ReadOnly)
            {
                @PackageProperties()
            }

        <CipherDisplayedEventsCard @bind-AllEvents="PackEvents"/>
        }
    </ChildContent>
</CipherResourceCard>

@code {
    /// <summary>
    /// All packages available
    /// </summary>
    [Parameter]
    public List<IPackage> AvailablePackages { get; set; } = new();

    /// <summary>
    /// Chosen package to view within card.
    /// </summary>
    [Parameter]
    public IPackage? ChosenObject { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Event that takes place upon changing the package.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    private List<IEvent> PackEvents = new();

    private CipherPackageId SetPack = new();
    private CipherPackageId PackId = new();
    private CipherPackageProperties PackProps = new();

    protected override async Task OnInitializedAsync()
    {
        // DON'T DELETE - it made the form refresh with details from url
        if (ChosenObject != null) StateHasChanged();

        (AvailablePackages, Error) = await CachedData.AllPackages;
    }

    public async Task Change()
    {
        ChosenObject = SetPack.ChosenPackage;

        (PackEvents, Error) = (SetPack.ChosenPackage != null) ? 
            await SetPack.ChosenPackage.Events() : Tuple.Create(new List<IEvent>(), ErrorResponse.Success);

        await ChangeObject.InvokeAsync();
        StateHasChanged();
    }

    private string GetLabel(string property) => IPackage.Translate(property);

    private string? GetValue(string? value)
    => (SetMode == FormMode.ReadOnly && string.IsNullOrEmpty(value)) ? "אין נתונים" : value;

    private bool IsDisabled() =>
    SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null);

    private RenderFragment? PackageId()
    {
        if (SetMode != FormMode.Create) return null;

        string? value = GetValue(ChosenObject?.Id);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(IPackage.Id)))" Value="@value"
                        Icon="@Icons.Cipher.Package" Disabled="@(SetMode == FormMode.ReadOnly)" />
    ;
    }

    private RenderFragment PackageDescription()
    {
        string? value = GetValue(ChosenObject?.Description);

        return
        @<CipherComments Label="@(GetLabel(nameof(IPackage.Description)))"
        Icon="@Icons.Documents.Page.description" Comments="@value" Disabled="@IsDisabled()" />
    ;
    }

    private RenderFragment PackageParent()
    {
        string label = GetLabel(nameof(IPackage.Parent));
        IPackage? chosenParent = ChosenObject?.Parent;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@Icons.Cipher.Parent"
                 SelectedChips="@CommonFuncs.GetChip(chosenParent?.Id, chosenParent?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.PackageSearch" />;

        return
        @<CipherPackageId Icon="@Icons.Cipher.Parent" ChosenPackage="@chosenParent" Disabled="@IsDisabled()" Label="@label" />
    ;
    }

    private RenderFragment PackageCategory()
    {
        string label = GetLabel(nameof(IPackage.Category));
        ICategory? cat = ChosenObject?.Category;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@Icons.Symbols.category"
                 SelectedChips="@CommonFuncs.GetChip(cat?.Name, cat?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.CategorySearch" />;

        return
        @<CipherCategoryDropDown ChosenCategory="@cat" Disabled="@IsDisabled()" />
        ;
    }

    private RenderFragment PackageVessel()
    {
        string label = GetLabel(nameof(IPackage.Vessel));
        IVessel? ves = ChosenObject?.Vessel;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@Icons.Cipher.Vessel"
                 SelectedChips="@CommonFuncs.GetChip(ves?.Name, ves?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.VesselSearch" />;

        return
        @<CipherVesselDropDown ChosenVessel="@ves" Disabled="@IsDisabled()" />
        ;
    }

    private RenderFragment PackageSystem()
    {
        string label = GetLabel(nameof(IPackage.System));
        IStorageSystem? sys = ChosenObject?.System;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@Icons.Cipher.Location"
                 SelectedChips="@CommonFuncs.GetChip(sys?.Name, sys?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.SystemSearch" />;

        return
        @<CipherLocation ChosenSystem = "@sys" Disabled = "@IsDisabled()" />
        ;
    }

    private RenderFragment? PackageBrutMass()
    {
        if (SetMode == FormMode.Create) return null;

        string label = GetLabel(nameof(IPackage.BrutMass));
        decimal mass = ChosenObject?.BrutMass ?? 0;
        string? value = GetValue(mass.ToString());
        string icon = Icons.Professions.Construction.scale;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label"
                        Icon="@icon" Disabled="true" Value="@value" />;

        return
        @<CipherNumeric Amount="@mass" Label="@label" Icon="@icon" Disabled="@IsDisabled()" />
        ;
    }

    private RenderFragment? PackageNetMass()
    {
        if (SetMode == FormMode.Create) return null;

        string label = GetLabel(nameof(IPackage.NetMass));
        decimal mass = ChosenObject?.NetMass ?? 0;
        string? value = GetValue(mass.ToString());
        string icon = Icons.Professions.Construction.scale;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label"
                        Icon="@icon" Disabled="true" Value="@value" />;

        return
        @<CipherNumeric Amount="@mass" Label="@label" Icon="@icon" Disabled="@IsDisabled()" />
        ;
    }

    private RenderFragment? PackageCreateDate()
    {
        if (SetMode == FormMode.Create) return null;
        
        string label = GetLabel(nameof(IPackage.CreatedAt));
        DateTime date = ChosenObject?.CreatedAt ?? DateTime.Now;
        string? value = GetValue(date.ToString());
        string icon = Icons.Professions.Construction.scale;

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherAutoComplete Label="@label"
                        Icon="@icon" Disabled="true" Value="@value" />;

        return
        @<CipherDatePicker Value="@date" Label="@label" Disabled="@IsDisabled()" />
        ;
    }

    private RenderFragment PackageProcesses()
    {
        string icon = Icons.Arrows.Squared.input;
        List<IProcessDefinition>? procs = ChosenObject?.DestinationProcesses;
        string label = GetLabel(nameof(IPackage.DestinationProcesses));
        List<Tuple<string,string>>? chips = procs?.Where(x=>!string.IsNullOrEmpty(x.Name) && !string.IsNullOrEmpty(x.Id)).
        Select(x => Tuple.Create(x.Name, x.Id)).ToList();

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@icon"
                 SelectedChips="@chips" Label="@label"
                 NavigationLink="@CipherNavLinks.ProcessSearch" />;

        return
        @<CipherProcesses ChosenProcesses="@procs?.ToList()" Disabled="@IsDisabled()"
        Label="@label" />
    ;
    }

    private RenderFragment? PackageChildren()
    {
        string icon = Icons.Cipher.Children;
        List<IPackage>? packs = ChosenObject?.Children;

        if (packs is null) return null;

        string label = GetLabel(nameof(IPackage.Children));
        List<Tuple<string, string?>>? chips = packs?.Where(x=>!string.IsNullOrEmpty(x.Id)).Select(x => Tuple.Create(x.Id, x.Id)).ToList();

        if (SetMode == FormMode.ReadOnly)
            return
            @<CipherChips Icon="@icon"
                 SelectedChips="@chips" Label="@label"
                 NavigationLink="@CipherNavLinks.PackageSearch" />;

        return
        @<CipherPackagesPicking SelectedPackages="@packs?.ToList()"
        Disabled="@IsDisabled()" Label="@label" />
    ;
    }

    private RenderFragment? PackageProperties()
    {
        if (SetMode == FormMode.ReadOnly)
        {
            return
    @<div class="@Constants.Styles.ComponentCardContent" style="display:flex">
        @if (ChosenObject != null)
            {
                if (ChosenObject.Properties != null)
                {
                        @foreach (IPackageProperty prop in ChosenObject.Properties)
                        {
                            @PackageProperty(prop)
                        }
                }
            }
        </div>
    ;
        }
        else
        {
            List<IPackageProperty>? props = (ChosenObject?.Category is null) ?
            new List<IPackageProperty>() : ChosenObject?.Category?.Properties?.Select(x =>
            {
                IPackageProperty prop = Config.PackageProperty();
                prop.Name = x.Name;
                prop.Value = x.DefaultValue;
                return prop;
            }).ToList();
            string label = GetLabel(nameof(IPackage.Properties));

            return
            @<CipherPackageProperties @ref="PackProps" Disabled="@IsDisabled()"
            ChosenProperties="@props" />
            ;
        }
    }

    private RenderFragment PackageProperty(IPackageProperty prop)
    {
        string? value = GetValue(prop.Value);

        return
        @<CipherAutoComplete Label="@prop.Name" Value="@value" Disabled="true"
                        Icon="@Icons.Cipher.Properties" />
        ;
    }
}