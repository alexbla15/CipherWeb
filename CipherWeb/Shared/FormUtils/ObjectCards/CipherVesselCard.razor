@inherits CipherComponentCard

<CipherComponentCard WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <HeaderContent>
        @if (SetMode != FormMode.Create)
        {
            <RadzenStack AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                <CipherVesselDropDown Icon="@Icons.Cipher.Id" Change="@Change" @ref="VesId" ChosenVessel="@ChosenObject" />
            </RadzenStack>
        }
    </HeaderContent>
    <ChildContent>
        @if (!(SetMode == FormMode.Update && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap" AlignCardItems="center">
                <Buttons>
                    @if (SetMode == FormMode.ReadOnly)
                    {
                        <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                        Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdateVessel.Href}?Id={ChosenObject?.Id}")" />
                    }
                </Buttons>
                <ChildContent>
                    <CipherAutoComplete Label="@(IVessel.Translate(nameof(IVessel.Name)))" Icon="@Icons.Cipher.Vessel"
                                        ValueChanged="@(args => ChangeName(args))"
                    Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" 
                    Value="@ChosenObject?.Name" @ref=VesName />
                    <CipherAutoComplete Label="@(IVessel.Translate(nameof(IVessel.Type)))" Icon="@Icons.Symbols.category"
                                        ValueChanged="@(args => ChangeType(args))"
                    Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))" Value="@ChosenObject?.Type" @ref=VesType />
                    <CipherLocation Disabled="@(SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null))"
                    ChosenSystem="@ChosenObject?.System" @ref=VesSys
                                    Change="@(args => ChangeSystem((IStorageSystem?)args))" />

                    @if (SetMode == FormMode.ReadOnly)
                    {
                        <CipherPackagesPicking SelectedPackages="@ChosenObject?.ContainingPackages?.Select(x=>x as IPackage).ToList()" Change="@ChangeDetail" />
                    }
                </ChildContent>
        </CipherComponentCard>
        }
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Define the usage of this object-card
    /// </summary>
    [Parameter]
    public FormMode SetMode { get; set; } = FormMode.Create;

    /// <summary>
    /// Chosen vessel within the card
    /// </summary>
    [Parameter]
    public IVessel? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the vessel.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    private CipherVesselDropDown VesId = new();
    private CipherAutoComplete VesName = new();
    private CipherAutoComplete VesType = new();
    private CipherLocation VesSys = new();

    protected override void OnInitialized()
    {
        Title ??= "פרטי הכלי"; 
        SetDetails();
    }

    public void ChangeName(string? name)
    {
        if (ChosenObject != null) ChosenObject.Name = name;
        ChangeDetail();
    }

    public void ChangeType(string? name)
    {
        if (ChosenObject != null) ChosenObject.Type = name;
        ChangeDetail();
    }

    public void ChangeSystem(IStorageSystem? sys)
    {
        if (ChosenObject != null) ChosenObject.System = sys;
        ChangeDetail();
    }

    public void ChangeDetail()
    {
        if (ChosenObject is null) return;
        ChangeDetails.InvokeAsync();
    }

    public void Change()
    {
        ChosenObject = VesId.ChosenVessel;

        ChangeObject.InvokeAsync();
    }

    public void SetDetails()
    {
        if (ChosenObject is null) return;

        VesName.Value = ChosenObject.Name;
        VesType.Value = ChosenObject.Type;
        VesSys.ChosenSystem = ChosenObject.System;
    }
}