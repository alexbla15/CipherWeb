@inherits CipherResourceCard

<CipherResourceCard SetMode="@SetMode" Title="@Title">
    <ObjectPicker>
        <CipherVesselDropDown Icon="@Icons.Cipher.Id" Change="@Change" @ref="VesId" ChosenVessel="@ChosenObject" />
    </ObjectPicker>
    <ChildContent>
        @if (!(SetMode != FormMode.Create && ChosenObject is null))
        {
            <CipherComponentCard Title="תכונות" WithCard="true"
                                 WithButtons="@(SetMode == FormMode.ReadOnly && CommonFuncs.CanView(CipherNavLinks.UpdateVessel))"
            ContentStyleClass="@Constants.Styles.ComponentResourceCardContent_Centered">
                <Buttons>
                    <CipherNavButton Variant="Variant.Outlined" Icon="@Icons.Documents.Edit.edit" HelpText="עריכת נתונים"
                        Disabled="@(ChosenObject is null)" Path="@($"{CipherNavLinks.UpdateVessel.Href}?Id={ChosenObject?.Id}")" />
                </Buttons>
                <ChildContent>
                    @VesselName()
                    @VesselType()
                    @VesselLocation()
                    @VesselPackages()
                </ChildContent>
        </CipherComponentCard>
        }
    </ChildContent>
</CipherResourceCard>

@code {
    /// <summary>
    /// Chosen vessel within the card
    /// </summary>
    [Parameter]
    public IVessel? ChosenObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing the vessel.
    /// </summary>
    [Parameter]
    public EventCallback<object> ChangeObject { get; set; }

    /// <summary>
    /// Event that takes place upon changing a detail of the object.
    /// </summary>
    [Parameter]
    public EventCallback ChangeDetails { get; set; }

    private CipherVesselDropDown VesId = new();
    private CipherAutoComplete VesName = new();
    private CipherAutoComplete VesType = new();
    private CipherLocation VesSys = new();

    protected override void OnInitialized()
    {
        Title ??= "פרטי הכלי"; 
        SetDetails();
    }

    public void ChangeName(string? name)
    {
        if (ChosenObject != null) ChosenObject.Name = name;
        ChangeDetail();
    }

    public void ChangeType(string? name)
    {
        if (ChosenObject != null) ChosenObject.Type = name;
        ChangeDetail();
    }

    public void ChangeSystem(IStorageSystem? sys)
    {
        if (ChosenObject != null) ChosenObject.System = sys;
        ChangeDetail();
    }

    public void ChangeDetail()
    {
        if (ChosenObject is null) return;
        ChangeDetails.InvokeAsync();
    }

    public void Change()
    {
        ChosenObject = VesId.ChosenVessel;

        ChangeObject.InvokeAsync();
    }

    public void SetDetails()
    {
        if (ChosenObject is null) return;

        VesName.Value = ChosenObject.Name;
        VesType.Value = ChosenObject.Type;
        VesSys.ChosenSystem = ChosenObject.System;
    }

    private bool IsDisabled()
        => (SetMode == FormMode.ReadOnly || (SetMode == FormMode.Update && ChosenObject is null));

    private string GetLabel(string property) => IVessel.Translate(property);

    private string? GetValue(string? value)
    => (SetMode == FormMode.ReadOnly && string.IsNullOrEmpty(value)) ? "אין נתונים" : value;

    public RenderFragment VesselName()
    {
        string? value = GetValue(ChosenObject?.Name);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(IVessel.Name)))" Icon="@Icons.Cipher.Vessel"
                        ValueChanged="@(args => ChangeName(args))"
                        Disabled="@IsDisabled()"
                        Value="@value" @ref=VesName />
        ;
    }

    public RenderFragment VesselType()
    {
        string? value = GetValue(ChosenObject?.Type);

        return
        @<CipherAutoComplete Label="@(GetLabel(nameof(IVessel.Name)))" Icon="@Icons.Cipher.Vessel"
                        ValueChanged="@(args => ChangeName(args))"
                        Disabled="@IsDisabled()"
        Value="@value" @ref=VesName />
    ;
    }

    private RenderFragment VesselLocation()
    {
        string label = GetLabel(nameof(IVessel.System));
        IStorageSystem? sys = ChosenObject?.System;

        if (SetMode == FormMode.ReadOnly)
            return 
    @<CipherChips Icon="@Icons.Cipher.Location"
                 SelectedChips="@CommonFuncs.GetChip(sys?.Name, sys?.Id)" Label="@label"
                 NavigationLink="@CipherNavLinks.SystemSearch" />;

        return
        @<CipherLocation Disabled="@(SetMode == FormMode.Update && ChosenObject is null)"
                    ChosenSystem="@sys" @ref=VesSys
        Change="@(args => ChangeSystem((IStorageSystem?)args))" />
    ;
    }

    private RenderFragment? VesselPackages()
    {
        string icon = Icons.Cipher.Package;
        List<IPackage>? packs = ChosenObject?.ContainingPackages;
        string label = GetLabel(nameof(IVessel.ContainingPackages));

        List<Tuple<string, string>>? chips = 
        packs?.Where(x=>!string.IsNullOrEmpty(x.Id)).Select(x => Tuple.Create(x.Id, x.Id)).ToList();

        if (SetMode == FormMode.ReadOnly)
            return 
    @<CipherChips Icon="@icon"
                 SelectedChips="@chips" Label="@label"
                 NavigationLink="@CipherNavLinks.PackageSearch" />;
        ;
        
        return null;
    }
}