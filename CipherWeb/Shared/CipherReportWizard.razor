@inject DialogService DialogService

@inject ICipherInfo _db
@inject NavigationManager NavigationManager

@using CipherWeb.Pages.Forms
@using System.Reflection;

@if (Mode != FormMode.ReadOnly)
{
    @if (Visible)
    {
        <CipherSteps>
            <RadzenStepsItem Text="קביעת פרמטרים">
            @BasicInfo()
            @Parametrize()
        </RadzenStepsItem>

        <RadzenStepsItem Text="אובייקטים לתצוגה">
            @Filter()
        </RadzenStepsItem>

        <RadzenStepsItem Text="בניית תצוגה">
            @Group()
            @Aggregate()
        </RadzenStepsItem>

        <RadzenStepsItem Text="תצוגה מקדימה ושמירה">
            @Preview()
        </RadzenStepsItem>
    </CipherSteps>
    <CipherJsonCheck JsonValue="@ChosenReport?.ToJson()" />
    }
}
else
{
    @Preview()
}

@code {
    /// <summary>
    /// Is component visible
    /// </summary>
    [Parameter]
    public bool Visible { get; set; } = true;

    /// <summary>
    /// Is wizard used on update mode
    /// </summary>
    [Parameter]
    public FormMode Mode { get; set; } = FormMode.Create;

    /// <summary>
    /// Is report submitted to db.
    /// </summary>
    [Parameter]
    public bool Submitted { get; set; } = false;

    /// <summary>
    /// Is report valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message that will be presented to user upon bad submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public string? OriginalReportJson { get; set; }

    [Parameter]
    public Report? ChosenReport { get; set; }

    /// <summary>
    /// API response.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    [Parameter]
    public List<Dictionary<string, string?>> RequestResult { get; set; } = new();

    private CipherAutoComplete ReportName = new();
    private CipherDataGrouper dataGrouper = new();
    private CipherDataAggregater dataAggregator = new();
    private CipherFilterObjects ReportFilter = new();

    private CipherDatePicker cipherDate = new();
    private CipherUnitDropDown cipherUnit = new();
    private CipherVesselDropDown cipherVes = new();
    private CipherLocation cipherSys = new();
    private CipherNumeric cipherNumber = new();
    private CipherAutoComplete cipherText = new();
    private CipherAmount CurrentVersion = new();
    private CipherSubmit submission = new();

    private IGroupedBooleanCondition ChosenCondition = Config.GroupedBooleanCondition();
    private string FilledJson = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Reset();
        ChosenReport ??= new() { CreationDate = DateTime.Now};

        if (Mode == FormMode.Create) ChosenReport.Id = await _db.GetLastReportId() + 1;
    }

    private void OnFilterChanged(IGroupedBooleanCondition newFilter)
    {
        ChosenReport.ObjectType = ReportFilter.ChosenType;
        ChosenCondition = newFilter;
    }

    private void OnParametersChanged(List<ReportParameter> newParameters)
    {
        if (ChosenReport != null) ChosenReport.Parameters = newParameters;
    }

    private void OnGroupsChanged(List<string> newGroups)
    {
        if (ChosenReport != null) ChosenReport.ObjectFactory.GroupBy = newGroups;
    }

    private void OnAggregatesChanged(List<IAggregateItem> newAggregates)
    {
        if (ChosenReport != null) ChosenReport.ObjectFactory.Aggregate = newAggregates;
    }

    public void Reset()
    {
        Valid = true;
        ErrorMessage = string.Empty;
        Submitted = false;
        RequestResult = new();
    }

    public bool CheckForm()
    {
        ChosenReport.Title = ReportName.Value;
        ChosenReport.CreationDate = DateTime.Now;
        ChosenReport.Creator = Constants.SetUser.Name;
        ChosenReport.Version = (int)CurrentVersion.GetAmount();

        if (Valid) (Valid, ErrorMessage) = ChosenReport.Check();

        return Valid;
    }

    public async Task OnSave()
    {
        Reset();

        if (ChosenReport is null)
        {
            (Valid, ErrorMessage) = Tuple.Create(false, "שגיאת מערכת");
        }
        else
        {
            (Valid, ErrorMessage) = await ChosenReport.ExistsInDb(_db, Mode == FormMode.Update);
        }

        if (Valid && CheckForm()) await SubmitReport();

        UpdateSubmissionSummary();
    }

    public async Task SubmitReport()
    {
        if (ChosenReport is null) return;

        JsonRequest = ChosenReport.ToJson();
        await _db.InsertReport(ChosenReport);
        Submitted = true;
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }

    private void ChangeParamValue(ReportParameter param, string? value)
        => param.Value = value;

    private async Task SendRequest()
    {
        if (ChosenReport is null) return;

        FilledJson = ChosenReport.FillInParametersJson();

        IObjectFactory? sentObj = ICipherClass.FromJson<IObjectFactory>(FilledJson);

        (RequestResult, Error) = sentObj is null ? 
        Tuple.Create(new List<Dictionary<string,string?>>(), ErrorResponse.BadRequest) : await Config.QueryRequests(false).QueryObjects(sentObj);
    }

    private List<DisplayedObject> DisplayedObjects(List<Dictionary<string,string?>> objects)
    => objects.Select(x => new DisplayedObject(x)
            {
                Properties = x.Select(x => new DisplayedProperty() { 
                    Name = x.Key, Value = x.Value, Translation = x.Key
                }).ToList()
            }).ToList();

    private RenderFragment BasicInfo()
    =>
    @<CipherComponentCard Title="בחירת שם לדוח" ContentStyleClass="@Constants.Styles.ComponentResourceCardContent">
        <CipherAutoComplete Value="@(ChosenReport?.Id.ToString())" Label="@Report.Translate(nameof(Report.Id))" Icon="@Icons.Cipher.Id" Disabled="true" />
        <CipherAmount @ref="CurrentVersion" Disabled="true" Amount="@(Mode==FormMode.Update ? ChosenReport.Version + 1 : ChosenReport.Version)"
                      Label="@Report.Translate(nameof(Report.Version))" Icon="@Icons.Documents.Edit.edit" />
        <CipherAutoComplete @bind-Value="ChosenReport.Title" Label="@Report.Translate(nameof(Report.Title))" Icon="@Icons.Documents.assignment" @ref="ReportName" />
    </CipherComponentCard>
    ;

    private RenderFragment Parametrize()
    =>@<CipherParametrization ChosenParameters="@ChosenReport?.Parameters" ChosenParametersChanged="@OnParametersChanged" />;

    private RenderFragment? Filter(bool WithFilter = true)
        => ChosenReport is null ? null :
    @<CipherFilterObjects @ref=ReportFilter ChosenType="@ChosenReport?.ObjectType" ChosenCondition="@ChosenReport?.ObjectFactory.Filter"
                         ChosenConditionChanged="@OnFilterChanged" WithFilter="@WithFilter" WithFilterButton="false"
                         WithParameters="true" AvailableParameters="@ChosenReport?.Parameters" WithTable="false" />
    ;

    private RenderFragment Group()
        =>
    @<CipherDataGrouper ComponentType="@ChosenReport?.ObjectType"
                       Title="@(IObjectFactory.Translate(nameof(IObjectFactory.GroupBy)))" @ref=dataGrouper
                       ChosenGroupsChanged="@OnGroupsChanged"
                       ChosenGroups="@(ChosenReport?.ObjectFactory.GroupBy ?? new())" />
    ;

    private RenderFragment Aggregate()
    =>
    @<CipherDataAggregater @ref=dataAggregator Title="בחירת שדות ופונקציות" ChosenType="@ChosenReport.ObjectType"
                          AggregationFields="@ChosenReport.ObjectFactory.GroupBy" ChosenAggregates="@(ChosenReport.ObjectFactory.Aggregate ?? new())"
                          ChosenAggregatesChanged="@OnAggregatesChanged" />
    ;

    private RenderFragment? DateTimeParameter(ReportParameter param)
    => param.ParamType is null || !param.ParamType.IsDateTime() ? null :
    @<CipherDatePicker @ref=cipherDate Label="@param.Name" ValueChanged="@(value=> ChangeParamValue(param, value.ToString()))" />;

    private RenderFragment? NumberParameter(ReportParameter param)
    => param.ParamType is null || !param.ParamType.IsNumber() ? null :
    @<CipherNumeric @ref=cipherNumber Icon="@Icons.Data.numbers" Label="@param.Name" 
    AmountChanged="@(value=> ChangeParamValue(param, value.ToString()))" />;

    private RenderFragment? TextParameter(ReportParameter param)
        => param.ParamType is null || !param.ParamType.IsText() ? null :
    @<CipherAutoComplete @ref=cipherText Icon="@Icons.Documents.Edit.edit" Label="@param.Name" 
    ValueChanged="@(value=> ChangeParamValue(param, cipherText.Value))" ShowErrors="false" />;

    private RenderFragment? BoolParameter(ReportParameter param)
    => param.ParamType is null || !param.ParamType.IsBool() ? null :
    @<RadzenToggleButton Value="@(bool.Parse(param.Value ?? false.ToString()))" Style="display:flex; justify-content:end"
                        ValueChanged="@(value => {
                        ChangeParamValue(param, value.ToString());
                        })"
                        Text="@(param.Value == false.ToString() ? "לא" : "כן" )"
                        ButtonStyle="ButtonStyle.Danger"
                        ToggleButtonStyle="ButtonStyle.Success" />
        ;

    private RenderFragment? ParameterFiller()
    {
        if (ChosenReport is null) return null;

        return
    @<div>
        <CipherComponentCard Title="פרמטרים" ContentStyleClass="@Constants.Styles.ComponentResourceCardContent">
            <Buttons>
                <CipherSearchButton Click="@(async ()  => {
                    await SendRequest();
                })" HelpText="חיפוש" />
            </Buttons>
            <ChildContent>
                @foreach (ReportParameter param in ChosenReport.Parameters)
                {
                    @DateTimeParameter(param)
                    @NumberParameter(param)
                    @TextParameter(param)
                    @BoolParameter(param)
                }
            </ChildContent>
        </CipherComponentCard>
        <CipherJsonCheck JsonValue="@FilledJson" />
    </div>;
    }

    private RenderFragment? ReportLink()
    => Submitted ?
    @<CipherNavButton Path="@ChosenReport?.Path()" Text="קישור לדוח" Icon="@Icons.Arrows.Squared.open_in_new" Width="100%" /> : null;

    private RenderFragment Table()
    =>
    @<CipherComponentCard Title="תוצאות">
        <CipherDataTable DataSource="@DisplayedObjects(RequestResult)" />
        </CipherComponentCard>
    ;

    private RenderFragment? Submit()
    => (Mode == FormMode.ReadOnly) ? null :
    @<CipherSubmit WithCard="false" Title="" Click="@OnSave" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission/>;

    private RenderFragment? Preview()
    {
        if (ChosenReport is null) return null;

        ChosenReport.ObjectFactory.Filter = ChosenCondition;

        return
    @<CipherComponentCard BackgroundColor="@Colors.PrimaryLight">
        <RadzenStack Orientation="Orientation.Vertical">
            @if (Valid)
            {
                @ParameterFiller()
                @Filter(false)
                @Table()
            }
            @Submit()
            @ReportLink()
        </RadzenStack>
    </CipherComponentCard>;
    }
}