@inject DialogService DialogService

@inject ICipherInfo _db

<CipherSteps>
    <RadzenStepsItem Text="קביעת פרמטרים">
        <CipherComponentCard Title="בחירת שם לדוח" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
            <CipherAutoComplete Value="@(ChosenReport.Id.ToString())" Label="@ChosenReport.Translate(nameof(Report.Id))" Icon="@Icons.Cipher.Id" Disabled="true" />
            <CipherAutoComplete @bind-Value="ChosenReport.Title" Label="@ChosenReport.Translate(nameof(Report.Title))" Icon="@Icons.Documents.Edit.edit" @ref="ReportName" />
        </CipherComponentCard>
        <CipherParametrization ChosenParameters="@ChosenReport.Parameters" ChosenParametersChanged="@OnParametersChanged"/>
    </RadzenStepsItem>

    <RadzenStepsItem Text="אובייקטים לתצוגה">
        <CipherFilterObjects @ref=ReportFilter ChosenType="@ChosenReport.ObjectType" ChosenCondition="@ChosenReport.ObjectFactory.Filter" ChosenConditionChanged="@OnFilterChanged" />
    </RadzenStepsItem>

    <RadzenStepsItem Text="בניית תצוגה">
        <CipherDataGrouper ComponentType="@ChosenReport.ObjectType"
                           Title="@(new ObjectFactory().Translate(nameof(ObjectFactory.GroupBy)))" @ref=dataGrouper ChosenGroupsChanged="@OnGroupsChanged" ChosenGroups="@ChosenReport.ObjectFactory.GroupBy" />

        <CipherDataAggregater @ref=dataAggregater Title="בחירת שדות ופונקציות" ChosenType="@ChosenReport.ObjectType"
        AggregationFields="@ChosenReport.ObjectFactory.GroupBy" ChosenAggregates="@(ChosenReport.ObjectFactory.Aggregate ?? new())" 
        ChosenAggregatesChanged="@OnAggregatesChanged" />
    </RadzenStepsItem>
    <RadzenStepsItem Text="תצוגה מקדימה ושמירה">

        <CipherComponentCard BackgroundColor="@Colors.PrimaryLight">
            <CipherComponentCard Title="פרמטרים" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
                @foreach (ReportParameter param in ChosenReport.Parameters)
                {
                    if (param.ParamType.FieldType == typeof(DateTime))
                    {
                        <CipherDatePicker @ref=cipherDate Label="@param.Name" ValueChanged="@(args=> param.Value = cipherDate.Value.ToString())"/>
                    }
                    else if (param.ParamType.FieldType == typeof(Unit))
                    {
                        <CipherUnitDropDown @ref=cipherUnit Label="@param.Name" Change="@(args=>param.Value =cipherUnit.ChosenUnit?.Id)" />
                    }
                    else if (param.ParamType.FieldType == typeof(Vessel))
                    {
                        <CipherVesselDropDown @ref=cipherVes Label="@param.Name" Change="@(args=>param.Value =cipherVes.ChosenVessel?.Id)" />
                    }
                    else if (param.ParamType.FieldType == typeof(StorageSystem))
                    {
                        <CipherLocation @ref=cipherSys Label="@param.Name" Change="@(args=>param.Value = cipherSys.ChosenSystem?.Id)" />
                    }
                    else if (param.ParamType.FieldType == typeof(decimal))
                    {
                        <CipherNumeric @ref=cipherNumber Label="@param.Name" AmountChanged="@(args=>param.Value = cipherNumber.Amount.ToString())" />
                    }
                    else
                    {
                        <CipherAutoComplete @ref=cipherText Placeholder="@param.Name" Change="@(args=>param.Value = cipherText.Value)" />
                    }
                }
            </CipherComponentCard>
            <CipherFilterObjects ChosenType="@ChosenReport.ObjectType" ChosenCondition="@ChosenReport.ObjectFactory.Filter" WithFilter="false"/>

            <CipherSubmit Click="@OnSave" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
        </CipherComponentCard>
    </RadzenStepsItem>
</CipherSteps>
<CipherJsonCheck JsonValue="@ChosenReport.ToJson()" />

@code {
    /// <summary>
    /// Is report valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message that will be presented to user upon bad submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public Report ChosenReport { get; set; } = new();

    private CipherAutoComplete ReportName = new();
    private CipherDataGrouper dataGrouper = new();
    private CipherDataAggregater dataAggregater = new();
    private CipherFilterObjects ReportFilter = new();

    private CipherDatePicker cipherDate = new();
    private CipherUnitDropDown cipherUnit = new();
    private CipherVesselDropDown cipherVes = new();
    private CipherLocation cipherSys = new();
    private CipherNumeric cipherNumber = new();
    private CipherAutoComplete cipherText = new();

    private CipherSubmit submission = new();

    protected override async Task OnInitializedAsync()
    {
        ChosenReport.Id = await _db.GetLastReportId() + 1;
    }

    private void OnFilterChanged(Tuple<GroupedBooleanCondition,Type> newFilter)
    {
        ChosenReport.ObjectFactory.Filter = newFilter.Item1;
        ChosenReport.ObjectType = newFilter.Item2;
    }

    private void OnParametersChanged(List<ReportParameter> newParameters) => ChosenReport.Parameters = newParameters;

    private void OnGroupsChanged(List<string> newGroups) => ChosenReport.ObjectFactory.GroupBy = newGroups;

    private void OnAggregatesChanged(List<AggregateItem> newAggregates) => ChosenReport.ObjectFactory.Aggregate = newAggregates;

    public async Task OnSave()
    {
        Valid = true;
        ErrorMessage = string.Empty;

        ChosenReport.Title = ReportName.Value;
        ChosenReport.CreationDate = DateTime.Now;
        ChosenReport.Creator = Constants.SetUser.Name;

        var Result = ChosenReport.Check();

        if (Result.Item1)
        {
            JsonRequest = ChosenReport.ToJson();

            await _db.InsertReport(ChosenReport);
            await OpenSavingDialog();
        }
        else
        {
            Valid = false;
            ErrorMessage = Result.Item2;
        }

        UpdateSubmissionSummary();
    }

    private void UpdateSubmissionSummary()
    {
        submission.Valid = Valid;
        submission.ErrorMessage = ErrorMessage;
    }

    public async Task OpenSavingDialog()
    {
        await DialogService.OpenAsync("דוח חדש",

        ds =>
    @<CipherComponentCard WithCard="false">
        <CipherComponentCard WithCard="false" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
            <CipherAutoComplete Icon="@Icons.Cipher.Id" Label="@ChosenReport.Translate(nameof(ChosenReport.Id))" Value="@ChosenReport.Id.ToString()"/>
            <CipherAutoComplete Icon="@Icons.Cipher.Package" Label="@ChosenReport.Translate(nameof(ChosenReport.Title))" Value="@ChosenReport.Title" />
            <CipherAutoComplete Icon="@Icons.Social.SinglePerson.person" Label="@ChosenReport.Translate(nameof(ChosenReport.Creator))" Value="@ChosenReport.Creator" />
            <CipherDatePicker Label="@ChosenReport.Translate(nameof(ChosenReport.CreationDate))" Value="@ChosenReport.CreationDate" />
        </CipherComponentCard>
        <br/>
        <CipherJsonCheck JsonValue="@JsonRequest" />
        <br/>
        <CipherNavButton Path="@ChosenReport.Path()" Text="קישור לדוח" Icon="@Icons.Arrows.Squared.open_in_new" Width="100%" />
    </CipherComponentCard>
    
    , Constants.SetDialogOptions);
    }
}