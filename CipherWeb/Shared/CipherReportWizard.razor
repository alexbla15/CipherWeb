@inject DialogService DialogService

@inject ICipherInfo _db
@inject NavigationManager NavigationManager

@using CipherWeb.Pages.Forms
@using System.Reflection;

@if (Visible)
{
<CipherSteps>
    <RadzenStepsItem Text="קביעת פרמטרים">
        <CipherComponentCard Title="בחירת שם לדוח" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
                <CipherAutoComplete Value="@(ChosenReport?.Id.ToString())" Label="@Report.Translate(nameof(Report.Id))" Icon="@Icons.Cipher.Id" Disabled="true" />
                <CipherAmount @ref="CurrVersion" Disabled="true" Amount="@(UpdateMode ? ChosenReport.Version + 1 : ChosenReport.Version)" 
                Label="@Report.Translate(nameof(Report.Version))" Icon="@Icons.Documents.Edit.edit" />
                <CipherAutoComplete @bind-Value="ChosenReport.Title" Label="@Report.Translate(nameof(Report.Title))" Icon="@Icons.Documents.assignment" @ref="ReportName" />
        </CipherComponentCard>
        <CipherParametrization ChosenParameters="@ChosenReport?.Parameters" ChosenParametersChanged="@OnParametersChanged" />
    </RadzenStepsItem>

    <RadzenStepsItem Text="אובייקטים לתצוגה">
        <CipherFilterObjects @ref=ReportFilter ChosenType="@ChosenReport?.ObjectType" ChosenCondition="@ChosenReport?.ObjectFactory.Filter" 
        ChosenConditionChanged="@OnFilterChanged" />
    </RadzenStepsItem>

    <RadzenStepsItem Text="בניית תצוגה">
        <CipherDataGrouper ComponentType="@ChosenReport?.ObjectType"
                           Title="@(IObjectFactory.Translate(nameof(IObjectFactory.GroupBy)))" @ref=dataGrouper ChosenGroupsChanged="@OnGroupsChanged" ChosenGroups="@ChosenReport.ObjectFactory.GroupBy" />

        <CipherDataAggregater @ref=dataAggregater Title="בחירת שדות ופונקציות" ChosenType="@ChosenReport.ObjectType"
                              AggregationFields="@ChosenReport.ObjectFactory.GroupBy" ChosenAggregates="@(ChosenReport.ObjectFactory.Aggregate ?? new())"
                              ChosenAggregatesChanged="@OnAggregatesChanged" />
    </RadzenStepsItem>

    <RadzenStepsItem Text="תצוגה מקדימה ושמירה">

        <CipherComponentCard BackgroundColor="@Colors.PrimaryLight">
            <RadzenStack Orientation="Orientation.Vertical">
                @if (Valid)
                {
                    <CipherComponentCard Title="פרמטרים" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
                        @foreach (ReportParameter param in ChosenReport.Parameters)
                        {
                            if (param.ParamType?.FieldType == typeof(DateTime))
                            {
                                <CipherDatePicker @ref=cipherDate Label="@param.Name" ValueChanged="@(args=> param.Value = cipherDate.Value.ToString())" />
                            }
                            else if (param.ParamType?.FieldType == typeof(IUnit))
                            {
                                <CipherUnitDropDown @ref=cipherUnit Label="@param.Name" Change="@(args=>param.Value =cipherUnit.ChosenUnit?.Id)" />
                            }
                            else if (param.ParamType?.FieldType == typeof(IVessel))
                            {
                                <CipherVesselDropDown @ref=cipherVes Label="@param.Name" Change="@(args=>param.Value =cipherVes.ChosenVessel?.Id)" />
                            }
                            else if (param.ParamType?.FieldType == typeof(IStorageSystem))
                            {
                                <CipherLocation @ref=cipherSys Label="@param.Name" Change="@(args=>param.Value = cipherSys.ChosenSystem?.Id)" />
                            }
                            else if (param.ParamType?.FieldType == typeof(decimal))
                            {
                                <CipherNumeric @ref=cipherNumber Label="@param.Name" AmountChanged="@(args=>param.Value = cipherNumber.Amount.ToString())" />
                            }
                            else
                            {
                                <CipherAutoComplete @ref=cipherText Label="@param.Name" Change="@(args=>param.Value = cipherText.Value)" ShowErrors="false" />
                            }
                        }
                    </CipherComponentCard>
                    <CipherFilterObjects WithButtons="false" ChosenType="@ChosenReport?.ObjectType" ChosenCondition="@ChosenReport.ObjectFactory.Filter" WithFilter="false" />
                }
                <CipherSubmit Click="@OnSave" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />

                @if(Submitted)
                {
                    <CipherNavButton Path="@ChosenReport?.Path()" Text="קישור לדוח" Icon="@Icons.Arrows.Squared.open_in_new" Width="100%" />
                }
            </RadzenStack>
        </CipherComponentCard>
    </RadzenStepsItem>
</CipherSteps>
<CipherJsonCheck JsonValue="@ChosenReport?.ToJson()" />
}

@code {
    /// <summary>
    /// Is component visible
    /// </summary>
    [Parameter]
    public bool Visible { get; set; } = true;

    /// <summary>
    /// Is wizard used on update mode
    /// </summary>
    [Parameter]
    public bool UpdateMode { get; set; } = false;

    /// <summary>
    /// Is report submitted to db.
    /// </summary>
    [Parameter]
    public bool Submitted { get; set; } = false;

    /// <summary>
    /// Is report valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message that will be presented to user upon bad submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public Report? ChosenReport { get; set; } = new();

    [Parameter]
    public Report OriginalReport { get; set; } = new();

    /// <summary>
    /// API response.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherAutoComplete ReportName = new();
    private CipherDataGrouper dataGrouper = new();
    private CipherDataAggregater dataAggregater = new();
    private CipherFilterObjects ReportFilter = new();

    private CipherDatePicker cipherDate = new();
    private CipherUnitDropDown cipherUnit = new();
    private CipherVesselDropDown cipherVes = new();
    private CipherLocation cipherSys = new();
    private CipherNumeric cipherNumber = new();
    private CipherAutoComplete cipherText = new();
    private CipherAmount CurrVersion = new();
    private CipherSubmit submission = new();

    protected override async Task OnInitializedAsync() 
    {
        ChosenReport ??= new();

        if (!UpdateMode) ChosenReport.Id = await _db.GetLastReportId() + 1;
    }

    private void OnFilterChanged(Tuple<IGroupedBooleanCondition, Type> newFilter)
    {
        if (ChosenReport != null)
        {
            ChosenReport.ObjectFactory.Filter = newFilter.Item1;
            ChosenReport.ObjectType = newFilter.Item2;
        }
    }

    private void OnParametersChanged(List<ReportParameter> newParameters)
    {
        if (ChosenReport != null) ChosenReport.Parameters = newParameters;
    }

    private void OnGroupsChanged(List<string> newGroups)
    {
        if (ChosenReport != null) ChosenReport.ObjectFactory.GroupBy = newGroups;
    }

    private void OnAggregatesChanged(List<IAggregateItem> newAggregates) 
    {
        if (ChosenReport != null) ChosenReport.ObjectFactory.Aggregate = newAggregates;
    }

    public void Reset()
    {
        Valid = true;
        ErrorMessage = string.Empty;
        Submitted = false;
    }

    public bool CheckForm()
    {
        ChosenReport.Title = ReportName.Value;
        ChosenReport.CreationDate = DateTime.Now;
        ChosenReport.Creator = Constants.SetUser.Name;
        ChosenReport.Version = (int)CurrVersion.GetAmount();

        if (Valid) (Valid, ErrorMessage) = ChosenReport.Check();

        return Valid;
    }

    public async Task OnSave()
    {
        Reset();

        if (ChosenReport is null)
        {
            (Valid, ErrorMessage) = Tuple.Create(false, "שגיאת מערכת");
        }
        else if (!UpdateMode)
        {
            (Valid, ErrorMessage) = await ChosenReport.ExistsInDb(_db);
        }
        else
        {
            (Valid, ErrorMessage) = await ChosenReport.ExistsInDb(_db, true);
            if (Valid) CheckForDifference();
        }

        if (Valid && CheckForm()) await SubmitReport();

        UpdateSubmissionSummary();
    }

    public void CheckForDifference()
    {
        if (ChosenReport is null)
        {
            Valid = false;
            ErrorMessage = "שגיאת מערכת";
            return;
        }

        bool equal = !ChosenReport.Different(OriginalReport);
        if (equal)
        {
            Valid = false;
            ErrorMessage = "לא נעשה שינוי בין גרסה זו של הדוח לגרסה הקיימת";
        }
    }

    public async Task SubmitReport()
    {
        JsonRequest = ChosenReport.ToJson();
        await _db.InsertReport(ChosenReport);
        Submitted = true;
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }
}