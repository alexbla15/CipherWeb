@inject DialogService DialogService

@inherits CipherSteps

<CipherSteps>
    <RadzenStepsItem Text="קביעת פרמטרים">
        <CipherComponentCard Title="בחירת שם לדוח" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
            <CipherAutoComplete @bind-Value="ChosenReport.Id" Label="מספר סידורי" Icon="@Icons.Cipher.Id" Disabled="true"/>
            <CipherAutoComplete @bind-Value="ChosenReport.Title" Label="שם הדוח" Icon="@Icons.Documents.Edit.edit" @ref="ReportName" />
        </CipherComponentCard>
        <CipherParametrization ChosenParameters="@ChosenReport.Parameters"/>
    </RadzenStepsItem>

    <RadzenStepsItem Text="אובייקטים לתצוגה">
        <SearchAdvanced/>
    </RadzenStepsItem>

    <RadzenStepsItem Text="בניית תצוגה">
        <CipherDataGrouper Cipher_TItem="Package" Title="בחירת קבוצות" groupLevels=1 @ref=dataGrouper></CipherDataGrouper>

        <CipherDataAggregater @ref=dataAggregater Title="בחירת שדות ופונקציות"/>

        <CipherComponentCard Title="תצוגה מקדימה">
            <Buttons>
                <CipherButton Icon="@Icons.Arrows.Rounded.refresh" HelpText="עדכון תצוגה" Click="@OnRefresh" Variant="Variant.Outlined"></CipherButton>
                <CipherButton Icon="@Icons.Documents.Edit.save" HelpText="שמירת דוח" Variant="Variant.Outlined"></CipherButton>
                <CipherExcelButton Data="@events"></CipherExcelButton>
                <CipherPDFButton></CipherPDFButton>
            </Buttons>
            <ChildContent>
                <CipherDataGrid ColumnNames="@GetColumns()" DataSource="@rows" ColumnsOrder="@rowsColumnsOrder" />
            </ChildContent>
        </CipherComponentCard>
    </RadzenStepsItem>
    <RadzenStepsItem Text="תצוגה מקדימה ושמירה">

        <CipherComponentCard BackgroundColor="@Colors.PrimaryLight">
            <CipherRestriction></CipherRestriction>
            <br />
            <CipherComponentCard Title="פרמטרים" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
                <CipherDatePicker Label="תאריך התחלה"></CipherDatePicker>
                <CipherDatePicker Label="תאריך סיום"></CipherDatePicker>
            </CipherComponentCard>
            <CipherEventsTable WithHeaderContent="false" WithCard="true"></CipherEventsTable>
            <CipherComponentCard Title="סיום" >
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="10px">
                    <CipherSubmitButton Size="ButtonSize.Medium" Click="@OpenSavingDialog"/>
                    <CipherNavButton ColorStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Icon="@Icons.Documents.Delete.cancel" 
                    Text="ביטול" Path="@CipherNavLinks.Reports.Href" Size="ButtonSize.Medium"></CipherNavButton>
                </RadzenStack>
            </CipherComponentCard>
        </CipherComponentCard>
    </RadzenStepsItem>
</CipherSteps>

@code {
    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    [Parameter]
    public Report ChosenReport { get; set; } = new();

    private List<Event> events = new();

    private CipherAutoComplete ReportName = new();
    private CipherDataGrouper<Package> dataGrouper = new();
    private CipherDataAggregater dataAggregater = new CipherDataAggregater();

    private List<Package> rows = new();
    private Dictionary<string, int> rowsColumnsOrder = new ();

    private ErrorResponse error = ErrorResponse.Success;

    private List<Package> packs = new();
    private List<StorageSystem> systems = new ();
    private List<Vessel> vessels = new();

    protected override void OnInitialized()
    {
        (events, error) = CachedData.AllEvents;
        (packs, error) = CachedData.AllPackages;
        (rows, error) = CachedData.AllPackages;
        (systems, error) = CachedData.AllSystems;
        (vessels, error) = CachedData.AllVessels;
    }

    /// <summary>
    /// Get translation between (english, hebrew) column names for table.
    /// </summary>
    /// <returns></returns>
    private HashSet<Tuple<string, string>> GetColumns()
    {
        return HebrewDictionary.Headers;
    }

    /// <summary>
    ///  Set the columns order within datagrid.
    /// </summary>
    void SetColumnsOrder()
    {
        rowsColumnsOrder.Clear();

        // first columns must be the grouped-by columns
        foreach (int order in dataGrouper.chosenGroups.Keys)
        {
            if (!string.IsNullOrEmpty(dataGrouper.chosenGroups[order]))
            {
                rowsColumnsOrder.Add(CipherWeb.CommonFuncs.DeTranslateField(dataGrouper.chosenGroups[order]), order);
            }
        }

        int counter = dataGrouper.groupLevels;

        // next columns according to the order of the aggregation
        List<AggregateItem> aggregates = dataAggregater.GetData();

        foreach (AggregateItem agg in aggregates)
        {
            if (!rowsColumnsOrder.ContainsKey(agg.Attribute))
            {
                rowsColumnsOrder.Add(agg.Attribute, aggregates.IndexOf(agg));
            }
            counter += 1;
        }
    }

    /// <summary>
    /// Updating datagrid table to show results.
    /// </summary>
    public void OnRefresh()
    {
        rows = new List<Package>();

        foreach (StorageSystem sys in systems)
        {
            foreach (Vessel ves in vessels)
            {
                Package pack = new();
                pack.System = sys;
                pack.Vessel = ves;
                pack.BrutMass = packs.Where<Package>(x => x.System.Id == sys.Id && x.Vessel?.Id == ves.Id).Select(x => x.BrutMass).Sum();
                pack.NetMass = packs.Where<Package>(x => x.System.Id == sys.Id && x.Vessel?.Id == ves.Id).Select(x => x.NetMass).Sum();
                rows.Add(pack);
            }
        }
        SetColumnsOrder();
    }


    public async Task OpenSavingDialog()
    {
        ChosenReport.Title = ReportName.Value;

        JsonRequest = ChosenReport.ToJson();

        await DialogService.OpenAsync("דוח חדש",

        ds =>
    @<CipherComponentCard WithCard="false">
        <CipherComponentCard WithCard="false" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
            <CipherAutoComplete Label="מספר הדוח" Value="111111"/>
            <CipherAutoComplete Label="שם הדוח" Value="הדוח שלי"/>
            <CipherAutoComplete Label="מידור" Value="מוגבל"/>
        </CipherComponentCard>
        <br/>
        <CipherJsonCheck JsonValue="@JsonRequest" />
        <br/>
        <CipherButton Text="קישור לדוח" Icon="@Icons.Arrows.Squared.open_in_new" Width="100%" />
    </CipherComponentCard>
    
    , Constants.SetDialogOptions);
    }
}