@inject ICipherInfo _db

@inherits CipherSteps

<CipherSteps>
    <RadzenStepsItem Text="קביעת פרמטרים">
        <CipherParametrization></CipherParametrization>
    </RadzenStepsItem>

    <RadzenStepsItem Text="אובייקטים לתצוגה">
        <SearchAdvanced />
    </RadzenStepsItem>

    <RadzenStepsItem Text="בניית תצוגה">
        <CipherDataGrouper Cipher_TItem="Package" Title="בחירת קבוצות" groupLevels=1 @ref=dataGrouper></CipherDataGrouper>

        <CipherDataAggregater @ref=dataAggregater Title="בחירת שדות ופונקציות"
                              AggregationFields="@dataFilterPackages.FilterFields.ToList()"></CipherDataAggregater>

        <CipherComponentCard Title="תצוגה מקדימה">
            <Buttons>
                <CipherButton Icon="@Icons.Refresh" HelpText="עדכון תצוגה" Click="@OnRefresh" Variant="Variant.Outlined"></CipherButton>
                <CipherButton Icon="@Icons.Save" HelpText="שמירת דוח" Variant="Variant.Outlined"></CipherButton>
                <CipherExcelButton Data="@db_events"></CipherExcelButton>
                <CipherPDFButton></CipherPDFButton>
            </Buttons>
            <ChildContent>
                <CipherDataGrid ColumnNames="@GetColumns()" DataSource="@rows" ColumnsOrder="@rowsColumnsOrder" />
            </ChildContent>
        </CipherComponentCard>
    </RadzenStepsItem>
    <RadzenStepsItem Text="תצוגה מקדימה ושמירה">

        <CipherComponentCard BackgroundColor="@Colors.PrimaryLight">
            <CipherRestriction></CipherRestriction>
            <br />
            <CipherComponentCard Title="פרמטרים" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
                <CipherDatePicker Label="תאריך התחלה"></CipherDatePicker>
                <CipherDatePicker Label="תאריך סיום"></CipherDatePicker>
            </CipherComponentCard>
            <CipherEventsTable WithHeaderContent="false" WithCard="true"></CipherEventsTable>
            <CipherComponentCard Title="סיום" >
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="10px">
                    <CipherSubmitButton Size="ButtonSize.Medium" />
                    <CipherNavButton ColorStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Icon="@Icons.Cancel" 
                    Text="ביטול" Path="@CipherNavLinks.Reports.Href" Size="ButtonSize.Medium"></CipherNavButton>
                    <CipherButton Variant="Variant.Outlined" Icon="@Icons.Star" Text="הוספה למועדפים"></CipherButton>
                    <CipherButton Variant="Variant.Outlined" Icon="@Icons.Mail" Text="שיתוף"></CipherButton>
                </RadzenStack>
            </CipherComponentCard>
        </CipherComponentCard>
    </RadzenStepsItem>
</CipherSteps>

@code {
    private List<Event> db_events = new List<Event>();

    private CipherDataGrouper<Package> dataGrouper = new CipherDataGrouper<Package>();
    private CipherDataFilter_WithDataGrid<Event> dataFilter = new CipherDataFilter_WithDataGrid<Event>();
    private CipherDataFilter_WithDataGrid<Package> dataFilterPackages = new CipherDataFilter_WithDataGrid<Package>();
    private CipherDataAggregater dataAggregater = new CipherDataAggregater();

    private List<Package> rows = TestedData.Packages;
    private Dictionary<string, int> rowsColumnsOrder = new Dictionary<string, int> { };

    class ExampleSummary
    {
        public string Location { get; set; }
        public string Vessel { get; set; }
        public decimal BrutMass { get; set; }
        public decimal NetMass { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        db_events = await _db.GetEvents();
    }

    /// <summary>
    /// Get translation between (english, hebrew) column names for table.
    /// </summary>
    /// <returns></returns>
    private List<Tuple<string, string>> GetColumns()
    {
        if (dataGrouper.chosenGroups.Keys.Count() == 0 && dataAggregater.GetData().Count() == 0)
        {
            return HebrewDictionary.Headers;
        }
        else
        {
            return HebrewDictionary.Headers.Where(x =>
                dataGrouper.chosenGroups.ContainsValue(x.Item2) ||
                dataAggregater.GetData().Select(x => x.Parameter).ToList().Contains(x.Item2)
            ).ToList();
        }
    }

    /// <summary>
    ///  Set the columns order within datagrid.
    /// </summary>
    void SetColumnsOrder()
    {
        rowsColumnsOrder.Clear();

        // first columns must be the grouped-by columns
        foreach (int order in dataGrouper.chosenGroups.Keys)
        {
            if (!string.IsNullOrEmpty(dataGrouper.chosenGroups[order]))
            {
                rowsColumnsOrder.Add(CommonFuncs.DeTranslateField(dataGrouper.chosenGroups[order]), order);
            }
        }

        int counter = dataGrouper.groupLevels;

        // next columns according to the order of the aggregation
        List<CipherDataAggregater.Aggregate> aggregates = dataAggregater.GetData();

        foreach (CipherDataAggregater.Aggregate agg in aggregates)
        {
            if (!rowsColumnsOrder.ContainsKey(agg.Parameter))
            {
                rowsColumnsOrder.Add(agg.Parameter, agg.Id);
            }
            counter += 1;
        }
    }

    /// <summary>
    /// Updating datagrid table to show results.
    /// </summary>
    public void OnRefresh()
    {
        rows = new List<Package>();

        List<string> vessels = TestedData.Packages.Select(x => x.Vessel.Id).Distinct().ToList();

        foreach (StorageSystem sys in Constants.systems)
        {
            foreach (Vessel ves in Constants.vessels)
            {
                rows.Add(new Package()
                    {
                        System = sys,
                        Vessel = ves,
                        BrutMass = TestedData.Packages.Where(x => x.System.Id == sys.Id && x.Vessel.Id == ves.Id).Select(x => x.BrutMass).Sum(),
                        NetMass = TestedData.Packages.Where(x => x.System.Id == sys.Id && x.Vessel.Id == ves.Id).Select(x => x.NetMass).Sum()
                    });
            }
        }
        SetColumnsOrder();
    }
}