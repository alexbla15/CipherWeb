@page "/Search/Advanced"

<PageTitle>חיפוש מתקדם</PageTitle>

<CipherComponentCard Title="נא לבחור אובייקטים לתצוגה" ContentJustify="center" ContentDisplay="flex">
    <RadzenSelectBar @bind-Value="@objectId" Multiple="false" TValue="int">
        <Items>
            @foreach (string objType in objectTypes)
            {
                <RadzenSelectBarItem Text="@objType" Value="@objectTypes.IndexOf(objType)" />
            }
        </Items>
    </RadzenSelectBar>
</CipherComponentCard>
@RenderCipherDataFilter(objectId)
@RenderCipherDataGrid(objectId)

@code {
    [Parameter]
    public int objectId { get; set; }

    [Parameter]
    public List<string> objectTypes { get; set; } = new () { "תעודות", "כלים", "מערכות", "תנועות", "תהליכים", "סוגים" };

    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    [Parameter]
    public GroupedBooleanCondition Condition { get; set; } = new();

    private CipherBooleanConditions DataFilter = new();

    private List<Package> packs = new();
    private List<Vessel> vessels = new();
    private List<StorageSystem> systems = new();
    private List<Event> events = new();
    private List<Process> procs = new();
    private List<Category> categories = new();

    private RenderFragment? RenderCipherDataFilter(int objectId) => objectId switch
    {
        0 => @<CipherBooleanConditions @ref="DataFilter" OnSave="@SetCondition" AvailableAttributes="@(CommonFuncs.GetCipherTypeFields(typeof(Package)))" />,
        1 => @<CipherBooleanConditions @ref="DataFilter" OnSave="@SetCondition" AvailableAttributes="@(CommonFuncs.GetCipherTypeFields(typeof(Vessel)))" />,
        2 => @<CipherBooleanConditions @ref="DataFilter" OnSave="@SetCondition" AvailableAttributes="@(CommonFuncs.GetCipherTypeFields(typeof(StorageSystem)))" />,
        3 => @<CipherBooleanConditions @ref="DataFilter" OnSave="@SetCondition" AvailableAttributes="@(CommonFuncs.GetCipherTypeFields(typeof(Event)))" />,
        4 => @<CipherBooleanConditions @ref="DataFilter" OnSave="@SetCondition" AvailableAttributes="@(CommonFuncs.GetCipherTypeFields(typeof(Process)))" />,
        5 => @<CipherBooleanConditions @ref="DataFilter" OnSave="@SetCondition" AvailableAttributes="@(CommonFuncs.GetCipherTypeFields(typeof(Category)))" />,
        _ => null
    };

    private RenderFragment? RenderCipherDataGrid(int objectId) => objectId switch
    {
        0 => @<CipherPackagesTable ChosenPackages="@(GetFilteredObjects<Package>())" />,
        1 => @<CipherVesselsTable ChosenVessels="@(GetFilteredObjects<Vessel>())" />,
        2 => @<CipherSystemsTable ChosenSystems="@(GetFilteredObjects<StorageSystem>())" />,
        3 => @<CipherEventsTable ChosenEvents="@(GetFilteredObjects<Event>())" />,
        4 => @<CipherProcessesTable ChosenProcesses="@(GetFilteredObjects<Process>())" />,
        5 => @<CipherCategoriesTable ChosenCategories="@(GetFilteredObjects<Category>())" />,
        _ => null
    };


    public List<T> GetFilteredObjects<T>() where T : Resource
    {
        List<T> objects = new();
        ObjectFactory obj = new() { Filter = Condition };
        (objects, Error) = Config.QueryRequests.QueryObjects<T>(obj);
        return objects;
    }

    public void SetCondition() => Condition = DataFilter.ChosenCondition;
}
