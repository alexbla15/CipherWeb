@using System.Reflection;
@using CipherWeb.Pages.Forms
@inject NavigationManager Navigation

@typeparam Cipher_TItem

<ResourceForm @ref="ResourcePage" Title="@NavLink.Name">
    @if (typeof(Cipher_TItem) == typeof(Unit))
    {
        <CipherUnitCard Title="" WithCard="false" @ref="@unitCard" ChangeObject="ChangeUrl" ChosenObject="@(ChosenObject as Unit)"
                        SetMode="FormMode.ReadOnly" />
    }
    else if (typeof(Cipher_TItem) == typeof(Vessel))
    {
        <CipherVesselCard Title="" WithCard="false" @ref="@vesCard" ChangeObject="ChangeUrl" ChosenObject="@(ChosenObject as Vessel)"
                          SetMode="FormMode.ReadOnly" />
    }
    else if (typeof(Cipher_TItem) == typeof(StorageSystem))
    {
        <CipherSystemCard Title="" WithCard="false" @ref="@sysCard" ChangeObject="ChangeUrl" ChosenObject="@(ChosenObject as StorageSystem)"
                          SetMode="FormMode.ReadOnly" />
    }
    else if (typeof(Cipher_TItem) == typeof(Package))
    {
        <CipherPackageCard Title="" WithCard="false" @ref="@packCard" ChangeObject="ChangeUrl" ChosenObject="@(ChosenObject as Package)"
                          SetMode="FormMode.ReadOnly" />
    }
    else if (typeof(Cipher_TItem) == typeof(ProcessDefinition))
    {
        <CipherProcessCard Title="" WithCard="false" @ref="@procCard" ChangeObject="ChangeUrl" ChosenObject="@(ChosenObject as ProcessDefinition)"
                           SetMode="FormMode.ReadOnly" />
    }
    else if (typeof(Cipher_TItem) == typeof(Category))
    {
        <CipherCategoryCard Title="" WithCard="false" @ref="@catCard" ChangeObject="ChangeUrl" ChosenObject="@(ChosenObject as Category)"
                           SetMode="FormMode.ReadOnly" />
    }
    @if (ObjectHistory != null)
    {
        <CipherObjectChangesTable ObjectChanges="@ObjectHistory" />
    }
</ResourceForm>

@code {
    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public MySubNavLink? NavLink { get; set; }

    /// <summary>
    /// Chosen object upon searching
    /// </summary>
    [Parameter]
    public Cipher_TItem? ChosenObject { get; set; }

    /// <summary>
    /// All of object historic changes
    /// </summary>
    [Parameter]
    public UserActionResponse? ObjectHistory { get; set; }

    /// <summary>
    /// API response to search.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherUnitCard unitCard = new();
    private CipherVesselCard vesCard = new();
    private CipherSystemCard sysCard = new();
    private CipherPackageCard packCard = new();
    private CipherProcessCard procCard = new();
    private CipherCategoryCard catCard = new();

    private ResourceForm ResourcePage = new();

    /// <summary>
    /// Chosen objects mapping dictionary
    /// </summary>
    private Dictionary<Type, Func<object?>> chosenObjectMap;

    protected override void OnInitialized()
    {
        SetChosenObjMap();

        (ChosenObject, Error) = ResourcePage.GetObjectFromUrl<Cipher_TItem>(Navigation);
        GetObjectHistory();
    }

    public void SetChosenObjMap()
    {
        chosenObjectMap = new Dictionary<Type, Func<object?>>
        {
            { typeof(Unit), () => unitCard.ChosenObject },
            { typeof(Vessel), () => vesCard.ChosenObject },
            { typeof(StorageSystem), () => sysCard.ChosenObject },
            { typeof(Package), () => packCard.ChosenObject },
            { typeof(ProcessDefinition), () => procCard.ChosenObject },
            { typeof(Category), () => catCard.ChosenObject },
        };
    }

    /// <summary>
    /// Changes URL to include the chosen-unit id, upon searching it within the page.
    /// </summary>
    public void ChangeUrl()
    {
        ChosenObject = GetChosenObject();
        ResourcePage.ChangeUrl(Navigation, NavLink, GetObjectId(ChosenObject));
        GetObjectHistory();
    }

    /// <summary>
    /// Get the chosen object based on its type.
    /// </summary>
    private Cipher_TItem? GetChosenObject()
    {
        if (chosenObjectMap.TryGetValue(typeof(Cipher_TItem), out var chosenObjectFunc))
        {
            return (Cipher_TItem?)chosenObjectFunc?.Invoke();
        }
        return default;
    }

    /// <summary>
    /// Retrieve the object's ID for URL changes.
    /// </summary>
    private string? GetObjectId(object? obj)
    {
        return (obj as Resource)?.Id;
    }

    /// <summary>
    /// Method to get object history from UserActions function within the Resource-object
    /// </summary>
    public void GetObjectHistory()
    {
        if (ChosenObject == null)
        {
            (ObjectHistory, Error) = (null, ErrorResponse.Success);
            return;
        }

        MethodInfo? methodInfo = typeof(Cipher_TItem).GetMethod("UserActions");

        if (methodInfo != null)
        {
            var Result = methodInfo.Invoke(ChosenObject, null);
            if (Result is Tuple<UserActionResponse?, ErrorResponse> tupleResult)
            {
                (ObjectHistory, Error) = tupleResult;
            }
        }
    }
}
