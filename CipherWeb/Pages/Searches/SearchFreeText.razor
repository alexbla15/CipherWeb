@page "/Search/FreeSearch/"

@inject ICipherInfo _db
@inject DialogService DialogService
@inject NavigationManager navigationManager

<PageTitle>חיפוש חופשי</PageTitle>

<CipherComponentCard Title="תוצאות חיפוש עבור" HeaderContentPaddingRight="10px" MaxHeigth="100%">
    <HeaderContent>
        <CipherAutoComplete @ref=autoComplete Data="@AllPacks" TextProperty="Id" @bind-value="SearchText" OnKeyDown="EnteredSearchFunc" />
    </HeaderContent>
    <ChildContent>
        <RadzenAccordion Style="@($"background-color: {CipherColors.PrimaryLightest};")" Multiple="true">
            <Items>
                @foreach (var data in AllData)
                {
                    <RadzenAccordionItem Text="@($"{data.Item1} ({data.Item2.Count()})")">
                        <CipherComponentCard>
                            @if (data.Item2 is List<Package>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<Package>())" WithTotalFooter=false ColumnNames="@Package.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<Event>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<Event>())" WithTotalFooter=false ColumnNames="@Event.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<StorageSystem>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<StorageSystem>())" WithTotalFooter=false ColumnNames="@StorageSystem.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<Process>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<Process>())" WithTotalFooter=false ColumnNames="@Process.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<ProcessDefinition>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<ProcessDefinition>())" WithTotalFooter=false ColumnNames="@ProcessDefinition.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<Vessel>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<Vessel>())" WithTotalFooter=false ColumnNames="@Vessel.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<Unit>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<Unit>())" WithTotalFooter=false ColumnNames="@Unit.Headers()"></CipherDataGrid>
                            }
                            else if (data.Item2 is List<Category>)
                            {
                                <CipherDataGrid DataSource="@(data.Item2.Cast<Category>())" WithTotalFooter=false ColumnNames="@Category.Headers()"></CipherDataGrid>
                            }
                        </CipherComponentCard>
                    </RadzenAccordionItem>
                }
            </Items>
        </RadzenAccordion>
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Searched text within autocomplete box
    /// </summary>
    [Parameter]
    public string SearchText { get; set; } = string.Empty;

    /// <summary>
    /// Event in case a key was pressed within AutoComplete box.
    /// </summary>
    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    /// <summary>
    /// Path to be searched in case on Enter pressed.
    /// </summary>
    [Parameter]
    public string SearchPath { get; set; } = CipherNavLinks.FreeSearch.Href;

    private List<Package> AllPacks = Package.All().Item1;

    private static List<Package>? packs = new List<Package>();
    private static List<Vessel>? vessels = new List<Vessel>();
    private static List<StorageSystem>? systems = new List<StorageSystem>();
    private static List<Unit>? units = new List<Unit>();
    private static List<Category>? categories = new List<Category>();
    private static List<Event>? events = new List<Event>();
    private static List<Process>? processes = new List<Process>();
    private static List<ProcessDefinition>? processes_definitions = new List<ProcessDefinition>();

    private List<Tuple<string, IEnumerable<Resource>?>> AllData = new(){
        new("תעודות", packs),
        new("מערכות", systems),
        new("יחידות", units),
        new("תנועות", events),
        new("תהליכים", processes),
        new("סוגי תהליכים", processes_definitions),
        new("כלים", vessels),
        new("קטגוריות", categories),
                    };

    private ErrorResponse error = ErrorResponse.Success;
    private CipherAutoComplete autoComplete = new CipherAutoComplete();

    protected override async void OnParametersSet()
    {
        // get current URI
        var uri = new Uri(navigationManager.Uri);
        // get parameter from uri (the searched text in this case)
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // only navigate there if parameter was successfuly recieved
        if (queryParameters.TryGetValue("search", out var searchValue))
        {
            SearchText = searchValue;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Collect needed results
        (packs, error) = Package.Containing(SearchText);
        (vessels, error) = Vessel.Containing(SearchText);
        (systems, error) = StorageSystem.Containing(SearchText);
        (units, error) = Unit.Containing(SearchText);
        (categories, error) = Category.Containing(SearchText);
        (events, error) = Event.Containing(SearchText);
        (processes, error) = Process.Containing(SearchText);
        (processes_definitions, error) = ProcessDefinition.Containing(SearchText);

        // Show error dialog if something went wrong fetching data
        if (error != ErrorResponse.Success)
        {
            await ShowError();
        }

        // Set default OnKeyDown if not provided
        if (!OnKeyDown.HasDelegate)
        {
            OnKeyDown = EventCallback.Factory.Create<KeyboardEventArgs>(this, EnteredSearchFunc);
        }
    }

    /// <summary>
    /// Function taking place upon clicking Enter.s
    /// </summary>
    public async Task EnteredSearchFunc(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchFunc();
        }
    }

    /// <summary>
    /// Perform the search
    /// </summary>
    public async Task SearchFunc()
    {
        // Wait for a short duration to ensure SearchText is updated
        await Task.Delay(1);
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            // if value is acceptable, do the search
            if (autoComplete.Check())
            {
                // url to be shown upon searching
                string url = $"{SearchPath}?search={SearchText}";

                // if something went wrong, show error dialog
                if (error != ErrorResponse.Success)
                {
                    await ShowError();
                }
                // else go to the desired path
                else
                {
                    navigationManager.NavigateTo(url, forceLoad: true);
                }
            }
        }
    }

    /// <summary>
    /// Method to show error-dialog when needed
    /// </summary>
    /// <returns></returns>
    async Task ShowError()
    {
        await DialogService.OpenAsync("שגיאת מערכת",

                ds =>
        @<CipherErrorCard ErrorType="@error.Message" ErroredAction="@SearchText" Visible=@(error != ErrorResponse.Success) MarginTop="10px" MarginBottom="10px" />

,
        new DialogOptions() { Width = "800px", Height = "250px", Resizable = true, Draggable = true });


    }
}
