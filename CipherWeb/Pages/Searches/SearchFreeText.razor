@page "/Searches/FreeSearch/"

@inject DialogService DialogService
@inject NavigationManager navigationManager

<PageTitle>חיפוש חופשי</PageTitle>

<CipherComponentCard Title="תוצאות חיפוש עבור" HeaderContentPaddingRight="10px" MaxHeigth="100%">
    <HeaderContent>
        <RadzenTextBox @bind-Value="SearchText" @onkeydown="@EnteredSearchFunc" />
    </HeaderContent>
    <ChildContent>
        <RadzenAccordion Style="@($"background-color: {CipherColors.PrimaryLightest};")" Multiple="true">
            <Items>
                @foreach (var data in AllData)
                {
                    if (data.Item2?.Any() == true)
                    {
                        <RadzenAccordionItem Text="@($"{data.Item1} ({data.Item2.Count()})")">
                            <CipherComponentCard>
                                @RenderTable(data.Item2)
                            </CipherComponentCard>
                        </RadzenAccordionItem>
                    }
                }
            </Items>
        </RadzenAccordion>
    </ChildContent>
</CipherComponentCard>

@code {
    /// <summary>
    /// Searched text within autocomplete box
    /// </summary>
    [Parameter]
    public string SearchText { get; set; } = string.Empty;

    /// <summary>
    /// Path to be searched in case on Enter pressed.
    /// </summary>
    [Parameter]
    public string? SearchPath { get; set; } = CipherNavLinks.FreeSearch.Href;

    /// <summary>
    /// Event in case a key was pressed within AutoComplete box.
    /// </summary>
    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    /// <summary>
    /// Error response for fetching data
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private static List<IPackage>? packs = new();
    private static List<IVessel>? vessels = new();
    private static List<IStorageSystem>? systems = new();
    private static List<IUnit>? units = new();
    private static List<ICategory>? categories = new();
    private static List<IEvent>? events = new();
    private static List<IPackage>? packages = new();
    private static List<IProcess>? processes = new();

    private List<Tuple<string, IEnumerable<IResource>?>> AllData = new();

    private static readonly Dictionary<Type, Func<IEnumerable<IResource>, RenderFragment>> tableRenderers = new()
    {
        { typeof(IPackage), items => @<CipherPackagesTable ChosenObjects="@packs" WithHeaderContent="false" WithButtons="false" WithCard="false" Title="" /> },
        { typeof(IEvent), items => @<CipherEventsTable ChosenObjects="@events" WithHeaderContent="false" WithButtons="false" WithCard="false" Title="" /> },
        { typeof(IStorageSystem), items => @<CipherSystemsTable ChosenObjects="@systems" WithButtons="false" WithCard="false" Title="" /> },
        { typeof(IProcess), items => @<CipherProcessesTable ChosenObjects="@processes" WithHeaderContent="false" WithButtons="false" WithCard="false" Title="" /> },
        { typeof(IVessel), items => @<CipherVesselsTable ChosenObjects="@vessels" WithButtons="false" WithCard="false" Title="" /> },
        { typeof(IUnit), items => @<CipherUnitsTable ChosenObjects="@units" WithButtons="false" WithCard="false" Title="" /> },
        { typeof(ICategory), items => @<CipherCategoriesTable ChosenObjects="@categories" WithButtons="false" WithCard="false" Title="" /> }
    };

    private RenderFragment RenderTable(IEnumerable<IResource> items)
    {
        var type = items.FirstOrDefault()?.GetType();
        return type != null && tableRenderers.ContainsKey(type) ? tableRenderers[type](items) : @<div>No matching table found</div>;
    }

    private async Task<List<Tuple<string, IEnumerable<IResource>?>>> GetAllData()
    {
        if (!string.IsNullOrEmpty(SearchText))
        {
            (packs, Error) = await Config.Package.Containing(SearchText);
            (vessels, Error) = await Config.Vessel.Containing(SearchText);
            (systems, Error) = await Config.StorageSystem.Containing(SearchText);
            (units, Error) = await Config.Unit.Containing(SearchText);
            (categories, Error) = await Config.Category.Containing(SearchText);
            (events, Error) = await Config.Event.Containing(SearchText);
            (processes, Error) = await Config.Process.Containing(SearchText);
        }

        return new(){
        new("תעודות", packs),
        new("מערכות", systems),
        new("יחידות", units),
        new("תנועות", events),
        new("תהליכים", processes),
        new("כלים", vessels),
        new("קטגוריות", categories),
           };
    }

    protected override async Task OnParametersSetAsync()
    {
        // get current URI
        var uri = new Uri(navigationManager.Uri);
        // get parameter from uri (the searched text in this case)
        var queryParameters = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // only navigate there if parameter was successfuly recieved
        if (queryParameters.TryGetValue("search", out var searchValue))
        {
            SearchText = searchValue.ToString();
        }

        AllData = await GetAllData();
    }

    protected override async Task OnInitializedAsync()
    {
        // Show error dialog if something went wrong fetching data
        if (Error != ErrorResponse.Success) await ShowError();

        // Set default OnKeyDown if not provided
        if (!OnKeyDown.HasDelegate) OnKeyDown = EventCallback.Factory.Create<KeyboardEventArgs>(this, EnteredSearchFunc);
    }

    /// <summary>
    /// Function taking place upon clicking Enter.s
    /// </summary>
    public async Task EnteredSearchFunc(KeyboardEventArgs args)
    {
        if (args.Key == "Enter") await SearchFunc();
    }

    /// <summary>
    /// Perform the search
    /// </summary>
    public async Task SearchFunc()
    {
        // Wait for a short duration to ensure SearchText is updated
        await Task.Delay(1);

        if (!string.IsNullOrWhiteSpace(SearchText) && CheckField.CheckString(SearchText, "").Succeeded)
        {
            // url to be shown upon searching
            string url = $"{SearchPath}?search={SearchText}";

            // if something went wrong, show error dialog
            if (Error != ErrorResponse.Success)
            {
                await ShowError();
            }
            // else go to the desired path
            else
            {
                navigationManager.NavigateTo(url, forceLoad: true);
            }
        }
    }

    /// <summary>
    /// Method to show error-dialog when needed
    /// </summary>
    /// <returns></returns>
    async Task ShowError()
    {
        await DialogService.OpenAsync("שגיאת מערכת",
    ds =>
        @<CipherErrorCard ErrorType="@Error.Message" ErroredAction="@SearchText" Visible=@(Error != ErrorResponse.Success) MarginTop="10px" MarginBottom="10px" />
        ,
        new DialogOptions() { Width = "800px", Height = "250px", Resizable = true, Draggable = true });
    }
}
