@using System.Reflection
@using CipherWeb.Shared.FormUtils

@inject NavigationManager Navigation

@typeparam Cipher_TItem

<ResourceForm @ref="ResourcePage" Title="@NavLink?.Name">
    @RenderChosenCard()
    <CipherJsonCheck JsonValue="@JsonRequest" />
    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
</ResourceForm>

@code {
    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public CipherNavLink? NavLink { get; set; }

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// API result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Cipher_TItem? Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherSubmit submission = new();
    private ResourceForm ResourcePage = new();
    private CipherPackageInfo PackInfo = new();
    private CipherComments EventComments = new();
    private CipherFormInfo FormInfo = new();
    private CipherProcess EventProc = new();

    private IPackage NewPackage = new Package();
    private IUnitRequest unitRequest = new UnitRequest();
    private ICategoryRequest catRequest = new CategoryRequest();
    private IVesselRequest vesRequest = new VesselRequest();
    private IProcessDefinitionRequest procDefRequest = new ProcessDefinitionRequest();
    private ISystemRequest sysRequest = new SystemRequest();
    private ICreateEvent packRequest = new CreateEvent();

    private CipherUnitCard unitCard = new();
    private CipherVesselCard vesCard = new();
    private CipherSystemCard sysCard = new();
    private CipherProcessCard procCard = new();
    private CipherCategoryCard catCard = new();

    /// <summary>
    /// Retrieve the object's ID for URL changes.
    /// </summary>
    private string? GetObjectId(object? obj) => (obj as Resource)?.Id;

    /// <summary>
    /// Method to fill in the request and check it before submission.
    /// </summary>
    /// <returns></returns>
    private Tuple<bool, string> HandleSubmissionRequest()
    {
        if (typeof(Cipher_TItem) == typeof(IUnit))
        {
            unitRequest = unitCard.Value();
            return unitRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(ICategory))
        {
            catRequest = catCard.Value();
            return catRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IVessel))
        {
            vesRequest = vesCard.Value();
            return vesRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IProcessDefinition))
        {
            procDefRequest = procCard.Value();
            return procDefRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IStorageSystem))
        {
            sysRequest = sysCard.Value();
            return sysRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IPackage))
        {
            List<IPackageRequest> ChangedPacks = PackInfo.GetChangedPacks();
            packRequest = new CreateEvent()
            {
                Worker = FormInfo.GetWorker(),
                ProcessId = EventProc.ChosenProcess?.Id,
                Timestamp = FormInfo.GetDateTime(),
                EventType = 21,
                Actions = ChangedPacks,
                Comments = EventComments.GetValue()
            };
            return packRequest.Check();
        }

        return new (false, "שגיאת מערכת");
    }

    /// <summary>
    /// Method for submitting checked request, or showing errors within the checking process.
    /// </summary>
    public void Submit()
    {
        Valid = true;
        var requestCheck = HandleSubmissionRequest();

        if (!requestCheck.Item1)
        {
            Valid = false;
            ErrorMessage = requestCheck.Item2;
        }

        SendRequest();
        UpdateSubmissionSummary();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public void SendRequest()
    {
        if (!Valid) return;

        if (typeof(Cipher_TItem) == typeof(IUnit))
        {
            HandleRequest(() => SendUnitRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(ICategory))
        {
            HandleRequest(() => SendCategoryRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IVessel))
        {
            HandleRequest(() => SendVesselRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IProcessDefinition))
        {
            HandleRequest(() => SendProcessDefinitionRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IStorageSystem))
        {
            HandleRequest(() => SendSystemRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IPackage))
        {
            HandleRequest(() => SendPackageRequest());
        }
        else
        {
            Valid = false;
            ErrorMessage = "שגיאת מערכת";
        }

        if (Error != ErrorResponse.Success)
        {
            Valid = false;
            ErrorMessage = Error.Message;
        }
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }

    /// <summary>
    /// Method to check if there were changed in the object, and then sending its request to API.
    /// </summary>
    /// <param name="sendRequest">method to send the request to the API</param>
    private void HandleRequest(Func<Tuple<Cipher_TItem, ErrorResponse>?> sendRequest)
    {
        var requestResult = sendRequest();
        if (requestResult != null) (Result, Error) = requestResult.ToValueTuple();
    }

    public Tuple<Cipher_TItem, ErrorResponse>? SendUnitRequest()
    {
        JsonRequest = unitRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.UnitsRequests.CreateUnit(unitRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendCategoryRequest()
    {
        JsonRequest = catRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.CategoriesRequests.CreateCategory(catRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendVesselRequest()
    {
        JsonRequest = vesRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.VesselsRequests.CreateVessel(vesRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendProcessDefinitionRequest()
    {
        JsonRequest = procDefRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.ProcessesDefinitionsRequests.CreateProcessDefinition(procDefRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendSystemRequest()
    {
        JsonRequest = sysRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.SystemsRequests.CreateSystem(sysRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendPackageRequest()
    {
        JsonRequest = packRequest.ToJson();
        Tuple<IEvent, ErrorResponse> evResult = Config.EventsRequests.CreateEvent(packRequest);
        if (evResult.Item1.FinalStatePackages.Count > 0)
        {
            return (Tuple<Cipher_TItem, ErrorResponse>)(object)Tuple.Create(evResult.Item1.FinalStatePackages[0], evResult.Item2);
        }
        else
        {
            return (Tuple<Cipher_TItem, ErrorResponse>)(object)Tuple.Create(new Package(), evResult.Item2);
        }
    }

    /// <summary>
    /// Method to get the appropriate object-card to the selected type
    /// </summary>
    /// <returns></returns>
    private RenderFragment RenderChosenCard() =>
    @<div style="width:100%">
        @if (typeof(Cipher_TItem) == typeof(IUnit))
        {
            <CipherUnitCard Title="" WithCard="false" @ref="@unitCard" SetMode="FormMode.Create"/>
        }
        else if (typeof(Cipher_TItem) == typeof(ICategory))
        {
            <CipherCategoryCard Title="" WithCard="false" @ref="@catCard" SetMode="FormMode.Create" />
        }
        else if (typeof(Cipher_TItem) == typeof(IVessel))
        {
            <CipherVesselCard Title="" WithCard="false" @ref="@vesCard" SetMode="FormMode.Create" />
        }
        else if (typeof(Cipher_TItem) == typeof(IProcessDefinition))
        {
            <CipherProcessCard Title="" WithCard="false" @ref="@procCard" SetMode="FormMode.Create"/>
        }
        else if (typeof(Cipher_TItem) == typeof(IStorageSystem))
        {
            <CipherSystemCard Title="" WithCard="false" @ref="@sysCard" SetMode="FormMode.Create" />
        }
        else if (typeof(Cipher_TItem) == typeof(IPackage))
        {
            <CipherFormInfo @ref="FormInfo" />
            <CipherPackageInfo IsNew="true" Title="פרטי התעודה החדשה" @ref="PackInfo" />
            <CipherComponentCard Title="פרטי תנועה" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
                <CipherProcess @ref=EventProc Label="תהליך שיצר את התעודה" />
                <CipherComments @ref="EventComments" Width="300px" />
            </CipherComponentCard>
        }
    </div>;
}