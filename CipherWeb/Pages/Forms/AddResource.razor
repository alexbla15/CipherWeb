@using System.Reflection
@using CipherWeb.Shared.FormUtils

@inject NavigationManager Navigation

@typeparam Cipher_TItem

<ResourceForm @ref="ResourcePage" Title="@NavLink?.Name">
    @RenderChosenCard()
    <CipherJsonCheck JsonValue="@JsonRequest" />
    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
</ResourceForm>

@code {
    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public CipherNavLink? NavLink { get; set; }

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// API result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Cipher_TItem? Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherSubmit submission = new();
    private ResourceForm ResourcePage = new();
    private CipherPackageInfo PackInfo = new();
    private CipherComments EventComments = new();
    private CipherFormInfo FormInfo = new();
    private CipherProcess EventProc = new();

    private ICategory SetCategory = Config.Category();
    private IPackage SetPackage = Config.Package();
    private IProcessDefinition SetProc = Config.ProcessDefinition();
    private IStorageSystem SetSystem = Config.StorageSystem();
    private IUnit SetUnit = Config.Unit();
    private IVessel SetVessel = Config.Vessel();

    private IUnitRequest unitRequest = Config.UnitRequest();
    private ICategoryRequest catRequest = Config.CategoryRequest();
    private IVesselRequest vesRequest = Config.VesselRequest();
    private IProcessDefinitionRequest procDefRequest = Config.ProcessDefinitionRequest();
    private ISystemRequest sysRequest = Config.SystemRequest();
    private ICreateEvent packRequest = Config.CreateEvent();

    private CipherUnitCard unitCard = new();
    private CipherVesselCard vesCard = new();
    private CipherSystemCard sysCard = new();
    private CipherProcessCard procCard = new();
    private CipherCategoryCard catCard = new();

    public class AddResourceHandler
    {
        public Func<RenderFragment>? Card { get; set; }
        public Func<Tuple<bool, string>>? Check { get; set; }
        public Func<Task<Tuple<Cipher_TItem, ErrorResponse>?>>? SendRequest { get; set; }
        public Func<Task>? SetJsonRequest { get; set; }
    }

    private Dictionary<Type, AddResourceHandler> ResourceHandlers = new();

    private AddResourceHandler SetResourceHandler = new();

    protected override void OnInitialized()
    {
        SetHandlers();

        if (ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler))
        {
            SetResourceHandler = handler;
        }
        else
        {
            throw new Exception($"Can't find type {typeof(Cipher_TItem).Name}");
        }
    }

    private void SetHandlers()
    {
        ResourceHandlers.Add(typeof(IUnit), new AddResourceHandler()
                {
                    Card = () => RenderUnitCard(),
                    Check = () => unitRequest.Check(),
                    SendRequest = () => SendUnitRequest(),
                    SetJsonRequest = async () => { await InvokeAsync(SetUnitJsonRequest); }
                });

        ResourceHandlers.Add(typeof(ICategory), new AddResourceHandler()
                {
                    Card = () => RenderCategoryCard(),
                    Check = () => catRequest.Check(),
                    SendRequest = () => SendCategoryRequest(),
                    SetJsonRequest = async () => { await InvokeAsync(SetCategoryJsonRequest); }
                });

        ResourceHandlers.Add(typeof(IVessel), new AddResourceHandler()
                {
                    Card = () => RenderVesselCard(),
                    Check = () => vesRequest.Check(),
                    SendRequest = () => SendVesselRequest(),
                    SetJsonRequest = async () => { await InvokeAsync(SetVesselJsonRequest); }
                });

        ResourceHandlers.Add(typeof(IProcessDefinition), new AddResourceHandler()
                {
                    Card = () => RenderProcessDefinitionCard(),
                    Check = () => procDefRequest.Check(),
                    SendRequest = () => SendProcessDefinitionRequest(),
                    SetJsonRequest = async () => { await InvokeAsync(SetProcessDefinitionJsonRequest); }
                });

        ResourceHandlers.Add(typeof(IStorageSystem), new AddResourceHandler()
                {
                    Card = () => RenderStorageSystemCard(),
                    Check = () => sysRequest.Check(),
                    SendRequest = () => SendSystemRequest(),
                    SetJsonRequest = async () => { await InvokeAsync(SetStorageSystemJsonRequest); }
                });

        ResourceHandlers.Add(typeof(IPackage), new AddResourceHandler()
                {
                    Card = () => RenderPackageCard(),
                    Check = () => packRequest.Check(),
                    SendRequest = () => SendPackageRequest(),
                    SetJsonRequest = SetPackageJsonRequest
                });
    }

    // GENERAL METHODS

    /// <summary>
    /// Method to fill in the request and check it before submission.
    /// </summary>
    private Tuple<bool, string> HandleSubmissionRequest() => 
        SetResourceHandler.Check != null ? 
        SetResourceHandler.Check() : Tuple.Create(false, "שגיאת מערכת");

    /// <summary>
    /// Method for submitting checked request, or showing errors within the checking process.
    /// </summary>
    public async Task Submit()
    {
        Valid = true;
        var requestCheck = HandleSubmissionRequest();

        if (!requestCheck.Item1)
        {
            Valid = false;
            ErrorMessage = requestCheck.Item2;
        }

        await SendRequest();
        UpdateSubmissionSummary();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public async Task SendRequest()
    {
        if (!Valid) return;
        if (SetResourceHandler.SendRequest != null)
        {
            await HandleRequest(SetResourceHandler.SendRequest);
        }
        else
        {
            Valid = false;
            ErrorMessage = "שגיאת מערכת";
        }

        if (Error != ErrorResponse.Success)
        {
            Valid = false;
            ErrorMessage = Error.Message;
        }
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }

    /// <summary>
    /// Method to check if there were changed in the object, and then sending its request to API.
    /// </summary>
    /// <param name="sendRequest">method to send the request to the API</param>
    private async Task HandleRequest(Func<Task<Tuple<Cipher_TItem, ErrorResponse>?>> sendRequest)
    {
        var requestResult = await sendRequest();
        if (requestResult != null) (Result, Error) = requestResult.ToValueTuple();
    }

    private async Task SetJsonRequest()
    {
        if (SetResourceHandler.SetJsonRequest != null)
        {
            await SetResourceHandler.SetJsonRequest();
        }
        else
        {
            JsonRequest = string.Empty;
        }
    }

    /// <summary>
    /// Method to get the appropriate object-card to the selected type
    /// </summary>
    private RenderFragment? RenderChosenCard()
    {
        if (SetResourceHandler.Card != null)
        {
            return SetResourceHandler.Card();
        }

        return null;
    }

    // TYPE SPECIFIC METHODS

    public async Task<Tuple<Cipher_TItem, ErrorResponse>?> SendUnitRequest()
    {
        var result = await Config.Unit(false).Create(unitRequest);
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)result;
    }

    private async Task<Tuple<Cipher_TItem, ErrorResponse>?> SendCategoryRequest()
    {
        var result = await Config.Category(false).Create(catRequest);
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)result;
    }

    private async Task<Tuple<Cipher_TItem, ErrorResponse>?> SendVesselRequest()
    {
        var result = await Config.Vessel(false).Create(vesRequest);
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)result;
    }

    private async Task<Tuple<Cipher_TItem, ErrorResponse>?> SendProcessDefinitionRequest()
    {
        var result = await Config.ProcessDefinition(false).Create(procDefRequest);
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)result;
    }

    private async Task<Tuple<Cipher_TItem, ErrorResponse>?> SendSystemRequest()
    {
        var result = await Config.StorageSystem(false).Create(sysRequest);
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)result;
    }

    private async Task<Tuple<Cipher_TItem, ErrorResponse>?> SendPackageRequest()
    {
        Tuple<IEvent, ErrorResponse> evResult = await Config.Event(false).Create(packRequest);
        if (evResult.Item1.FinalStatePackages.Count > 0)
        {
            return (Tuple<Cipher_TItem, ErrorResponse>)(object)Tuple.Create(evResult.Item1.FinalStatePackages[0], evResult.Item2);
        }
        else
        {
            return (Tuple<Cipher_TItem, ErrorResponse>)(object)Tuple.Create(Config.Package(), evResult.Item2);
        }
    }

    private void SetUnitJsonRequest()
    {
        unitRequest = SetUnit.Request();
        JsonRequest = unitRequest.ToJson();
    }

    private void SetCategoryJsonRequest()
    {
        catRequest = SetCategory.Request();
        JsonRequest = catRequest.ToJson();
    }

    private void SetVesselJsonRequest()
    {
        vesRequest = SetVessel.Request();
        JsonRequest = vesRequest.ToJson();
    }

    private void SetProcessDefinitionJsonRequest()
    {
        procDefRequest = SetProc.Request();
        JsonRequest = procDefRequest.ToJson();
    }

    private void SetStorageSystemJsonRequest()
    {
        sysRequest = SetSystem.Request();
        JsonRequest = sysRequest.ToJson();
    }

    private async Task SetPackageJsonRequest()
    {
        List<IPackageRequest> ChangedPacks = await PackInfo.GetChangedPacks();
        packRequest = Config.CreateEvent();
        packRequest.Worker = FormInfo.ChosenWorker;
        packRequest.ProcessId = EventProc.ChosenProcess?.Id;
        packRequest.Timestamp = FormInfo.ChosenDate;
        packRequest.EventType = 21;
        packRequest.Actions = ChangedPacks;
        packRequest.Comments = EventComments.GetValue();
        JsonRequest = packRequest.ToJson();
    }

    public RenderFragment RenderUnitCard() =>
    @<div style="width:100%">
        <CipherUnitCard Title="" WithCard="false" @ref="@unitCard" SetMode="FormMode.Create"
                        ChangeDetails="@SetJsonRequest" @bind-ChosenObject="@SetUnit" />
    </div>
        ;

    public RenderFragment RenderCategoryCard() =>
    @<div style="width:100%">
        <CipherCategoryCard Title="" WithCard="false" @ref="@catCard" SetMode="FormMode.Create"
                            ChangeDetails="@SetJsonRequest" @bind-ChosenObject="@SetCategory" />
    </div>
        ;

    public RenderFragment RenderVesselCard() =>
    @<div style="width:100%">
        <CipherVesselCard Title="" WithCard="false" @ref="@vesCard" SetMode="FormMode.Create"
                          ChangeDetails="@SetJsonRequest" @bind-ChosenObject="@SetVessel" />
    </div>
        ;

    public RenderFragment RenderProcessDefinitionCard() =>
    @<div style="width:100%">
        <CipherProcessCard Title="" WithCard="false" @ref="@procCard" SetMode="FormMode.Create"
                           ChangeDetails="@SetJsonRequest" @bind-ChosenObject="@SetProc" />
    </div>
        ;

    public RenderFragment RenderStorageSystemCard() =>
    @<div style="width:100%">
        <CipherSystemCard Title="" WithCard="false" @ref="@sysCard" SetMode="FormMode.Create"
                          ChangeDetails="@SetJsonRequest" @bind-ChosenObject="@SetSystem" />
    </div>
        ;

    public RenderFragment RenderPackageCard() =>
    @<div style="width:100%">

        <CipherFormInfo @ref="FormInfo" ChangeDetails="@SetJsonRequest" />
        <CipherPackageInfo IsNew="true" Title="פרטי התעודה החדשה" @ref="PackInfo" ChangeDetails="@SetJsonRequest" />
        <CipherComponentCard Title="פרטי תנועה" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
            <CipherProcess @ref=EventProc Label="תהליך שיצר את התעודה" Change="@SetJsonRequest" />
            <CipherComments @ref="EventComments" Width="300px" ValueChanged="@SetJsonRequest" />
        </CipherComponentCard>
    </div>
    ;
}