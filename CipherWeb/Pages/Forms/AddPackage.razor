@page "/forms/addpackage"

<PageTitle>@Title</PageTitle>

<CipherComponentCard Underline="true" WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <CipherFormInfo @ref="FormInfo" />
    @if (!AssemblyOfPackages)
    {
        <CipherInputComponents @ref="InputPacks" />
    }

    <CipherComponentCard Title="תעודות המוכלות בתעודה זו" >
        <CipherPackagesPicking @ref="InnerPacks" Change="ChangeView" />
    </CipherComponentCard>

    <CipherPackageInfo IsNew="true" Title="פרטי התעודה החדשה" @ref="PackInfo" />

    <CipherComponentCard Title="פרטי תנועה" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
        <CipherProcess @ref=EventProc Label="תהליך שיצר את התעודה" />
        <CipherComments @ref="EventComments" WithCard="false" Title="" Width="300px" />
    </CipherComponentCard>


    @if (CheckJson)
    {
        <CipherComponentCard Title="בדיקה">
            <Buttons>
                <CipherButton Text="בדיקה" Click="Submit"></CipherButton>
            </Buttons>
            <ChildContent>
                <RadzenTextArea @bind-Value="JsonRequest" ReadOnly="true" Style="width: 100%; direction:ltr; height: 300px" />
            </ChildContent>
        </CipherComponentCard>
    }

    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
</CipherComponentCard>

@code {
    /// <summary>
    /// Is new package an assembly of other packages? otherwise it must get partial mass from other packeges.
    /// </summary>
    [Parameter]
    public bool AssemblyOfPackages { get; set; } = false;

    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// View the submitted json.
    /// </summary>
    [Parameter]
    public bool CheckJson { get; set; } = false;

    /// <summary>
    /// Page title.
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "תעודה חדשה";

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; }

    /// <summary>
    /// API event result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Event ResultEvent { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; }

    private CipherPackageInfo PackInfo = new();
    private CipherPackagesPicking InnerPacks = new();
    private CipherComments EventComments = new();
    private CipherFormInfo FormInfo = new();
    private CipherInputComponents InputPacks = new();
    private CipherProcess EventProc = new();

    private CipherSubmit submission = new();

    private CreateEvent RequestedEvent = CreateEvent.Empty();

    protected override void OnInitialized()
    {
        Submit();
    }

    /// <summary>
    /// Once there are some inner packs, user cannot add
    /// </summary>
    private void ChangeView()
    {
        if (InnerPacks.SelectedPackages is null)
        {
            AssemblyOfPackages = false;
        }
        else
        {
            AssemblyOfPackages = (InnerPacks.SelectedPackages.Count() > 0);
        }
    }

    /// <summary>
    /// Get all packages contained within new package
    /// </summary>
    /// <returns></returns>
    public HashSet<Package> GetContainingPackages()
    {
        RequestedEvent = CreateEvent.Empty();

        List<Package>? innerPacks = InnerPacks.SelectedPackages;
        return (innerPacks is null) ? new HashSet<Package>() : innerPacks.ToHashSet();
    }

    /// <summary>
    /// choosing relevant packages for calculation of mass
    /// </summary>
    /// <param name="pack">Relevant package</param>
    public decimal GetBrutMass(Package pack)
    {
        List<Package> RelevantPackages = AssemblyOfPackages ? pack.Children.ToList() : InputPacks.chosenPacks;
        return RelevantPackages.Select(x => x.BrutMass).Sum();
    }

    /// <summary>
    /// Fill all needed details for new package based on the form details.
    /// </summary>
    public void Submit()
    {
        Package pack = Package.Empty();

        RequestedEvent = CreateEvent.Empty();

        pack = PackInfo.Value();

        pack.Children = GetContainingPackages();

        // choosing relevant packages for calculation of mass
        pack.BrutMass = GetBrutMass(pack);
        pack.NetMass = pack.BrutMass * pack.Concentration;

        // Changed Packages
        List<PackageRequest> ChangedPacks = new() { pack.Request() };

        if (!AssemblyOfPackages)
        {
            foreach (Package inputPack in InputPacks.chosenPacks)
            {
                Package PreviousStatus = Package.Get(inputPack.Id).Item1;

                PackageRequest packageRequest = PreviousStatus.Request();
                // removing the amount that was transfered from the original amount
                packageRequest.BrutMass -= inputPack.BrutMass;
                packageRequest.NetMass = packageRequest.BrutMass * PreviousStatus.Concentration;

                ChangedPacks.Add(packageRequest);
            }
        }

        RequestedEvent = new CreateEvent(
            worker: FormInfo.GetWorker(),
            processId: EventProc.ChosenProcess?.Id,
            timestamp: FormInfo.GetDateTime(),
            eventType: 21,
            actions: ChangedPacks.ToHashSet(),
            comments: EventComments.Value()
        );

        Tuple<bool, string> CheckResult = RequestedEvent.Check();
        (Valid, ErrorMessage) = (CheckResult.Item1, $"שגיאה בטופס. שגיאה ב{CheckResult.Item2}.");

        JsonRequest = RequestedEvent.ToJson();

        SendRequest();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public void SendRequest()
    {
        if (Valid)
        {
            (ResultEvent, Error) = EventsRequests.CreateEvent(RequestedEvent);

            if (Error != ErrorResponse.Success)
            {
                submission.Valid = false;
                submission.ErrorMessage = Error.Message;
            }
            else
            {
                submission.Valid = true;
                submission.SuccessMessage = $"טופס הוזן בהצלחה. עבור חיפוש התנועה נא גשו לתנועה {ResultEvent.Id}.";
            }
        }
        else
        {
            submission.Valid = Valid;
            submission.ErrorMessage = ErrorMessage;
        }
    }
}