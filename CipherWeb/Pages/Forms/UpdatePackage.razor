@page "/Forms/Updates/Package"

@using Microsoft.AspNetCore.WebUtilities;

@inject NavigationManager Navigation

<PageTitle>@Title</PageTitle>

<CipherComponentCard Underline="true" WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <CipherFormInfo @ref="FormInfo" />

    <CipherComponentCard Title="בחירת תעודה">
        <CipherPackageId @ref=OriginalPackage Change="Change" ChosenPackage="ChosenPackage"/>
    </CipherComponentCard>

    <CipherComponentCard Title="שינוי פרמטרים" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
        <CipherAutoComplete Label="מספר תעודה חדש" Icon="@Icons.Cipher.Package" Value="@ChosenPackage?.Id" @ref=newId Disabled="@(ChosenPackage == null)"/>
        <CipherComments @ref=PackDescription Label="@NewPack.Translate(nameof(Package.Description))" Disabled="@(ChosenPackage == null)"
                        Icon="@Icons.Documents.Page.description" Width="300px" Comments="@ChosenPackage?.Description" />
        <CipherNumeric @ref=SetBrutMass Amount="@((ChosenPackage == null) ? 0 : ChosenPackage.BrutMass)" Label="@(NewPack.Translate(nameof(Package.BrutMass)))" Icon="@Icons.Professions.Construction.scale" Disabled="@(ChosenPackage == null)" />
        <CipherNumeric @ref=SetNetMass Amount="@((ChosenPackage == null) ? 0 : ChosenPackage.NetMass)" Label="@(NewPack.Translate(nameof(Package.NetMass)))" Icon="@Icons.Professions.Construction.scale" Disabled="@(ChosenPackage == null)" />

        <CipherCategoryDropDown @ref=SetCategory ChosenCategory="@ChosenPackage?.Category" Disabled="@(ChosenPackage == null)"/>
        <CipherVesselDropDown @ref=SetVessel ChosenVessel="@ChosenPackage?.Vessel" Disabled="@(ChosenPackage == null)"/>
        <CipherLocation @ref=SetSystem ChosenSystem="@ChosenPackage?.System" Disabled="@(ChosenPackage == null)" />

        <CipherProcesses @ref=Destinations ChosenProcesses="@ChosenPackage?.DestinationProcesses?.ToList()" Label="@NewPack.Translate(nameof(Package.DestinationProcesses))" Disabled="@(ChosenPackage == null)"/>
        <CipherPackageId @ref=ParentPack ChosenPackage="@ChosenPackage?.Parent" Label="@(NewPack.Translate(nameof(Package.Parent)))" Disabled="@(ChosenPackage == null)" />
        <CipherPackagesPicking @ref=SetChildren SelectedPackages="@ChosenPackage?.Children?.ToList()" Label="@(NewPack.Translate(nameof(Package.Children)))" Disabled="@(ChosenPackage == null)"/>

        @if (NewProps != null)
        {
            @foreach (PackageProperty prop in NewProps)
            {
                <CipherAutoComplete Label="@prop.Name" @bind-Value="@prop.Value" Icon="@(Icons.Cipher.Properties)" Disabled="@(ChosenPackage == null)" />
            }
        }

    </CipherComponentCard>

    <CipherComponentCard Title="הערות עבור עדכון" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
        <CipherComments @ref="EventComments" Width="300px" Disabled="@(ChosenPackage == null)" />
    </CipherComponentCard>

    <CipherJsonCheck JsonValue="@UpdatePackJsonRequest"/>
    <CipherJsonCheck JsonValue="@CreateEventJsonRequest"/>

    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission Visible="@(ChosenPackage != null)"/>

</CipherComponentCard>

@code
{
    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Id of package, as transfered from a different page
    /// </summary>
    [Parameter]
    public string? PackId { get; set; }

    /// <summary>
    /// Page title.
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "עדכון תעודה";

    /// <summary>
    /// Json request that will be sent to the API server. (Specific for update package request)
    /// </summary>
    [Parameter]
    public string? UpdatePackJsonRequest { get; set; }

    /// <summary>
    /// Json request that will be sent to the API server. (specific for create event request)
    /// </summary>
    [Parameter]
    public string? CreateEventJsonRequest { get; set; }

    /// <summary>
    /// API package result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Package? UpdatePackResult { get; set; }

    /// <summary>
    /// API event result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Event? CreateEventResult { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    private CipherFormInfo FormInfo = new();
    private CipherSubmit submission = new();
    private CipherComments PackDescription = new();
    private CipherPackageId OriginalPackage = new();
    private CipherPackageId ParentPack = new();
    private CipherAutoComplete newId = new();
    private CipherProcesses Destinations = new();
    private CipherComments EventComments = new();
    private CipherNumeric SetBrutMass = new();
    private CipherNumeric SetNetMass = new();
    private CipherCategoryDropDown SetCategory = new();
    private CipherVesselDropDown SetVessel = new();
    private CipherLocation SetSystem = new();
    private CipherPackagesPicking SetChildren = new();

    private Package? ChosenPackage = null;
    private Package OriginalPack = new Package("");
    private Package NewPack = new Package("");

    private CipherData.Models.UpdatePackage RequestedPackUpdate = new CipherData.Models.UpdatePackage();
    private CreateEvent UpdatePackEvent = new();

    private List<PackageProperty>? NewProps = new();

    private bool FirstInitialization = true;

    protected override void OnInitialized()
    {
        GetPackageFromUrl();
    }

    public void ChangeNewProps(string prop_name, string new_value)
    {
        if (NewProps != null)
        {
            if (NewProps.Any(x=>x.Name == prop_name))
            {
                NewProps.Where(x=>x.Name == prop_name).First().Value = new_value;
            }
        }
        else
        {
            NewProps = OriginalPack.Properties;
        }
    }

    /// <summary>
    /// Method to deduce the package id from the url.
    /// </summary>
    public void GetPackageFromUrl()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Id", out var idValue))
        {
            (OriginalPackage.ChosenPackage, Error) = Package.Get(idValue);
            Change();
        }
        FirstInitialization = false;
    }

    /// <summary>
    /// Changes URL to include the chosen-package id, upon searching it within the page.
    /// </summary>
    public void ChangeUrl()
    {
        ChosenPackage = OriginalPackage.ChosenPackage;
        string newUrl = CipherNavLinks.UpdatePackage.Href;
        newUrl = (ChosenPackage is null) ? newUrl : $"{newUrl}?Id={ChosenPackage.Id}";
        Navigation.NavigateTo(newUrl);
    }

    public void Change()
    {
        NewProps = OriginalPack.Properties;
        ChosenPackage = OriginalPackage.ChosenPackage;

        if (ChosenPackage != null)
        {
            newId.Value = ChosenPackage.Id;

            OriginalPack = ChosenPackage;
            NewPack = ChosenPackage;
        }

        if (!FirstInitialization)
        {
            ChangeUrl();
        }

        StateHasChanged();
    }

    /// <summary>
    /// Set all values to default empty values.
    /// </summary>
    public void Reset()
    {
        string originalPackId = string.Empty;
        (Valid, ErrorMessage) = (true, string.Empty);
        UpdatePackJsonRequest = string.Empty;
        CreateEventJsonRequest = string.Empty;
        UpdatePackEvent = new();
        NewPack = new Package("");
    }

    /// <summary>
    /// Check if original package was chosen. No point in update if it wasn't.
    /// </summary>
    /// <returns></returns>
    public bool OriginalPackChosen()
    {
        bool IsChosen = OriginalPackage.ChosenPackage != null;

        if (!IsChosen)
        {
            (Valid, ErrorMessage) = (false, "נא לבחור בתעודה אותה רוצים לעדכן.");
        }

        return IsChosen;
    }

    /// <summary>
    /// Set all properties of UpdatePackage request.
    /// </summary>
    public void SetUpdatePackageRequest()
    {
        if (Valid)
        {
            NewPack.Id = newId.Value;
            NewPack.DestinationProcesses = Destinations.ChosenProcesses;

            if (PackDescription.Check())
            {
                NewPack.Description = PackDescription.GetValue();
                RequestedPackUpdate.PackageId = NewPack.Id;
                RequestedPackUpdate.DestinationProcessesIds = NewPack.DestinationProcesses?.Select(x => x.Id).ToList();
                RequestedPackUpdate.PackageDescription = NewPack.Description;
                RequestedPackUpdate.ActionComments = EventComments.GetValue();

                (Valid, ErrorMessage) = RequestedPackUpdate.Check();
            }
            else
            {
                (Valid, ErrorMessage) = (false, "שגיאה בתיאור התעודה");
            }
        }
    }

    /// <summary>
    /// Set all properties of CreateEvent request.
    /// </summary>
    public void SetCreateEventRequest()
    {
        if (Valid)
        {
            NewPack.BrutMass = SetBrutMass.Amount;
            NewPack.NetMass = SetNetMass.Amount;
            NewPack.Category = SetCategory.ChosenCategory ?? new("");
            NewPack.Vessel = SetVessel.ChosenVessel;
            NewPack.System = SetSystem.ChosenSystem ?? new("");
            NewPack.Parent = ParentPack.GetValue();
            NewPack.Children = SetChildren.SelectedPackages;
            NewPack.Properties = NewProps;

            UpdatePackEvent.EventType = 26;
            UpdatePackEvent.Worker = FormInfo.GetWorker();
            UpdatePackEvent.Timestamp = FormInfo.GetDateTime();
            UpdatePackEvent.Comments = EventComments.GetValue();
            UpdatePackEvent.Actions.Add(NewPack.Request());

            Tuple<bool,string> CheckResult = UpdatePackEvent.Check();
            (Valid, ErrorMessage) = (CheckResult.Item1, $"שגיאה ב{CheckResult.Item2}");
        }
    }

    private void Submit()
    {
        Reset();

        if (OriginalPackChosen())
        {
            string? originalPackId = OriginalPackage.ChosenPackage.Id;

            if (newId.Check())
            {
                // must be first, because it can change the package id!!!
                SetUpdatePackageRequest();
                SendUpdatePackageRequest(originalPackId);

                SetCreateEventRequest();
                SendCreateEventRequest();

                if (!FoundCreateEventChanges() && !FoundUpdatePackageChanges())
                {
                    (Valid, ErrorMessage) = (false, "לא נעשו שינויים כלל");
                }

            }
            else
            {
                (Valid, ErrorMessage) = (false, "שגיאה במספר התעודה החדש");
            }
        }

        SetSubmission();
    }

    /// <summary>
    /// Check if package-parameters (for UpdatePackage) were changed in the form
    /// </summary>
    /// <returns></returns>
    public bool FoundUpdatePackageChanges()
    {
        bool different = false;

        different |= OriginalPack.Id != NewPack.Id;
        different |= OriginalPack.Description != NewPack.Description;


        if ((OriginalPack.DestinationProcesses != null) && (NewPack.DestinationProcesses != null))
        {
            different |= !OriginalPack.DestinationProcesses.Select(x => x.Id).ToHashSet().SetEquals(NewPack.DestinationProcesses.Select(x => x.Id).ToList());

        }
        else if (((OriginalPack.DestinationProcesses != null) && (NewPack.DestinationProcesses == null)) || ((OriginalPack.DestinationProcesses == null) && (NewPack.DestinationProcesses != null)))
        {
            different = true;
        }

        return different;
    }

    /// <summary>
    /// Check if package-parameters were changed in the form
    /// </summary>
    /// <returns></returns>
    public bool FoundCreateEventChanges()
    {
        bool different = false;

        different |= OriginalPack.BrutMass != NewPack.BrutMass;
        different |= OriginalPack.NetMass != NewPack.NetMass;
        different |= OriginalPack.Category.Id != NewPack.Category.Id;
        different |= OriginalPack.Vessel?.Id != NewPack.Vessel?.Id;
        different |= OriginalPack.System.Id != NewPack.System.Id;
        different |= OriginalPack.Parent?.Id != NewPack.Parent?.Id;

        if ((OriginalPack.Properties != null) && (NewPack.Properties != null))
        {
            different |= !OriginalPack.Properties.OrderBy(x => x.Name).SequenceEqual(NewPack.Properties.OrderBy(x => x.Name));
        }
        else if (((OriginalPack.Properties != null) && (NewPack.Properties == null)) || ((OriginalPack.Properties == null) && (NewPack.Properties != null)))
        {
            different = true;
        }

        
        if ((OriginalPack.Children != null) && (NewPack.Children != null))
        {
            different |= !OriginalPack.Children.Select(x => x.Id).ToHashSet().SetEquals(NewPack.Children.Select(x => x.Id));
        }
        else if (((OriginalPack.Children != null) && (NewPack.Children == null)) || ((OriginalPack.Children == null) && (NewPack.Children != null)))
        {
            different = true;
        }

        return different;
    }

    /// <summary>
    /// Send create-event request to API
    /// </summary>
    public void SendCreateEventRequest()
    {
        if (Valid && FoundCreateEventChanges())
        {
            CreateEventJsonRequest = UpdatePackEvent.ToJson();

            (CreateEventResult, Error) = Config.EventsRequests.CreateEvent(UpdatePackEvent);
            if (Error != ErrorResponse.Success)
            {
                submission.Valid = false;
                submission.ErrorMessage = Error.Message;
            }
            else
            {
                submission.Valid = true;
            }
        }
        else
        {
            submission.Valid = Valid;
            submission.ErrorMessage = ErrorMessage;
        }
    }

    /// <summary>
    /// Send update-package request to API
    /// </summary>
    public void SendUpdatePackageRequest(string originalPackId)
    {
        if (Valid && FoundUpdatePackageChanges())
        {
            UpdatePackJsonRequest = RequestedPackUpdate.ToJson();

            (UpdatePackResult, Error) = Config.PackagesRequests.UpdatePackage(originalPackId, RequestedPackUpdate);
            if (Error != ErrorResponse.Success)
            {
                submission.Valid = false;
                submission.ErrorMessage = Error.Message;
            }
            else
            {
                submission.Valid = true;
            }
        }
        else
        {
            submission.Valid = Valid;
            submission.ErrorMessage = ErrorMessage;
        }
    }

    public void SetSubmission()
    {
        if (Valid)
        {
            ChosenPackage = NewPack;
        }
        else
        {
            submission.Valid = Valid;
            submission.ErrorMessage = ErrorMessage;
        }
    }
}
