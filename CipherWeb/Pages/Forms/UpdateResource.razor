@using System.Reflection

@inject NavigationManager Navigation

@typeparam Cipher_TItem

<ResourceForm @ref="ResourcePage" Title="@NavLink?.Name">
    @RenderChosenCard()
    <CipherJsonCheck JsonValue="@JsonRequest" />
    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission Visible="@(ChosenObject != null)" />
</ResourceForm>

@code {
    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public CipherNavLink NavLink { get; set; } = new();

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// API result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Cipher_TItem? Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Chosen object upon searching
    /// </summary>
    [Parameter]
    public Cipher_TItem? ChosenObject { get; set; }

    private CipherSubmit submission = new();
    private ResourceForm ResourcePage = new();

    private IUnitRequest unitRequest = new UnitRequest();
    private ICategoryRequest catRequest = new CategoryRequest();
    private IVesselRequest vesRequest = new VesselRequest();
    private IProcessDefinitionRequest procDefRequest = new ProcessDefinitionRequest();
    private ISystemRequest sysRequest = new SystemRequest();

    private CipherUnitCard unitCard = new();
    private CipherVesselCard vesCard = new();
    private CipherSystemCard sysCard = new();
    private CipherPackageCard packCard = new();
    private CipherProcessCard procCard = new();
    private CipherCategoryCard catCard = new();

    /// <summary>
    /// Chosen objects mapping dictionary
    /// </summary>
    private Dictionary<Type, Func<object?>> chosenObjectMap = new();

    protected override void OnInitialized()
    {
        SetChosenObjMap();
        (ChosenObject, Error) = ResourcePage.GetObjectFromUrl<Cipher_TItem>(Navigation);
    }

    public void SetChosenObjMap()
    {
        chosenObjectMap = new Dictionary<Type, Func<object?>>
        {
            { typeof(IUnit), () => unitCard.ChosenObject },
            { typeof(IVessel), () => vesCard.ChosenObject },
            { typeof(IStorageSystem), () => sysCard.ChosenObject },
            { typeof(IPackage), () => packCard.ChosenObject },
            { typeof(IProcessDefinition), () => procCard.ChosenObject },
            { typeof(ICategory), () => catCard.ChosenObject },
        };
    }

    /// <summary>
    /// Get the chosen object based on its type.
    /// </summary>
    private Cipher_TItem? GetChosenObject()
    {
        return chosenObjectMap.TryGetValue(typeof(Cipher_TItem), out var chosenObjectFunc) ?
        (Cipher_TItem?)chosenObjectFunc?.Invoke() : default;
    }

    /// <summary>
    /// Retrieve the object's ID for URL changes.
    /// </summary>
    private string? GetObjectId(object? obj) => (obj as IResource)?.Id;

    /// <summary>
    /// Changes URL to include the chosen-package id, upon searching it within the page.
    /// </summary>
    public void ChangeUrl()
    {
        ChosenObject = GetChosenObject();
        ResourcePage.ChangeUrl(Navigation, NavLink, GetObjectId(ChosenObject));
    }

    /// <summary>
    /// Method to fill in the request and check it before submission.
    /// </summary>
    /// <returns></returns>
    private Tuple<bool, string> HandleSubmissionRequest()
    {
        if (typeof(Cipher_TItem) == typeof(IUnit))
        {
            unitRequest = unitCard.Value();
            return unitRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(ICategory))
        {
            catRequest = catCard.Value();
            return catRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IVessel))
        {
            vesRequest = vesCard.Value();
            return vesRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IProcessDefinition))
        {
            procDefRequest = procCard.Value();
            return procDefRequest.Check();
        }
        else if (typeof(Cipher_TItem) == typeof(IStorageSystem))
        {
            sysRequest = sysCard.Value();
            return sysRequest.Check();
        }

        return new Tuple<bool, string>(false, "שגיאת מערכת");
    }

    /// <summary>
    /// Method for submitting checked request, or showing errors within the checking process.
    /// </summary>
    public void Submit()
    {
        Valid = true;
        var requestCheck = HandleSubmissionRequest();

        if (!requestCheck.Item1)
        {
            Valid = false;
            ErrorMessage = requestCheck.Item2;
        }

        SendRequest();
        UpdateSubmissionSummary();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public void SendRequest()
    {
        if (!Valid) return;

        if (ChosenObject is null)
        {
            Valid = false;
            ErrorMessage = "לא נבחר אובייקט לעדכון.";
            return;
        }

        // find the appropriate type, and then check if some details were changed relatively to the original object.

        bool FoundUnitChanges() => FoundChanges(!unitRequest.Equals(ChosenObject as IUnit));
        bool FoundCategoryChanges() => FoundChanges(!catRequest.Equals(ChosenObject as ICategory));
        bool FoundVesselChanges() => FoundChanges(!vesRequest.Equals(ChosenObject as IVessel));
        bool FoundProcDefinitionChanges() => FoundChanges(!procDefRequest.Equals(ChosenObject as IProcessDefinition));
        bool FoundSystemChanges() => FoundChanges(!sysRequest.Equals(ChosenObject as IStorageSystem));

        if (typeof(Cipher_TItem) == typeof(IUnit))
        {
            HandleRequest(() => FoundUnitChanges(), () => SendUnitRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(ICategory))
        {
            HandleRequest(() => FoundCategoryChanges(), () => SendCategoryRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IVessel))
        {
            HandleRequest(() => FoundVesselChanges(), () => SendVesselRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IProcessDefinition))
        {
            HandleRequest(() => FoundProcDefinitionChanges(), () => SendProcessDefinitionRequest());
        }
        else if (typeof(Cipher_TItem) == typeof(IStorageSystem))
        {
            HandleRequest(() => FoundSystemChanges(), () => SendSystemRequest());
        }
        else
        {
            Valid = false;
            ErrorMessage = "שגיאת מערכת";
        }

        if (Error != ErrorResponse.Success)
        {
            Valid = false;
            ErrorMessage = Error.Message;
        }
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }

    /// <summary>
    /// Method to check if there were changed in the object, and then sending its request to API.
    /// </summary>
    /// <param name="hasChanges">method to check if the request is different from the original object</param>
    /// <param name="sendRequest">method to send the request to the API</param>
    private void HandleRequest(Func<bool> hasChanges, Func<Tuple<Cipher_TItem, ErrorResponse>?> sendRequest)
    {
        if (!hasChanges()) return;

        var requestResult = sendRequest();
        if (requestResult != null)
        {
            (Result, Error) = requestResult.ToValueTuple();
        }

        if (Error == ErrorResponse.Success)
        {
            ChosenObject = Result;
        }
    }

    /// <summary>
    /// Make form invalid if no difference was found between the original object and the request.
    /// </summary>
    /// <param name="different">Check result</param>
    /// <returns></returns>
    private bool FoundChanges(bool different)
    {
        if (!different)
        {
            Valid = false;
            ErrorMessage = "אין שינוי בפרמטרים";
        }
        return different;
    }

    public Tuple<Cipher_TItem, ErrorResponse>? SendUnitRequest()
    {
        JsonRequest = unitRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.UnitsRequests.UpdateUnit((ChosenObject as IUnit)?.Id, unitRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendCategoryRequest()
    {
        JsonRequest = catRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.CategoriesRequests.UpdateCategory((ChosenObject as ICategory)?.Id, catRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendVesselRequest()
    {
        JsonRequest = vesRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.VesselsRequests.UpdateVessel((ChosenObject as IVessel)?.Id, vesRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendProcessDefinitionRequest()
    {
        JsonRequest = vesRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.ProcessesDefinitionsRequests.UpdateProcessDefinition((ChosenObject as IProcessDefinition)?.Id, procDefRequest);
    }

    private Tuple<Cipher_TItem, ErrorResponse>? SendSystemRequest()
    {
        JsonRequest = sysRequest.ToJson();
        return (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.SystemsRequests.UpdateSystem((ChosenObject as IStorageSystem)?.Id, sysRequest);
    }

    /// <summary>
    /// Method to get the appropriate object-card to the selected type
    /// </summary>
    /// <returns></returns>
    private RenderFragment RenderChosenCard() =>
    @<div style="width:100%">
        @if (typeof(Cipher_TItem) == typeof(IUnit))
    {
        <CipherUnitCard Title="" WithCard="false" @ref="@unitCard" ChangeObject="ChangeUrl"
                        ChosenObject="@(ChosenObject as IUnit)" SetMode="FormMode.Update" />
    }
    else if (typeof(Cipher_TItem) == typeof(ICategory))
    {
        <CipherCategoryCard Title="" WithCard="false" @ref="@catCard" ChangeObject="ChangeUrl"
                            ChosenObject="@(ChosenObject as ICategory)" SetMode="FormMode.Update" />
    }
    else if (typeof(Cipher_TItem) == typeof(IVessel))
    {
        <CipherVesselCard Title="" WithCard="false" @ref="@vesCard" ChangeObject="ChangeUrl"
                          ChosenObject="@(ChosenObject as IVessel)" SetMode="FormMode.Update" />
    }
    else if (typeof(Cipher_TItem) == typeof(IProcessDefinition))
    {
        <CipherProcessCard Title="" WithCard="false" @ref="@procCard" ChangeObject="ChangeUrl"
                           ChosenObject="@(ChosenObject as IProcessDefinition)" SetMode="FormMode.Update" />
    }
    else if (typeof(Cipher_TItem) == typeof(IStorageSystem))
    {
        <CipherSystemCard Title="" WithCard="false" @ref="@sysCard" ChangeObject="ChangeUrl"
                           ChosenObject="@(ChosenObject as StorageSystem)" SetMode="FormMode.Update" />
    }
    </div>;
}