@using System.Reflection

@inject NavigationManager Navigation

@typeparam Cipher_TItem 

<ResourceForm @ref="ResourcePage" Title="@NavLink?.Name">
    @RenderChosenCard()
    @if (Mode == FormMode.Update)
    {
        <CipherJsonCheck JsonValue="@JsonRequest" Visible="@(ChosenObject != null)" />
        <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission Visible="@(ChosenObject != null)" />
    }
</ResourceForm>

@code {
    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// form's mode of use
    /// </summary>
    [Parameter]
    public FormMode Mode { get; set; } = FormMode.Update;

    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public CipherNavLink NavLink { get; set; } = new();

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// API result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Cipher_TItem? Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// Chosen object upon searching
    /// </summary>
    [Parameter]
    public Cipher_TItem? ChosenObject { get; set; }

    private CipherSubmit submission = new();
    private ResourceForm ResourcePage = new();

    private IUnitRequest unitRequest = Config.UnitRequest();
    private ICategoryRequest catRequest = Config.CategoryRequest();
    private IVesselRequest vesRequest = Config.VesselRequest();
    private IProcessDefinitionRequest procDefRequest = Config.ProcessDefinitionRequest();
    private ISystemRequest sysRequest = Config.SystemRequest();

    private CipherUnitCard unitCard = new();
    private CipherVesselCard vesCard = new();
    private CipherSystemCard sysCard = new();
    private CipherPackageCard packCard = new();
    private CipherProcessCard procCard = new();
    private CipherCategoryCard catCard = new();

    public class UpdateResourceHandler
    {
        public Func<object?>? GetChosenObject { get; set; }
        public Func<string, Task>? GetObjectFromUrl { get; set; }
        public Func<Tuple<bool, string>>? HandleSubmissionRequest { get; set; }
        public Func<Tuple<Cipher_TItem, ErrorResponse>?>? SendRequest { get; set; }
        public Action? SetJson { get; set; }
        public Func<RenderFragment>? GetCard{ get; set; }
    }

    private Dictionary<Type, UpdateResourceHandler> ResourceHandlers = new();

    protected override async Task OnInitializedAsync()
    {
        SetResourceHandler();
        await GetObjectFromUrl();
    }

    // GENERAL METHODS

    public void SetResourceHandler()
    {
        ResourceHandlers.Add(typeof(ICategory), new UpdateResourceHandler()
                {
                    GetChosenObject = () => catCard.ChosenObject,
                    HandleSubmissionRequest = () => HandleCategorySubmissionRequest(),
                    GetObjectFromUrl = id => GetCategoryFromUrl(id),
                    SendRequest = () => SendCategoryRequest(),
                    SetJson = () => SetCategoryJsonRequest(),
                    GetCard = () => RenderCategoryCard()
                });

        ResourceHandlers.Add(typeof(IUnit), new UpdateResourceHandler()
                {
                    GetChosenObject = () => unitCard.ChosenObject,
                    HandleSubmissionRequest = () => HandleUnitSubmissionRequest(),
                    GetObjectFromUrl = id => GetUnitFromUrl(id),
                    SendRequest = () => SendUnitRequest(),
                    SetJson = () => SetUnitJsonRequest(),
                    GetCard = () => RenderUnitCard()
                });

        ResourceHandlers.Add(typeof(IVessel), new UpdateResourceHandler()
                {
                    GetChosenObject = () => vesCard.ChosenObject,
                    HandleSubmissionRequest = () => HandleVesselSubmissionRequest(),
                    GetObjectFromUrl = id => GetVesselFromUrl(id),
                    SendRequest = () => SendVesselRequest(),
                    SetJson = () => SetVesselJsonRequest(),
                    GetCard = () => RenderVesselCard()
                });

        ResourceHandlers.Add(typeof(IStorageSystem), new UpdateResourceHandler()
                {
                    GetChosenObject = () => sysCard.ChosenObject,
                    HandleSubmissionRequest = () => HandleStorageSystemSubmissionRequest(),
                    GetObjectFromUrl = id => GetStorageSystemFromUrl(id),
                    SendRequest = () => SendSystemRequest(),
                    SetJson = () => SetSystemJsonRequest(),
                    GetCard = () => RenderSystemCard()
                });

        ResourceHandlers.Add(typeof(IProcessDefinition), new UpdateResourceHandler()
                {
                    GetChosenObject = () => procCard.ChosenObject,
                    HandleSubmissionRequest = () => HandleProcessDefinitionSubmissionRequest(),
                    GetObjectFromUrl = id => GetProcessDefinitionFromUrl(id),
                    SendRequest = () => SendProcessDefinitionRequest(),
                    SetJson = () => SetProcessDefinitionJsonRequest(),
                    GetCard = () => RenderProcessDefinitionCard()
                });

        ResourceHandlers.Add(typeof(IPackage), new UpdateResourceHandler()
                {
                    GetChosenObject = () => packCard.ChosenObject,
                    GetObjectFromUrl = id => GetPackageFromUrl(id),
                    GetCard = () => RenderPackageCard()
                });
    }

    /// <summary>
    /// Retrieve the object's ID for URL changes.
    /// </summary>
    private string? GetObjectId(object? obj) => (obj as IResource)?.Id;

    /// <summary>
    /// Changes URL to include the chosen-package id, upon searching it within the page.
    /// </summary>
    public void ChangeUrl()
    {
        ChosenObject = GetChosenObject();
        ResourcePage.ChangeUrl(Navigation, NavLink, GetObjectId(ChosenObject));
    }

    private async Task GetObjectFromUrl()
    {
        string? id = ResourcePage.GetIdFromUrl(Navigation);
        if (!string.IsNullOrEmpty(id))
        {
            if (ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler))
            {
                if (handler.GetObjectFromUrl != null)
                {
                    await handler.GetObjectFromUrl(id);
                }
            }
        }
    }

    /// <summary>
    /// Get the chosen object based on its type.
    /// </summary>
    private Cipher_TItem? GetChosenObject()
    {
        return ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler) ?
        (Cipher_TItem?)handler.GetChosenObject?.Invoke() : default;
    }

    /// <summary>
    /// Method to fill in the request and check it before submission.
    /// </summary>
    /// <returns></returns>
    private Tuple<bool, string> HandleSubmissionRequest()
    {
        if (ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler))
        {
            return handler.HandleSubmissionRequest?.Invoke() ?? new Tuple<bool, string>(false, "שגיאת מערכת");
        }
        return new Tuple<bool, string>(false, "שגיאת מערכת");
    }

    /// <summary>
    /// Method for submitting checked request, or showing errors within the checking process.
    /// </summary>
    public void Submit()
    {
        Valid = true;
        var requestCheck = HandleSubmissionRequest();

        if (!requestCheck.Item1)
        {
            Valid = false;
            ErrorMessage = requestCheck.Item2;
        }

        SendRequest();
        UpdateSubmissionSummary();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public void SendRequest()
    {
        if (!Valid) return;

        if (ChosenObject is null)
        {
            Valid = false;
            ErrorMessage = "לא נבחר אובייקט לעדכון.";
            return;
        }

        if (ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler))
        {
            if (handler.SendRequest != null)
            {
                HandleRequest(handler.SendRequest);
            }
        }
        else
        {
            Valid = false;
            ErrorMessage = "שגיאת מערכת";
        }

        if (Error != ErrorResponse.Success)
        {
            Valid = false;
            ErrorMessage = Error.Message;
        }
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }

    /// <summary>
    /// Method to check if there were changed in the object, and then sending its request to API.
    /// </summary>
    /// <param name="hasChanges">method to check if the request is different from the original object</param>
    /// <param name="sendRequest">method to send the request to the API</param>
    private void HandleRequest(Func<Tuple<Cipher_TItem, ErrorResponse>?> sendRequest)
    {
        var requestResult = sendRequest();
        if (requestResult != null)
        {
            (Result, Error) = requestResult.ToValueTuple();
        }
    }

    /// <summary>
    /// Make form invalid if no difference was found between the original object and the request.
    /// </summary>
    /// <param name="different">Check result</param>
    private bool FoundChanges(bool different)
    {
        if (!different)
        {
            Valid = false;
            ErrorMessage = "אין שינוי בפרמטרים";
        }
        return different;
    }

    private void SetJsonRequest()
    {
        if (ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler))
        {
            if (handler.SetJson != null)
            {
                handler.SetJson();
                return;
            }
        }

        JsonRequest = string.Empty;
    }

    /// <summary>
    /// Method to get the appropriate object-card to the selected type
    /// </summary>
    private RenderFragment? RenderChosenCard()
    {
        if (ResourceHandlers.TryGetValue(typeof(Cipher_TItem), out var handler))
        {
            if (handler.GetCard != null)
            {
                return handler.GetCard();
            }
        }
        return null;
    }

    // TYPE SPECIFIC FUNCTIONS

    private async Task GetUnitFromUrl(string id)
    {
        var result = await Config.Unit(false).Get(id);
        (ChosenObject, Error) = Tuple.Create((Cipher_TItem)result.Item1, result.Item2);
    }

    private async Task GetCategoryFromUrl(string id)
    {
        var result = await Config.Category(false).Get(id);
        (ChosenObject, Error) = Tuple.Create((Cipher_TItem)result.Item1, result.Item2);
    }

    private async Task GetVesselFromUrl(string id)
    {
        var result = await Config.Vessel(false).Get(id);
        (ChosenObject, Error) = Tuple.Create((Cipher_TItem)result.Item1, result.Item2);
    }

    private async Task GetStorageSystemFromUrl(string id)
    {
        var result = await Config.StorageSystem(false).Get(id);
        (ChosenObject, Error) = Tuple.Create((Cipher_TItem)result.Item1, result.Item2);
    }

    private async Task GetProcessDefinitionFromUrl(string id)
    {
        var result = await Config.ProcessDefinition(false).Get(id);
        (ChosenObject, Error) = Tuple.Create((Cipher_TItem)result.Item1, result.Item2);
    }

    private async Task GetPackageFromUrl(string id)
    {
        var result = await Config.Package(false).Get(id);
        (ChosenObject, Error) = Tuple.Create((Cipher_TItem)result.Item1, result.Item2);
    }

    private Tuple<bool, string> HandleUnitSubmissionRequest()
    {
        unitRequest = unitCard.ChosenObject?.Request() ?? Config.UnitRequest();
        return unitRequest.Check();
    }

    private Tuple<bool, string> HandleCategorySubmissionRequest()
    {
        catRequest = catCard.ChosenObject?.Request() ?? Config.CategoryRequest();
        return catRequest.Check();
    }

    private Tuple<bool, string> HandleVesselSubmissionRequest()
    {
        vesRequest = vesCard.ChosenObject?.Request() ?? Config.VesselRequest();
        return vesRequest.Check();
    }

    private Tuple<bool, string> HandleProcessDefinitionSubmissionRequest()
    {
        procDefRequest = procCard.ChosenObject?.Request() ?? Config.ProcessDefinitionRequest();
        return procDefRequest.Check();
    }

    private Tuple<bool, string> HandleStorageSystemSubmissionRequest()
    {
        sysRequest = sysCard.ChosenObject?.Request() ?? Config.SystemRequest();
        return sysRequest.Check();
    }

    public Tuple<Cipher_TItem, ErrorResponse>? SendUnitRequest()
    => (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.Unit(false).Update((ChosenObject as IUnit)?.Id, unitRequest).Result;

    private Tuple<Cipher_TItem, ErrorResponse>? SendCategoryRequest() 
    => (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.Category(false).Update((ChosenObject as ICategory)?.Id, catRequest).Result;

    private Tuple<Cipher_TItem, ErrorResponse>? SendVesselRequest()
        => (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.Vessel(false).Update((ChosenObject as IVessel)?.Id, vesRequest).Result;

    private Tuple<Cipher_TItem, ErrorResponse>? SendProcessDefinitionRequest()
        => (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.ProcessDefinition(false).Update((ChosenObject as IProcessDefinition)?.Id, procDefRequest).Result;

    private Tuple<Cipher_TItem, ErrorResponse>? SendSystemRequest()
        => (Tuple<Cipher_TItem, ErrorResponse>)(object)Config.StorageSystem(false).Update((ChosenObject as IStorageSystem)?.Id, sysRequest).Result;

    private void SetUnitJsonRequest()
    {
        unitRequest = (ChosenObject as IUnit)?.Request() ?? Config.UnitRequest();
        JsonRequest = unitRequest.ToJson();
    }

    private void SetCategoryJsonRequest()
    {
        catRequest = (ChosenObject as ICategory)?.Request() ?? Config.CategoryRequest();
        JsonRequest = catRequest.ToJson();
    }

    private void SetVesselJsonRequest()
    {
        vesRequest = (ChosenObject as IVessel)?.Request() ?? Config.VesselRequest();
        JsonRequest = GetObjectId(ChosenObject) + "\n\n" + vesRequest.ToJson();
    }

    private void SetProcessDefinitionJsonRequest()
    {
        procDefRequest = (ChosenObject as IProcessDefinition)?.Request() ?? Config.ProcessDefinitionRequest();
        JsonRequest = procDefRequest.ToJson();
    }

    private void SetSystemJsonRequest()
    {
        sysRequest = (ChosenObject as IStorageSystem)?.Request() ?? Config.SystemRequest();
        JsonRequest = sysRequest.ToJson();
    }

    private RenderFragment RenderUnitCard() =>
    @<div style="width:100%">
    <CipherUnitCard Title="" WithCard="false" @ref="@unitCard" ChangeObject="ChangeUrl" ChangeDetails="@SetJsonRequest"
                    ChosenObject="@(ChosenObject as IUnit)" SetMode="@Mode" />
    </div>;

    private RenderFragment RenderCategoryCard() =>
    @<div style="width:100%">
        <CipherCategoryCard Title="" WithCard="false" @ref="@catCard" ChangeObject="ChangeUrl" ChangeDetails="@SetJsonRequest"
                            ChosenObject="@(ChosenObject as ICategory)" SetMode="@Mode" />
    </div>;

    private RenderFragment RenderVesselCard() =>
    @<div style="width:100%">
        <CipherVesselCard Title="" WithCard="false" @ref="@vesCard" ChangeObject="ChangeUrl" ChangeDetails="@SetJsonRequest"
                          ChosenObject="@(ChosenObject as IVessel)" SetMode="@Mode" />
    </div>;
    
    private RenderFragment RenderProcessDefinitionCard() =>
    @<div style="width:100%">
        <CipherProcessCard Title="" WithCard="false" @ref="@procCard" ChangeObject="ChangeUrl" ChangeDetails="@SetJsonRequest"
                           ChosenObject="@(ChosenObject as IProcessDefinition)" SetMode="@Mode" />
    </div>;

    private RenderFragment RenderPackageCard() =>
    @<div style="width:100%">
        <CipherPackageCard Title="" WithCard="false" @ref="@packCard" ChangeObject="ChangeUrl"
                           ChosenObject="@(ChosenObject as IPackage)" SetMode="@Mode" />
    </div>;

    private RenderFragment RenderSystemCard() =>
    @<div style="width:100%">
        <CipherSystemCard Title="" WithCard="false" @ref="@sysCard" ChangeObject="ChangeUrl" ChangeDetails="@SetJsonRequest"
                          ChosenObject="@(ChosenObject as IStorageSystem)" SetMode="@Mode" />
        </div>
    ;
}