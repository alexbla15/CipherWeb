@page "/forms/AddProcess"

<PageTitle>@Title</PageTitle>

<CipherComponentCard Underline="true" WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <CipherProcessCard @ref=ProcDetails Title=""/>
    <CipherJsonCheck JsonValue="@JsonRequest" />
    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
</CipherComponentCard>

@code {
    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Page title.
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "תהליך חדש";

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; }

    /// <summary>
    /// API event result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public ProcessDefinition Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherSubmit submission = new();
    private CipherProcessCard ProcDetails = new();

    private ProcessDefinitionRequest proc = ProcessDefinitionRequest.Empty();

    /// <summary>
    /// Fill all needed details for new package based on the form details.
    /// </summary>
    public void Submit()
    {
        proc = ProcDetails.Value();

        Tuple<bool, string> CheckResult = proc.Check();
        (Valid, ErrorMessage) = (CheckResult.Item1, $"שגיאה בטופס. שגיאה ב{CheckResult.Item2}.");

        JsonRequest = proc.ToJson();

        SendRequest();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public void SendRequest()
    {
        if (Valid)
        {
            (Result, Error) = ProcessesRequests.CreateProcessDefinition(proc);
            if (Error != ErrorResponse.Success)
            {
                submission.Valid = false;
                submission.ErrorMessage = Error.Message;
            }
            else
            {
                submission.Valid = true;
            }
        }
        else
        {
            submission.Valid = Valid;
            submission.ErrorMessage = ErrorMessage;
        }
    }
}