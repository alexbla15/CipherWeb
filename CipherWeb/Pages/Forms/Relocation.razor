@page "/Forms/Relocation"

<ResourceForm Title="@NavLink?.Name">
    <CipherFormInfo @ref="FormInfo" ChangeDetails="@SetJsonRequest" />

    <CipherComponentCard Title="פרטי תנועה" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
        <CipherLocation Change="@SetJsonRequest" Label="@ICreateRelocationEvent.Translate(nameof(ICreateRelocationEvent.TargetSystem))" @ref=FinalLocation />
        <CipherPackagesPicking Change="@SetJsonRequest" Label="@ICreateRelocationEvent.Translate(nameof(ICreateRelocationEvent.Packages))" @ref="RelocatedPacks" />
        <CipherComments ValueChanged="@SetJsonRequest" @ref="EventComments" Width="300px" />
    </CipherComponentCard>
    
    <CipherJsonCheck JsonValue="@JsonRequest"/>

    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
</ResourceForm>

@code {
    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public CipherNavLink NavLink { get; set; } = CipherNavLinks.Relocation;

    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = string.Empty;

    /// <summary>
    /// API event result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public IEvent? ResultEvent { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherFormInfo FormInfo = new();
    private CipherLocation FinalLocation = new();
    private CipherSubmit submission = new();
    private CipherPackagesPicking RelocatedPacks = new();
    private CipherComments EventComments = new();

    private ICreateRelocationEvent RequestedEvent = Config.CreateRelocationEvent();

    private bool Relocate = false;

    /// <summary>
    /// Fill all needed details for new event based on the form details.
    /// </summary>
    public async Task Submit()
    {
        Relocate = false;
        (Valid, ErrorMessage) = RequestedEvent.Check();
        await SendRequest();
    }

    public void SetJsonRequest()
    {
        RequestedEvent = Config.CreateRelocationEvent();
        RequestedEvent.Worker = FormInfo.ChosenWorker;
        RequestedEvent.Timestamp = FormInfo.ChosenDate;
        RequestedEvent.TargetSystem = FinalLocation.ChosenSystem;
        RequestedEvent.Packages = RelocatedPacks.SelectedPackages;
        RequestedEvent.Comments = EventComments.Comments;

        ICreateEvent ev = RequestedEvent.Create(!Relocate);
        JsonRequest = ev.ToJson();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public async Task SendRequest()
    {
        if (Valid)
        {
            Relocate = true;
            SetJsonRequest();
            ICreateEvent ev = RequestedEvent.Create();
            (ResultEvent, Error) = await Config.Event(false).Create(ev);
            if (Error != ErrorResponse.Success)
            {
                Valid = false;
                ErrorMessage = Error.Message;
            }
        }

        UpdateSubmissionSummary();
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }
}