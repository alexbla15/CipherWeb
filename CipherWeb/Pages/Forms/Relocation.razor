@page "/Forms/Relocation"

<PageTitle>@Title</PageTitle>

<CipherComponentCard Underline="true" WithCard="false" Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    <CipherFormInfo @ref="FormInfo" />

    <CipherComponentCard Title="פרטי תנועה" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
        <CipherLocation Label="מיקום חדש" @ref=FinalLocation />
        <CipherPackagesPicking @ref="RelocatedPacks" />
        <CipherComments @ref="EventComments" WithCard="false" Title="" Width="300px" />
    </CipherComponentCard>

    @if (CheckJson)
    {
        <CipherComponentCard Title="בדיקה">
            <Buttons>
                <CipherButton Text="בדיקה" Click="Submit"></CipherButton>
            </Buttons>
            <ChildContent>
                <RadzenTextArea @bind-Value="JsonRequest" ReadOnly="true" Style="width: 100%; direction:ltr; height: 300px" />
            </ChildContent>
        </CipherComponentCard>
    }

    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
</CipherComponentCard>

@code {
    /// <summary>
    /// Page title.
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "שינוי מיקום";

    /// <summary>
    /// View the submitted json.
    /// </summary>
    [Parameter]
    public bool CheckJson { get; set; } = true;

    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; }

    /// <summary>
    /// API event result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public Event ResultEvent { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; }

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; }

    private CipherFormInfo FormInfo = new();
    private CipherLocation FinalLocation = new();
    private CipherSubmit submission = new();
    private CipherPackagesPicking RelocatedPacks = new();
    private CipherComments EventComments = new();

    private CreateEvent RequestedEvent = CreateEvent.Empty();

    /// <summary>
    /// Fill all needed details for new event based on the form details.
    /// </summary>
    public void Submit()
    {
        if (RelocatedPacks.SelectedPackages.Count() == 0)
        {
            (Valid, ErrorMessage) = (false, "יש לבחור תעודות מועברות");
        }
        else if (FinalLocation.Value is null)
        {
            (Valid, ErrorMessage) = (false, "יש לבחור מערכת חדשה.");
        }
        else
        {
            bool InitialLocationCheck = true;

            foreach (Package p in RelocatedPacks.SelectedPackages)
            {
                if (p.System.Id == FinalLocation.Value.Id)
                {
                    (Valid, ErrorMessage) = (false, $"תעודה {p.Id} נמצאת במערכת {FinalLocation.Value.Name}. נא בחרו מערכת אחרת או מחקו תעודה זו מהרשימה.");
                    InitialLocationCheck = false;
                    break;
                }
                p.System = FinalLocation.Value;
            }

            if (!InitialLocationCheck)
            {
                RequestedEvent = new CreateEvent(
                    worker: FormInfo.GetWorker(),
                    timestamp: FormInfo.GetDateTime(),
                    eventType: 24,
                    actions: RelocatedPacks.SelectedPackages.Select(x => x.Request()).ToHashSet(),
                    comments: EventComments.Value()
                );


                Tuple<bool, string> CheckResult = RequestedEvent.Check();
                (Valid, ErrorMessage) = (CheckResult.Item1, $"שגיאה בטופס. שגיאה ב{CheckResult.Item2}.");

                JsonRequest = RequestedEvent.ToJson();
            }
        }

        SendRequest();
    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public void SendRequest()
    {
        if (Valid)
        {
            (ResultEvent, Error) = EventsRequests.CreateEvent(RequestedEvent);

            if (Error != ErrorResponse.Success)
            {
                submission.Valid = false;
                submission.ErrorMessage = Error.Message;
            }
            else
            {
                submission.Valid = true;
                submission.SuccessMessage = $"טופס הוזן בהצלחה. עבור חיפוש התנועה נא גשו לתנועה {ResultEvent.Id}.";
            }
        }
        else
        {
            submission.Valid = Valid;
            submission.ErrorMessage = ErrorMessage;
        }
    }
}