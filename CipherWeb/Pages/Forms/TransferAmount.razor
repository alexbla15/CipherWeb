@page "/Forms/TransferAmount"

<ResourceForm Title="@NavLink?.Name">
    <CipherFormInfo @ref="FormInfo" />
    <CipherComponentCard Title="פרטי תנועה" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
        <CipherPackageId Label="@ICreateTranserAmountEvent.Translate(nameof(ICreateTranserAmountEvent.DonatingPackage))" Icon="@Icons.Arrows.Squared.input" @ref=DonatingPack />
        <CipherPackageId Label="@ICreateTranserAmountEvent.Translate(nameof(ICreateTranserAmountEvent.AcceptingPackage))" Icon="@Icons.Arrows.Squared.output" @ref=AcceptingPack />
        <CipherAmount Label="@ICreateTranserAmountEvent.Translate(nameof(ICreateTranserAmountEvent.Amount))" @ref=DeltaM />
        <CipherProcess @ref=EventProc />
        <CipherComments @ref="EventComments" Width="300px" />
    </CipherComponentCard>
    
    <CipherJsonCheck JsonValue="@JsonRequest"/>

    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
 </ResourceForm>

@code {
    /// <summary>
    /// Page nav link.
    /// </summary>
    [Parameter]
    public CipherNavLink NavLink { get; set; } = CipherNavLinks.TransferAmount;

    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string? JsonRequest { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    /// <summary>
    /// API event result to submission. Empty if the submission was unsuccessful.
    /// </summary>
    [Parameter]
    public IEvent? ResultEvent { get; set; }

    private CipherFormInfo FormInfo = new();
    private CipherPackageId DonatingPack = new();
    private CipherPackageId AcceptingPack = new();
    private CipherAmount DeltaM = new();
    private CipherSubmit submission = new();
    private CipherComments EventComments = new();
    private CipherProcess EventProc = new();

    private ICreateTranserAmountEvent RequestedEvent = Config.CreateTranserAmountEvent();

    /// <summary>
    /// Fill all needed details for new event based on the form details.
    /// </summary>
    public async Task Submit()
    {
        RequestedEvent = Config.CreateTranserAmountEvent();
        RequestedEvent.Amount = DeltaM.Amount;
        RequestedEvent.DonatingPackage = DonatingPack.ChosenPackage;
        RequestedEvent.AcceptingPackage = AcceptingPack.ChosenPackage;
        RequestedEvent.Worker = FormInfo.GetWorker();
        RequestedEvent.Timestamp = FormInfo.GetDateTime();
        RequestedEvent.ProcessId = EventProc.ChosenProcess?.Id;
        RequestedEvent.Comments = EventComments.Comments;

        (Valid, ErrorMessage) = RequestedEvent.Check();

        await SendRequest();

    }

    /// <summary>
    /// Send request to API
    /// </summary>
    public async Task SendRequest()
    {
        if (Valid)
        {
            ICreateEvent ev = RequestedEvent.Create();
            JsonRequest = ev.ToJson();
            (ResultEvent, Error) = await Config.Event(false).Create(ev);
            if (Error != ErrorResponse.Success)
            {
                Valid = false;
                ErrorMessage = Error.Message;
            }
        }

        UpdateSubmissionSummary();
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }
}