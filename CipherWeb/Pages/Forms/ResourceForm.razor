@using Microsoft.AspNetCore.WebUtilities;
@using System.Reflection;

<PageTitle>@Title</PageTitle>

<CipherComponentCard HeaderStyleClass="@Constants.Styles.ParagraphTitle" WithCard="false" 
Title="@Title" ContentDisplay="flex" ContentJustify="flex-start" ContentFlexWrap="wrap">
    @ChildContent
</CipherComponentCard>

@code {
    /// <summary>
    /// Page title.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Method to deduce id from the url.
    /// </summary>
    public string? GetIdFromUrl(NavigationManager Navigation)
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Id", out Microsoft.Extensions.Primitives.StringValues idValue))
        {
            return idValue;
        }

        return null;
    }

    /// <summary>
    /// Method to deduce the package id from the url.
    /// </summary>
    public Tuple<T?, ErrorResponse> GetObjectFromUrl<T>(NavigationManager Navigation)
    where T : class, ICipherClass, new()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Id", out Microsoft.Extensions.Primitives.StringValues idValue))
        {
            // Check if the method 'Get' exists, with a string parameter
            MethodInfo? methodInfo = typeof(T).GetMethod("Get", new[] { typeof(string) }, null);

            if (methodInfo != null)
            {
                var Result = methodInfo.Invoke(new T(), idValue);
                if (Result is Tuple<T?, ErrorResponse> tupleResult) return tupleResult;
            }
        }

        return Tuple.Create<T?, ErrorResponse>(default(T), ErrorResponse.Success);
    }

    /// <summary>
    /// Method to change url once the form is related to a certain id
    /// </summary>
    /// <param name="Navigation"></param>
    /// <param name="CurrNavLink"></param>
    /// <param name="Id"></param>
    public void ChangeUrl(NavigationManager Navigation, CipherNavLink CurrNavLink, string? Id = null)
    {
        string? newUrl = CurrNavLink.Href;
        if (Id != null) newUrl = $"{newUrl}?Id={Id}";
        Navigation.NavigateTo(newUrl ?? string.Empty);
    }
}