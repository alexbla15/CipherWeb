@using System.Globalization

@page "/Reports/ProcessSummary"

<PageTitle>סיכום קווים</PageTitle>

<CipherComponentCard Title="סיכום קו">
    <HeaderContent>
        <RadzenAutoComplete Placeholder="AAA" Style="width:300px"></RadzenAutoComplete>
    </HeaderContent>
    <ChildContent>
    <RadzenRow>
        <RadzenColumn>
        @foreach (SearchParameter p in searchParameters)
        {
            <CipherFormRow Icon="@p.Icon" Label="@p.Label" Style="padding-left:20px">
                <RadzenSelectBar @bind-Value="@p.BindValue" TValue="IEnumerable<string>" Size="ButtonSize.Medium" Multiple="true" Style="border-radius:10px" Change="@SelectionChanged">
                    <Items>
                        @foreach (string option in p.Options)
                        {
                            <RadzenSelectBarItem Value="@option" Text="@option" />
                        }
                    </Items>
                </RadzenSelectBar>
            </CipherFormRow>
        }
            <CipherDatePicker Title="מתאריך"/>
            <CipherDatePicker Title="עד תאריך"/>
        </RadzenColumn>
    </RadzenRow>

    </ChildContent>

</CipherComponentCard>

<CipherComponentCard Title="תפוקה שנתית">
    <Buttons>
        <CipherButton Icon="@Icons.Table" HelpText="תצוגת טבלה" Variant="Variant.Outlined" Click="@SwitchView"/>
        <CipherButton Icon="@Icons.Summary" HelpText="תצוגת גרף" Variant="Variant.Outlined" Click="@SwitchView" />
        <CipherExcelButton Data="@GetProductionData()" FileName="yearly_output"/>
        <CipherPDFButton/>
    </Buttons>
    <ChildContent>
        @if (summaryView == "graph")
        {
            <RadzenChart Style="width:100%; margin-left:50px">
                @foreach (List<DataItem> series in production.dataItems)
                {
                    @if (searchParameters[2].BindValue.Contains(output_options[production.dataItems.IndexOf(series)]))
                    {
                        <RadzenStackedColumnSeries Data="@series" CategoryProperty="Month" Title="@output_options[production.dataItems.IndexOf(series)]" ValueProperty="Mass" >
                            <RadzenColumnOptions Width="60" />
                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                        </RadzenStackedColumnSeries>
                    }
                }
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="תפוקה [גרם]" />
                </RadzenValueAxis>
                <RadzenBarOptions Radius="5" />
            </RadzenChart>
        }
        else if (summaryView == "table")
        {

            <CipherDataGrid Cipher_TItem="ProductionData" DataSource="@GetProductionData()" />
        }
    </ChildContent>

</CipherComponentCard>

@code{
    string ButtonWidth = "120px";

    bool showDataLabels = false;

    string summaryView = "graph";

    public static readonly List<string> proc_options = new List<string> { "תהליך א", "תהליך ב", "תהליך ג" };
    public static readonly List<string> input_options = new List<string> { "מגיב א", "מגיב ב", "מגיב ג" };
    public static readonly List<string> output_options = new List<string> { "תוצר א", "תוצר ב", "תוצר ג" };

    public static IEnumerable<string> selectedProcs = proc_options;
    public static IEnumerable<string> selectedReagents = input_options;
    public static IEnumerable<string> selectedProducts = output_options;

    public class DataItem
    {
        public string Month { get; set; }
        public double Mass { get; set; }
    }

    public class Production
    {
        public List<List<DataItem>> dataItems { get; set; }
        public List<string> Titles { get; set; }
        public bool[] ShowDataItems { get; set; }
    }

    public static List<DataItem> ProdA = new List<DataItem>();
    public static List<DataItem> ProdB = new List<DataItem>();
    public static List<DataItem> ProdC = new List<DataItem>();

    protected override async Task OnInitializedAsync()
    {
        GetSeries();
    }

    public class ProductionData
    {
        public string Month { get; set; }
        public double Mass { get; set; }
        public string Process { get; set; }
        public string Reagent { get; set; }
        public string Product { get; set; }
    }

    public static readonly ProductionData[] productionData = new ProductionData[]
    {
        new ProductionData {Month="1", Mass=10, Reagent="מגיב א", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="2", Mass=9, Reagent="מגיב ב", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="3", Mass=8, Reagent="מגיב ג", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="4", Mass=9, Reagent="מגיב א", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="5", Mass=10, Reagent="מגיב ב", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="6", Mass=9, Reagent="מגיב ג", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="7", Mass=8, Reagent="מגיב א", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="8", Mass=9, Reagent="מגיב ב", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="9", Mass=10, Reagent="מגיב ג", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="10", Mass=9, Reagent="מגיב א", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="11", Mass=8, Reagent="מגיב ב", Product="תוצר א", Process="תהליך א"},
        new ProductionData {Month="12", Mass=9, Reagent="מגיב ג", Product="תוצר א", Process="תהליך א"},

        new ProductionData {Month="1", Mass=10, Reagent="מגיב ב", Product="תוצר א", Process="תהליך ב"},
        new ProductionData {Month="2", Mass=9, Reagent="מגיב ב", Product="תוצר ב", Process="תהליך ב"},
        new ProductionData {Month="3", Mass=8, Reagent="מגיב ב", Product="תוצר ג", Process="תהליך ב"},
        new ProductionData {Month="4", Mass=9, Reagent="מגיב ב", Product="תוצר א", Process="תהליך ב"},
        new ProductionData {Month="5", Mass=10, Reagent="מגיב ב", Product="תוצר ב", Process="תהליך ב"},
        new ProductionData {Month="6", Mass=9, Reagent="מגיב ב", Product="תוצר ג", Process="תהליך ב"},
        new ProductionData {Month="7", Mass=8, Reagent="מגיב ב", Product="תוצר ב", Process="תהליך ב"},
        new ProductionData {Month="8", Mass=9, Reagent="מגיב ב", Product="תוצר ג", Process="תהליך ב"},
        new ProductionData {Month="9", Mass=10, Reagent="מגיב ב", Product="תוצר א", Process="תהליך ב"},
        new ProductionData {Month="10", Mass=9, Reagent="מגיב ב", Product="תוצר ב", Process="תהליך ב"},
        new ProductionData {Month="11", Mass=8, Reagent="מגיב ב", Product="תוצר ג", Process="תהליך ב"},
        new ProductionData {Month="12", Mass=9, Reagent="מגיב ב", Product="תוצר א", Process="תהליך ב"},

        new ProductionData {Month="1", Mass=10, Reagent="מגיב א", Product="תוצר א", Process="תהליך ג"},
        new ProductionData {Month="2", Mass=9, Reagent="מגיב ב", Product="תוצר א", Process="תהליך ג"},
        new ProductionData {Month="3", Mass=8, Reagent="מגיב ג", Product="תוצר ב", Process="תהליך ג"},
        new ProductionData {Month="4", Mass=9, Reagent="מגיב א", Product="תוצר ב", Process="תהליך ג"},
        new ProductionData {Month="5", Mass=10, Reagent="מגיב ב", Product="תוצר ג", Process="תהליך ג"},
        new ProductionData {Month="6", Mass=9, Reagent="מגיב ג", Product="תוצר ג", Process="תהליך ג"},
        new ProductionData {Month="7", Mass=8, Reagent="מגיב א", Product="תוצר א", Process="תהליך ג"},
        new ProductionData {Month="8", Mass=9, Reagent="מגיב ב", Product="תוצר א", Process="תהליך ג"},
        new ProductionData {Month="9", Mass=10, Reagent="מגיב ג", Product="תוצר ב", Process="תהליך ג"},
        new ProductionData {Month="10", Mass=9, Reagent="מגיב א", Product="תוצר ב", Process="תהליך ג"},
        new ProductionData {Month="11", Mass=8, Reagent="מגיב ב", Product="תוצר ג", Process="תהליך ג"},
        new ProductionData {Month="12", Mass=9, Reagent="מגיב ג", Product="תוצר ג", Process="תהליך ג"}
    };

    public List<ProductionData> GetProductionData()
    {
        List<ProductionData> resultData = new List<ProductionData> { };

        foreach (ProductionData data in productionData)
        {
            if (searchParameters[1].BindValue.Contains(data.Reagent) && searchParameters[2].BindValue.Contains(data.Product) && searchParameters[0].BindValue.Contains(data.Process))
            {
                resultData.Add(data);
            }
        }

        return resultData;
    }

    public void GetSeries()
    {
        List<ProductionData> resultData = GetProductionData();

        Dictionary<string, Dictionary<string, double>> values = new Dictionary<string, Dictionary<string, double>>();

        foreach (ProductionData data in resultData)
        {
            if (values.ContainsKey(data.Product))
            {
                if (values[data.Product].ContainsKey(data.Month))
                {
                    values[data.Product][data.Month] += data.Mass;
                }
                else
                {
                    values[data.Product][data.Month] = data.Mass;
                }
            }
            else
            {
                values.Add(data.Product, new Dictionary<string, double>());
                values[data.Product][data.Month] = data.Mass;
            }
        }

        ProdA.Clear();
        ProdB.Clear();
        ProdC.Clear();

        foreach (string proc in values.Keys)
        {
            foreach (string month in values[proc].Keys)
            {
                if (proc == "תוצר א")
                {
                    ProdA.Add(new DataItem { Month = month, Mass = values[proc][month] });
                }

                if (proc == "תוצר ב")
                {
                    ProdB.Add(new DataItem { Month = month, Mass = values[proc][month] });
                }

                if (proc == "תוצר ג")
                {
                    ProdC.Add(new DataItem { Month = month, Mass = values[proc][month] });
                }
            }
        }
    }

    public Production production = new Production { 
        dataItems = new List<List<DataItem>> { ProdA, ProdB, ProdC },
        Titles = output_options,
        ShowDataItems = new bool[] {true, true, true}
    };

    public class SearchParameter
    {
        public string Icon { get; set; }
        public string Label { get; set; }
        public List<string> Options { get; set; }
        public IEnumerable<string> BindValue { get; set; }
    }

    List<SearchParameter> searchParameters = new List<SearchParameter> {
        new SearchParameter {Icon=Icons.Process, Label="תהליכים", Options=proc_options, BindValue=selectedProcs},
        new SearchParameter {Icon=Icons.Input, Label="חומרי הגלם", Options=input_options, BindValue=selectedReagents},
        new SearchParameter {Icon=Icons.Output, Label="תוצרים", Options=output_options, BindValue=selectedProducts }
    };

    void SwitchView()
    {
        summaryView = (summaryView == "graph") ? "table" : "graph";
    }

    void SelectionChanged()
    {
        foreach(string title in production.Titles)
        {
            production.ShowDataItems[production.Titles.IndexOf(title)] = selectedProducts.Contains(title);
        }
        GetSeries();
    }
}