@page "/Approval"

@using System.Reflection

@if (CommonFuncs.CanView(navLink))
{
    <PageTitle>@navLink.Name</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
    <CipherBooleanConditions @ref="EventsFilter" Title="סינון תנועות לאישור" OnFilter="@RefreshEvents" />
    <CipherDisplayedEventsCard Title="@navLink.Name" @bind-AllEvents="@PendingEvents" @ref="PendingEventsCard"
                               WithApproveButton="true" WithDeclineButton="true" UponApproval="@UponApproval" UponDecline="@UponDecline" />
    <CipherDisplayedEventsCard Title="תנועות מאושרות" @bind-AllEvents="@ApprovedEvents" @ref="ApprovedEventsCard"
                               WithDeclineButton="true" UponDecline="@CancelApproval" DeclineAllText="ביטול כל האישורים"/>
    <CipherDisplayedEventsCard Title="תנועות דחויות" @bind-AllEvents="@DeclinedEvents" @ref="DeclinedEventsCard"
                               WithDeclineButton="true" UponDecline="@CancelDecline" DeclineAllText="ביטול כל הדחיות"/>
    <CipherSubmit Click="Submit" Valid="@Valid" ErrorMessage="@ErrorMessage" @ref=submission />
    <CipherJsonCheck JsonValue="@JsonRequest" />
</RadzenStack>
}

@code {
    /// <summary>
    /// All events in queue for approval
    /// </summary>
    [Parameter]
    public List<IEvent> PendingEvents { get; set; } = new();

    /// <summary>
    /// All approved events
    /// </summary>
    [Parameter]
    public List<IEvent> ApprovedEvents { get; set; } = new();

    /// <summary>
    /// All declined events
    /// </summary>
    [Parameter]
    public List<IEvent> DeclinedEvents { get; set; } = new();

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; } = string.Empty;

    /// <summary>
    /// Error message upon improper submission.
    /// </summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// Is form valid for submission.
    /// </summary>
    [Parameter]
    public bool Valid { get; set; } = true;

    /// <summary>
    /// Update result, send from the api
    /// </summary>
    [Parameter]
    public IEvent? Result { get; set; }

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherBooleanConditions EventsFilter = new();
    private CipherDisplayedEventsCard PendingEventsCard = new();
    private CipherDisplayedEventsCard ApprovedEventsCard = new();
    private CipherDisplayedEventsCard DeclinedEventsCard = new();
    private CipherSubmit submission = new();

    private CipherNavLink navLink = CipherNavLinks.Approval;

    protected override async Task OnInitializedAsync()
        => (PendingEvents, Error) = await Config.Event(false).PendingEvents();

    public void UponApproval()
    {
        PendingEvents = PendingEventsCard.PendingEvents;
        ApprovedEvents.AddRange(PendingEventsCard.ApprovedEvents);

        ApprovedEventsCard.ChangeEvents(ApprovedEvents);
        PendingEventsCard.ChangeEvents(PendingEvents);
    }

    public void UponDecline()
    {
        PendingEvents = PendingEventsCard.PendingEvents;
        DeclinedEvents.AddRange(PendingEventsCard.DeclinedEvents);

        DeclinedEventsCard.ChangeEvents(DeclinedEvents);
        PendingEventsCard.ChangeEvents(PendingEvents);
    }

    public void CancelApproval()
    {
        ApprovedEvents = ApprovedEventsCard.PendingEvents;
        PendingEvents.AddRange(ApprovedEventsCard.DeclinedEvents);

        ApprovedEventsCard.ChangeEvents(ApprovedEvents);
        PendingEventsCard.ChangeEvents(PendingEvents);
    }

    public void CancelDecline()
    {
        DeclinedEvents = DeclinedEventsCard.PendingEvents;
        PendingEvents.AddRange(DeclinedEventsCard.DeclinedEvents);

        DeclinedEventsCard.ChangeEvents(DeclinedEvents);
        PendingEventsCard.ChangeEvents(PendingEvents);
    }

    public async Task RefreshEvents()
    {
        IGroupedBooleanCondition filterValue = EventsFilter.ChosenCondition;
        IObjectFactory objectFactory = Config.ObjectFactory();

        // add to filter - only pending events
        List<ICondition> originalFilterValue = filterValue.Conditions.ToList();

        originalFilterValue.Add(IEvent.PendingCondition());
        filterValue.Conditions = originalFilterValue;

        objectFactory.Filter = filterValue;

        // order by time (1), and system-id (2)

        IOrderedItem orderedItem = Config.OrderedItem();
        orderedItem.Attribute = $"[Event].[{nameof(IEvent.Timestamp)}]";
        orderedItem.Order = Order.desc;
        objectFactory.AddOrderBy(orderedItem);

        orderedItem = Config.OrderedItem();
        orderedItem.Attribute = $"[Event].[{nameof(IEvent.FinalStatePackages)}].[{nameof(IPackage.System)}].[{nameof(IStorageSystem.Id)}]";
        orderedItem.Order = Order.desc;
        objectFactory.AddOrderBy(orderedItem);

        var result = await Config.QueryRequests(false).QueryObjects<IEvent>(objectFactory);
        (PendingEvents, Error) = Tuple.Create(result.Item1.Cast<IEvent>().ToList(), result.Item2);

        JsonRequest = objectFactory.ToJson();
        PendingEventsCard.ChangeEvents(PendingEvents);
    }

    /// <summary>
    /// Fill all needed details for new event based on the form details.
    /// </summary>
    public async Task Submit()
    {
        foreach (var ev in ApprovedEvents)
        {
            IUpdateEvent updateEv = IUpdateEvent.ApprovedEvent();
            (Result, Error) = await ev.Update(ev.Id, updateEv);

            JsonRequest += ev.Id + "\n___\n\n" + updateEv.ToJson() + "\n\n-----------------\n\n";

            if (Error != ErrorResponse.Success)
                (Valid, ErrorMessage) = Tuple.Create(false, $"פעולת האישור של {ev.Id} נכשלה");
        }

        foreach (var ev in DeclinedEvents)
        {
            IUpdateEvent updateEv = IUpdateEvent.DeclinedEvent();
            (Result, Error) = await ev.Update(ev.Id, updateEv);

            JsonRequest += ev.Id + "\n___\n\n" + updateEv.ToJson() + "\n\n-----------------\n\n";

            if (Error != ErrorResponse.Success)
                (Valid, ErrorMessage) = Tuple.Create(false, $"פעולת הדחייה של {ev.Id} נכשלה");
        }

        (Valid, ErrorMessage) = Tuple.Create(true, "");
        UpdateSubmissionSummary();
    }

    private void UpdateSubmissionSummary()
    {
        submission.SetValid(Valid);
        submission.SetErrorMessage(ErrorMessage);
    }
}