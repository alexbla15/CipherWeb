@page "/Approval"

@using System.Reflection

<PageTitle>@Title</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
    <CipherBooleanConditions @ref="EventsFilter" Title="סינון תנועות לאישור" OnSave="@RefreshEvents" />
    <CipherJsonCheck JsonValue="@JsonRequest" />
    <CipherDisplayedEventsCard Title="@Title" @bind-Events="@PendingEvents" @ref="FilterableEvents"
        WithRowButtons="true"/>
    <CipherDisplayedEventsCard Title="תנועות מאושרות" @bind-Events="@ApprovedEvents" />
    <CipherDisplayedEventsCard Title="תנועות דחויות" @bind-Events="@DeclinedEvents" />
</RadzenStack>

@code {
    /// <summary>
    /// All events in queue for approval
    /// </summary>
    [Parameter]
    public List<IEvent> PendingEvents { get; set; } = new();

    /// <summary>
    /// All approved events
    /// </summary>
    [Parameter]
    public List<IEvent> ApprovedEvents { get; set; } = new();

    /// <summary>
    /// All declined events
    /// </summary>
    [Parameter]
    public List<IEvent> DeclinedEvents { get; set; } = new();

    /// <summary>
    /// Page Title.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// Json request that will be sent to the API server.
    /// </summary>
    [Parameter]
    public string JsonRequest { get; set; } = string.Empty;

    /// <summary>
    /// API response to submission.
    /// </summary>
    [Parameter]
    public ErrorResponse Error { get; set; } = ErrorResponse.Success;

    private CipherBooleanConditions EventsFilter = new();
    private CipherDisplayedEventsCard FilterableEvents = new();

    protected override async Task OnInitializedAsync()
    {
        Title ??= CipherNavLinks.Approval.Name;

        (PendingEvents, Error) = await IEvent.PendingEvents();
        (ApprovedEvents, Error) = await IEvent.ApprovedEvents();
        (DeclinedEvents, Error) = await IEvent.DeclinedEvents();
    }

    public async Task RefreshEvents()
    {
        IGroupedBooleanCondition filterValue = EventsFilter.ChosenCondition;
        IObjectFactory objectFactory = new ObjectFactory();

        // add to filter - only pending events
        List<ICondition> originalFilterValue = filterValue.Conditions.ToList();
        originalFilterValue.Add(new BooleanCondition() { Attribute = $"[{nameof(Event)}].[{nameof(IEvent.Status)}]", AttributeRelation = AttributeRelation.Eq, Value = "0" });
        filterValue.Conditions = originalFilterValue;

        objectFactory.Filter = filterValue;

        // order by time (1), and system-id (2)
        objectFactory.AddOrderBy(new OrderedItem()
            {
                Attribute = $"[{nameof(Event)}].[{nameof(IEvent.Timestamp)}]",
                Order = Order.desc
            });
        objectFactory.AddOrderBy(new OrderedItem()
            {
                Attribute = $"[{nameof(Event)}].[{nameof(IEvent.FinalStatePackages)}].[{nameof(IPackage.System)}].[{nameof(IStorageSystem.Id)}]",
                Order = Order.desc
            });

        var result = await Config.QueryRequests.QueryObjects<Event>(objectFactory);
        (PendingEvents, Error) = Tuple.Create(result.Item1.Cast<IEvent>().ToList(), result.Item2);

        JsonRequest = objectFactory.ToJson();
        await FilterableEvents.ChangeEvents(PendingEvents);
    }
}